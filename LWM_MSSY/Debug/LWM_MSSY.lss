
LWM_MSSY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800200  00001b38  00001bcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001d8f  00800226  00800226  00001bf2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001bf2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000448  00000000  00000000  00001c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000064f6  00000000  00000000  000020ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d37  00000000  00000000  000085a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000026e9  00000000  00000000  0000b2d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a14  00000000  00000000  0000d9c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002009  00000000  00000000  0000e3d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002697  00000000  00000000  000103e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000488  00000000  00000000  00012a78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
       2:	00 00       	nop
       4:	b7 c0       	rjmp	.+366    	; 0x174 <__bad_interrupt>
       6:	00 00       	nop
       8:	b5 c0       	rjmp	.+362    	; 0x174 <__bad_interrupt>
       a:	00 00       	nop
       c:	b3 c0       	rjmp	.+358    	; 0x174 <__bad_interrupt>
       e:	00 00       	nop
      10:	b1 c0       	rjmp	.+354    	; 0x174 <__bad_interrupt>
      12:	00 00       	nop
      14:	af c0       	rjmp	.+350    	; 0x174 <__bad_interrupt>
      16:	00 00       	nop
      18:	ad c0       	rjmp	.+346    	; 0x174 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ab c0       	rjmp	.+342    	; 0x174 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a9 c0       	rjmp	.+338    	; 0x174 <__bad_interrupt>
      22:	00 00       	nop
      24:	a7 c0       	rjmp	.+334    	; 0x174 <__bad_interrupt>
      26:	00 00       	nop
      28:	a5 c0       	rjmp	.+330    	; 0x174 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a3 c0       	rjmp	.+326    	; 0x174 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a1 c0       	rjmp	.+322    	; 0x174 <__bad_interrupt>
      32:	00 00       	nop
      34:	5d c1       	rjmp	.+698    	; 0x2f0 <__vector_13>
      36:	00 00       	nop
      38:	9d c0       	rjmp	.+314    	; 0x174 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9b c0       	rjmp	.+310    	; 0x174 <__bad_interrupt>
      3e:	00 00       	nop
      40:	99 c0       	rjmp	.+306    	; 0x174 <__bad_interrupt>
      42:	00 00       	nop
      44:	97 c0       	rjmp	.+302    	; 0x174 <__bad_interrupt>
      46:	00 00       	nop
      48:	95 c0       	rjmp	.+298    	; 0x174 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	93 c0       	rjmp	.+294    	; 0x174 <__bad_interrupt>
      4e:	00 00       	nop
      50:	91 c0       	rjmp	.+290    	; 0x174 <__bad_interrupt>
      52:	00 00       	nop
      54:	8f c0       	rjmp	.+286    	; 0x174 <__bad_interrupt>
      56:	00 00       	nop
      58:	8d c0       	rjmp	.+282    	; 0x174 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8b c0       	rjmp	.+278    	; 0x174 <__bad_interrupt>
      5e:	00 00       	nop
      60:	89 c0       	rjmp	.+274    	; 0x174 <__bad_interrupt>
      62:	00 00       	nop
      64:	87 c0       	rjmp	.+270    	; 0x174 <__bad_interrupt>
      66:	00 00       	nop
      68:	85 c0       	rjmp	.+266    	; 0x174 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	83 c0       	rjmp	.+262    	; 0x174 <__bad_interrupt>
      6e:	00 00       	nop
      70:	81 c0       	rjmp	.+258    	; 0x174 <__bad_interrupt>
      72:	00 00       	nop
      74:	7f c0       	rjmp	.+254    	; 0x174 <__bad_interrupt>
      76:	00 00       	nop
      78:	7d c0       	rjmp	.+250    	; 0x174 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7b c0       	rjmp	.+246    	; 0x174 <__bad_interrupt>
      7e:	00 00       	nop
      80:	79 c0       	rjmp	.+242    	; 0x174 <__bad_interrupt>
      82:	00 00       	nop
      84:	77 c0       	rjmp	.+238    	; 0x174 <__bad_interrupt>
      86:	00 00       	nop
      88:	75 c0       	rjmp	.+234    	; 0x174 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	73 c0       	rjmp	.+230    	; 0x174 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e4 c1       	rjmp	.+968    	; 0x45a <__vector_36>
      92:	00 00       	nop
      94:	c6 c1       	rjmp	.+908    	; 0x422 <__vector_37>
      96:	00 00       	nop
      98:	6d c0       	rjmp	.+218    	; 0x174 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6b c0       	rjmp	.+214    	; 0x174 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	69 c0       	rjmp	.+210    	; 0x174 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	67 c0       	rjmp	.+206    	; 0x174 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	12 c1       	rjmp	.+548    	; 0x2ce <__vector_42>
      aa:	00 00       	nop
      ac:	63 c0       	rjmp	.+198    	; 0x174 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	61 c0       	rjmp	.+194    	; 0x174 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5f c0       	rjmp	.+190    	; 0x174 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5d c0       	rjmp	.+186    	; 0x174 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5b c0       	rjmp	.+182    	; 0x174 <__bad_interrupt>
      be:	00 00       	nop
      c0:	59 c0       	rjmp	.+178    	; 0x174 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	57 c0       	rjmp	.+174    	; 0x174 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	55 c0       	rjmp	.+170    	; 0x174 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	53 c0       	rjmp	.+166    	; 0x174 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	51 c0       	rjmp	.+162    	; 0x174 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4f c0       	rjmp	.+158    	; 0x174 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4d c0       	rjmp	.+154    	; 0x174 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4b c0       	rjmp	.+150    	; 0x174 <__bad_interrupt>
      de:	00 00       	nop
      e0:	49 c0       	rjmp	.+146    	; 0x174 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	47 c0       	rjmp	.+142    	; 0x174 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	45 c0       	rjmp	.+138    	; 0x174 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	43 c0       	rjmp	.+134    	; 0x174 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	41 c0       	rjmp	.+130    	; 0x174 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	3f c0       	rjmp	.+126    	; 0x174 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	3d c0       	rjmp	.+122    	; 0x174 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	3b c0       	rjmp	.+118    	; 0x174 <__bad_interrupt>
      fe:	00 00       	nop
     100:	39 c0       	rjmp	.+114    	; 0x174 <__bad_interrupt>
     102:	00 00       	nop
     104:	37 c0       	rjmp	.+110    	; 0x174 <__bad_interrupt>
     106:	00 00       	nop
     108:	35 c0       	rjmp	.+106    	; 0x174 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	33 c0       	rjmp	.+102    	; 0x174 <__bad_interrupt>
     10e:	00 00       	nop
     110:	31 c0       	rjmp	.+98     	; 0x174 <__bad_interrupt>
     112:	00 00       	nop
     114:	2f c0       	rjmp	.+94     	; 0x174 <__bad_interrupt>
     116:	00 00       	nop
     118:	2d c0       	rjmp	.+90     	; 0x174 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2b c0       	rjmp	.+86     	; 0x174 <__bad_interrupt>
     11e:	00 00       	nop
     120:	29 c0       	rjmp	.+82     	; 0x174 <__bad_interrupt>
     122:	00 00       	nop
     124:	27 c0       	rjmp	.+78     	; 0x174 <__bad_interrupt>
     126:	00 00       	nop
     128:	25 c0       	rjmp	.+74     	; 0x174 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	23 c0       	rjmp	.+70     	; 0x174 <__bad_interrupt>
     12e:	00 00       	nop
     130:	21 c0       	rjmp	.+66     	; 0x174 <__bad_interrupt>
	...

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf ef       	ldi	r28, 0xFF	; 255
     13a:	d1 e8       	ldi	r29, 0x81	; 129
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
     144:	12 e0       	ldi	r17, 0x02	; 2
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b2 e0       	ldi	r27, 0x02	; 2
     14a:	e8 e3       	ldi	r30, 0x38	; 56
     14c:	fb e1       	ldi	r31, 0x1B	; 27
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	0b bf       	out	0x3b, r16	; 59
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
     154:	07 90       	elpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	a6 32       	cpi	r26, 0x26	; 38
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
     15e:	2f e1       	ldi	r18, 0x1F	; 31
     160:	a6 e2       	ldi	r26, 0x26	; 38
     162:	b2 e0       	ldi	r27, 0x02	; 2
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	a5 3b       	cpi	r26, 0xB5	; 181
     16a:	b2 07       	cpc	r27, r18
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	73 d0       	rcall	.+230    	; 0x256 <main>
     170:	0c 94 9a 0d 	jmp	0x1b34	; 0x1b34 <_exit>

00000174 <__bad_interrupt>:
     174:	45 cf       	rjmp	.-374    	; 0x0 <__vectors>

00000176 <APP_dataConf>:
  routeTable[routeTablePtr].sleeping = false;
  routeTable[routeTablePtr].type = (SensorType_t)(*data);
  // in_use only goes active on APP_ACK from client
  routeTable[routeTablePtr].in_use = false;
  return routeTablePtr;
}
     176:	08 95       	ret

00000178 <HAL_UartBytesReceived>:
     178:	46 c1       	rjmp	.+652    	; 0x406 <HAL_UartWriteString>
     17a:	08 95       	ret

0000017c <APP_dataSend>:
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	1f 92       	push	r1
     182:	cd b7       	in	r28, 0x3d	; 61
     184:	de b7       	in	r29, 0x3e	; 62
     186:	69 83       	std	Y+1, r22	; 0x01
     188:	70 e0       	ldi	r23, 0x00	; 0
     18a:	fb 01       	movw	r30, r22
     18c:	ee 0f       	add	r30, r30
     18e:	ff 1f       	adc	r31, r31
     190:	e6 0f       	add	r30, r22
     192:	f7 1f       	adc	r31, r23
     194:	ee 0f       	add	r30, r30
     196:	ff 1f       	adc	r31, r31
     198:	ea 5d       	subi	r30, 0xDA	; 218
     19a:	fd 4f       	sbci	r31, 0xFD	; 253
     19c:	20 81       	ld	r18, Z
     19e:	31 81       	ldd	r19, Z+1	; 0x01
     1a0:	92 81       	ldd	r25, Z+2	; 0x02
     1a2:	87 30       	cpi	r24, 0x07	; 7
     1a4:	61 f0       	breq	.+24     	; 0x1be <APP_dataSend+0x42>
     1a6:	89 30       	cpi	r24, 0x09	; 9
     1a8:	91 f4       	brne	.+36     	; 0x1ce <APP_dataSend+0x52>
     1aa:	e3 e9       	ldi	r30, 0x93	; 147
     1ac:	f8 e0       	ldi	r31, 0x08	; 8
     1ae:	ae 01       	movw	r20, r28
     1b0:	4f 5f       	subi	r20, 0xFF	; 255
     1b2:	5f 4f       	sbci	r21, 0xFF	; 255
     1b4:	53 87       	std	Z+11, r21	; 0x0b
     1b6:	42 87       	std	Z+10, r20	; 0x0a
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	84 87       	std	Z+12, r24	; 0x0c
     1bc:	08 c0       	rjmp	.+16     	; 0x1ce <APP_dataSend+0x52>
     1be:	e3 e9       	ldi	r30, 0x93	; 147
     1c0:	f8 e0       	ldi	r31, 0x08	; 8
     1c2:	41 e2       	ldi	r20, 0x21	; 33
     1c4:	52 e0       	ldi	r21, 0x02	; 2
     1c6:	53 87       	std	Z+11, r21	; 0x0b
     1c8:	42 87       	std	Z+10, r20	; 0x0a
     1ca:	82 e0       	ldi	r24, 0x02	; 2
     1cc:	84 87       	std	Z+12, r24	; 0x0c
     1ce:	e3 e9       	ldi	r30, 0x93	; 147
     1d0:	f8 e0       	ldi	r31, 0x08	; 8
     1d2:	36 83       	std	Z+6, r19	; 0x06
     1d4:	25 83       	std	Z+5, r18	; 0x05
     1d6:	97 83       	std	Z+7, r25	; 0x07
     1d8:	90 87       	std	Z+8, r25	; 0x08
     1da:	82 e0       	ldi	r24, 0x02	; 2
     1dc:	81 87       	std	Z+9, r24	; 0x09
     1de:	8b eb       	ldi	r24, 0xBB	; 187
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	96 87       	std	Z+14, r25	; 0x0e
     1e4:	85 87       	std	Z+13, r24	; 0x0d
     1e6:	cf 01       	movw	r24, r30
     1e8:	2c d2       	rcall	.+1112   	; 0x642 <NWK_DataReq>
     1ea:	0f 90       	pop	r0
     1ec:	df 91       	pop	r29
     1ee:	cf 91       	pop	r28
     1f0:	08 95       	ret

000001f2 <APP_dataRecv>:
     1f2:	fc 01       	movw	r30, r24
     1f4:	a7 81       	ldd	r26, Z+7	; 0x07
     1f6:	b0 85       	ldd	r27, Z+8	; 0x08
     1f8:	11 96       	adiw	r26, 0x01	; 1
     1fa:	9c 91       	ld	r25, X
     1fc:	99 30       	cpi	r25, 0x09	; 9
     1fe:	41 f0       	breq	.+16     	; 0x210 <APP_dataRecv+0x1e>
     200:	9b 30       	cpi	r25, 0x0B	; 11
     202:	51 f0       	breq	.+20     	; 0x218 <APP_dataRecv+0x26>
     204:	98 30       	cpi	r25, 0x08	; 8
     206:	59 f4       	brne	.+22     	; 0x21e <APP_dataRecv+0x2c>
     208:	60 81       	ld	r22, Z
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	b7 df       	rcall	.-146    	; 0x17c <APP_dataSend>
     20e:	07 c0       	rjmp	.+14     	; 0x21e <APP_dataRecv+0x2c>
     210:	60 81       	ld	r22, Z
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	b3 df       	rcall	.-154    	; 0x17c <APP_dataSend>
     216:	03 c0       	rjmp	.+6      	; 0x21e <APP_dataRecv+0x2c>
     218:	60 81       	ld	r22, Z
     21a:	87 e0       	ldi	r24, 0x07	; 7
     21c:	af df       	rcall	.-162    	; 0x17c <APP_dataSend>
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	08 95       	ret

00000222 <APP_init>:
  }
  (void)timer;
}

void APP_init(void) {
  NWK_SetAddr(APP_ADDR);
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	ca d1       	rcall	.+916    	; 0x5bc <NWK_SetAddr>
  NWK_SetPanId(APP_PANID);
     228:	80 e8       	ldi	r24, 0x80	; 128
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	ce d1       	rcall	.+924    	; 0x5ca <NWK_SetPanId>
  PHY_SetChannel(APP_CHANNEL);
     22e:	8f e0       	ldi	r24, 0x0F	; 15
     230:	0e 94 09 0b 	call	0x1612	; 0x1612 <PHY_SetChannel>
  PHY_SetRxState(true);
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	0e 94 05 0b 	call	0x160a	; 0x160a <PHY_SetRxState>

  NWK_OpenEndpoint(APP_ENDPOINT, APP_dataRecv);
     23a:	69 ef       	ldi	r22, 0xF9	; 249
     23c:	70 e0       	ldi	r23, 0x00	; 0
     23e:	83 e0       	ldi	r24, 0x03	; 3
     240:	cb d1       	rcall	.+918    	; 0x5d8 <NWK_OpenEndpoint>
  HAL_BoardInit();

  timer.interval = APP_FLUSH_TIMER_INTERVAL;
  timer.mode = SYS_TIMER_INTERVAL_MODE;
  timer.handler = APP_timerHandler;
  dataReq.data = dataReqBuffer;
     242:	86 e2       	ldi	r24, 0x26	; 38
     244:	98 e0       	ldi	r25, 0x08	; 8
     246:	90 93 9e 08 	sts	0x089E, r25	; 0x80089e <dataReq+0xb>
     24a:	80 93 9d 08 	sts	0x089D, r24	; 0x80089d <dataReq+0xa>

#if DESIGNATION == 1 // client
  APP_dataSend(DISCOVER, 00);
     24e:	60 e0       	ldi	r22, 0x00	; 0
     250:	82 e0       	ldi	r24, 0x02	; 2
     252:	94 cf       	rjmp	.-216    	; 0x17c <APP_dataSend>
     254:	08 95       	ret

00000256 <main>:
		break;
	}
}

int main(void) {
	SYS_Init();
     256:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <SYS_Init>
	HAL_UartInit(38400);
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	76 e9       	ldi	r23, 0x96	; 150
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	55 d0       	rcall	.+170    	; 0x30e <HAL_UartInit>

static void APP_TaskHandler(void) {
	switch (appState) {
		case INIT: {
			APP_init();
			appState = IDLE;
     264:	c1 e0       	ldi	r28, 0x01	; 1
int main(void) {
	SYS_Init();
	HAL_UartInit(38400);

	while (1) {
		SYS_TaskHandler();
     266:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <SYS_TaskHandler>
		HAL_UartTaskHandler();
     26a:	4e d1       	rcall	.+668    	; 0x508 <HAL_UartTaskHandler>
#include "sys.h"

static AppState_t appState;

static void APP_TaskHandler(void) {
	switch (appState) {
     26c:	80 91 a4 08 	lds	r24, 0x08A4	; 0x8008a4 <appState>
     270:	81 11       	cpse	r24, r1
		case INIT: {
			APP_init();
     272:	f9 cf       	rjmp	.-14     	; 0x266 <main+0x10>
     274:	d6 df       	rcall	.-84     	; 0x222 <APP_init>
			appState = IDLE;
     276:	c0 93 a4 08 	sts	0x08A4, r28	; 0x8008a4 <appState>
     27a:	f5 cf       	rjmp	.-22     	; 0x266 <main+0x10>

0000027c <HAL_Init>:
     27c:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     27e:	0f b6       	in	r0, 0x3f	; 63
     280:	f8 94       	cli
     282:	a8 95       	wdr
     284:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     288:	88 61       	ori	r24, 0x18	; 24
     28a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     28e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     292:	0f be       	out	0x3f, r0	; 63
     294:	e1 e6       	ldi	r30, 0x61	; 97
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	80 e8       	ldi	r24, 0x80	; 128
     29a:	80 83       	st	Z, r24
     29c:	10 82       	st	Z, r1
     29e:	78 94       	sei
     2a0:	01 c0       	rjmp	.+2      	; 0x2a4 <HAL_TimerInit>
     2a2:	08 95       	ret

000002a4 <HAL_TimerInit>:
     2a4:	10 92 8c 1f 	sts	0x1F8C, r1	; 0x801f8c <halTimerIrqCount>
     2a8:	80 e1       	ldi	r24, 0x10	; 16
     2aa:	97 e2       	ldi	r25, 0x27	; 39
     2ac:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
     2b0:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
     2b4:	e1 ea       	ldi	r30, 0xA1	; 161
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	88 e0       	ldi	r24, 0x08	; 8
     2ba:	80 83       	st	Z, r24
     2bc:	80 81       	ld	r24, Z
     2be:	82 60       	ori	r24, 0x02	; 2
     2c0:	80 83       	st	Z, r24
     2c2:	e2 e7       	ldi	r30, 0x72	; 114
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	80 81       	ld	r24, Z
     2c8:	82 60       	ori	r24, 0x02	; 2
     2ca:	80 83       	st	Z, r24
     2cc:	08 95       	ret

000002ce <__vector_42>:
     2ce:	1f 92       	push	r1
     2d0:	0f 92       	push	r0
     2d2:	0f b6       	in	r0, 0x3f	; 63
     2d4:	0f 92       	push	r0
     2d6:	11 24       	eor	r1, r1
     2d8:	8f 93       	push	r24
     2da:	80 91 8c 1f 	lds	r24, 0x1F8C	; 0x801f8c <halTimerIrqCount>
     2de:	8f 5f       	subi	r24, 0xFF	; 255
     2e0:	80 93 8c 1f 	sts	0x1F8C, r24	; 0x801f8c <halTimerIrqCount>
     2e4:	8f 91       	pop	r24
     2e6:	0f 90       	pop	r0
     2e8:	0f be       	out	0x3f, r0	; 63
     2ea:	0f 90       	pop	r0
     2ec:	1f 90       	pop	r1
     2ee:	18 95       	reti

000002f0 <__vector_13>:
     2f0:	1f 92       	push	r1
     2f2:	0f 92       	push	r0
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	0f 92       	push	r0
     2f8:	11 24       	eor	r1, r1
     2fa:	8f 93       	push	r24
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <halSleepTimerEvent>
     302:	8f 91       	pop	r24
     304:	0f 90       	pop	r0
     306:	0f be       	out	0x3f, r0	; 63
     308:	0f 90       	pop	r0
     30a:	1f 90       	pop	r1
     30c:	18 95       	reti

0000030e <HAL_UartInit>:
    rxFifo.bytes--;
  ATOMIC_SECTION_LEAVE
  PRAGMA(diag_default=Pa082);

  return byte;
}
     30e:	dc 01       	movw	r26, r24
     310:	cb 01       	movw	r24, r22
     312:	88 0f       	add	r24, r24
     314:	99 1f       	adc	r25, r25
     316:	aa 1f       	adc	r26, r26
     318:	bb 1f       	adc	r27, r27
     31a:	88 0f       	add	r24, r24
     31c:	99 1f       	adc	r25, r25
     31e:	aa 1f       	adc	r26, r26
     320:	bb 1f       	adc	r27, r27
     322:	9c 01       	movw	r18, r24
     324:	ad 01       	movw	r20, r26
     326:	22 0f       	add	r18, r18
     328:	33 1f       	adc	r19, r19
     32a:	44 1f       	adc	r20, r20
     32c:	55 1f       	adc	r21, r21
     32e:	22 0f       	add	r18, r18
     330:	33 1f       	adc	r19, r19
     332:	44 1f       	adc	r20, r20
     334:	55 1f       	adc	r21, r21
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	74 e2       	ldi	r23, 0x24	; 36
     33a:	84 ef       	ldi	r24, 0xF4	; 244
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 df 0c 	call	0x19be	; 0x19be <__udivmodsi4>
     342:	ba 01       	movw	r22, r20
     344:	a9 01       	movw	r20, r18
     346:	41 50       	subi	r20, 0x01	; 1
     348:	51 09       	sbc	r21, r1
     34a:	61 09       	sbc	r22, r1
     34c:	71 09       	sbc	r23, r1
     34e:	bb 27       	eor	r27, r27
     350:	a7 2f       	mov	r26, r23
     352:	96 2f       	mov	r25, r22
     354:	85 2f       	mov	r24, r21
     356:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
     35a:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
     35e:	82 e0       	ldi	r24, 0x02	; 2
     360:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
     364:	88 e9       	ldi	r24, 0x98	; 152
     366:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
     36a:	86 e0       	ldi	r24, 0x06	; 6
     36c:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>
     370:	e4 ed       	ldi	r30, 0xD4	; 212
     372:	fb e0       	ldi	r31, 0x0B	; 11
     374:	83 e4       	ldi	r24, 0x43	; 67
     376:	9a e0       	ldi	r25, 0x0A	; 10
     378:	91 87       	std	Z+9, r25	; 0x09
     37a:	80 87       	std	Z+8, r24	; 0x08
     37c:	80 e9       	ldi	r24, 0x90	; 144
     37e:	91 e0       	ldi	r25, 0x01	; 1
     380:	95 83       	std	Z+5, r25	; 0x05
     382:	84 83       	std	Z+4, r24	; 0x04
     384:	17 82       	std	Z+7, r1	; 0x07
     386:	16 82       	std	Z+6, r1	; 0x06
     388:	11 82       	std	Z+1, r1	; 0x01
     38a:	10 82       	st	Z, r1
     38c:	13 82       	std	Z+3, r1	; 0x03
     38e:	12 82       	std	Z+2, r1	; 0x02
     390:	e9 e3       	ldi	r30, 0x39	; 57
     392:	fa e0       	ldi	r31, 0x0A	; 10
     394:	28 ea       	ldi	r18, 0xA8	; 168
     396:	38 e0       	ldi	r19, 0x08	; 8
     398:	31 87       	std	Z+9, r19	; 0x09
     39a:	20 87       	std	Z+8, r18	; 0x08
     39c:	95 83       	std	Z+5, r25	; 0x05
     39e:	84 83       	std	Z+4, r24	; 0x04
     3a0:	17 82       	std	Z+7, r1	; 0x07
     3a2:	16 82       	std	Z+6, r1	; 0x06
     3a4:	11 82       	std	Z+1, r1	; 0x01
     3a6:	10 82       	st	Z, r1
     3a8:	13 82       	std	Z+3, r1	; 0x03
     3aa:	12 82       	std	Z+2, r1	; 0x02
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <udrEmpty>
     3b2:	10 92 a6 08 	sts	0x08A6, r1	; 0x8008a6 <newData>
     3b6:	08 95       	ret

000003b8 <HAL_UartWriteByte>:
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	e4 ed       	ldi	r30, 0xD4	; 212
     3be:	fb e0       	ldi	r31, 0x0B	; 11
     3c0:	26 81       	ldd	r18, Z+6	; 0x06
     3c2:	37 81       	ldd	r19, Z+7	; 0x07
     3c4:	64 81       	ldd	r22, Z+4	; 0x04
     3c6:	75 81       	ldd	r23, Z+5	; 0x05
     3c8:	26 17       	cp	r18, r22
     3ca:	37 07       	cpc	r19, r23
     3cc:	c9 f0       	breq	.+50     	; 0x400 <__LOCK_REGION_LENGTH__>
     3ce:	c0 85       	ldd	r28, Z+8	; 0x08
     3d0:	d1 85       	ldd	r29, Z+9	; 0x09
     3d2:	42 81       	ldd	r20, Z+2	; 0x02
     3d4:	53 81       	ldd	r21, Z+3	; 0x03
     3d6:	da 01       	movw	r26, r20
     3d8:	11 96       	adiw	r26, 0x01	; 1
     3da:	b3 83       	std	Z+3, r27	; 0x03
     3dc:	a2 83       	std	Z+2, r26	; 0x02
     3de:	fe 01       	movw	r30, r28
     3e0:	e4 0f       	add	r30, r20
     3e2:	f5 1f       	adc	r31, r21
     3e4:	80 83       	st	Z, r24
     3e6:	6a 17       	cp	r22, r26
     3e8:	7b 07       	cpc	r23, r27
     3ea:	21 f4       	brne	.+8      	; 0x3f4 <HAL_UartWriteByte+0x3c>
     3ec:	10 92 d7 0b 	sts	0x0BD7, r1	; 0x800bd7 <txFifo+0x3>
     3f0:	10 92 d6 0b 	sts	0x0BD6, r1	; 0x800bd6 <txFifo+0x2>
     3f4:	2f 5f       	subi	r18, 0xFF	; 255
     3f6:	3f 4f       	sbci	r19, 0xFF	; 255
     3f8:	30 93 db 0b 	sts	0x0BDB, r19	; 0x800bdb <txFifo+0x7>
     3fc:	20 93 da 0b 	sts	0x0BDA, r18	; 0x800bda <txFifo+0x6>
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	08 95       	ret

00000406 <HAL_UartWriteString>:
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	ec 01       	movw	r28, r24
     40c:	88 81       	ld	r24, Y
     40e:	88 23       	and	r24, r24
     410:	29 f0       	breq	.+10     	; 0x41c <HAL_UartWriteString+0x16>
     412:	21 96       	adiw	r28, 0x01	; 1
     414:	d1 df       	rcall	.-94     	; 0x3b8 <HAL_UartWriteByte>
     416:	89 91       	ld	r24, Y+
     418:	81 11       	cpse	r24, r1
     41a:	fc cf       	rjmp	.-8      	; 0x414 <HAL_UartWriteString+0xe>
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	08 95       	ret

00000422 <__vector_37>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
     422:	1f 92       	push	r1
     424:	0f 92       	push	r0
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	0f 92       	push	r0
     42a:	11 24       	eor	r1, r1
     42c:	0b b6       	in	r0, 0x3b	; 59
     42e:	0f 92       	push	r0
     430:	8f 93       	push	r24
     432:	ef 93       	push	r30
     434:	ff 93       	push	r31
  udrEmpty = true;
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <udrEmpty>
  UCSRxB &= ~(1 << UDRIE1);
     43c:	e9 ec       	ldi	r30, 0xC9	; 201
     43e:	f0 e0       	ldi	r31, 0x00	; 0
     440:	80 81       	ld	r24, Z
     442:	8f 7d       	andi	r24, 0xDF	; 223
     444:	80 83       	st	Z, r24
}
     446:	ff 91       	pop	r31
     448:	ef 91       	pop	r30
     44a:	8f 91       	pop	r24
     44c:	0f 90       	pop	r0
     44e:	0b be       	out	0x3b, r0	; 59
     450:	0f 90       	pop	r0
     452:	0f be       	out	0x3f, r0	; 63
     454:	0f 90       	pop	r0
     456:	1f 90       	pop	r1
     458:	18 95       	reti

0000045a <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
     45a:	1f 92       	push	r1
     45c:	0f 92       	push	r0
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	0f 92       	push	r0
     462:	11 24       	eor	r1, r1
     464:	0b b6       	in	r0, 0x3b	; 59
     466:	0f 92       	push	r0
     468:	2f 93       	push	r18
     46a:	3f 93       	push	r19
     46c:	4f 93       	push	r20
     46e:	5f 93       	push	r21
     470:	6f 93       	push	r22
     472:	7f 93       	push	r23
     474:	8f 93       	push	r24
     476:	9f 93       	push	r25
     478:	af 93       	push	r26
     47a:	bf 93       	push	r27
     47c:	ef 93       	push	r30
     47e:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
     480:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  uint8_t byte = UDRx;
     484:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
     488:	8c 71       	andi	r24, 0x1C	; 28
     48a:	59 f5       	brne	.+86     	; 0x4e2 <__vector_36+0x88>
  {
    if (rxFifo.bytes == rxFifo.size)
     48c:	e9 e3       	ldi	r30, 0x39	; 57
     48e:	fa e0       	ldi	r31, 0x0A	; 10
     490:	46 81       	ldd	r20, Z+6	; 0x06
     492:	57 81       	ldd	r21, Z+7	; 0x07
     494:	84 81       	ldd	r24, Z+4	; 0x04
     496:	95 81       	ldd	r25, Z+5	; 0x05
     498:	48 17       	cp	r20, r24
     49a:	59 07       	cpc	r21, r25
     49c:	11 f1       	breq	.+68     	; 0x4e2 <__vector_36+0x88>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
     49e:	40 85       	ldd	r20, Z+8	; 0x08
     4a0:	51 85       	ldd	r21, Z+9	; 0x09
     4a2:	82 81       	ldd	r24, Z+2	; 0x02
     4a4:	93 81       	ldd	r25, Z+3	; 0x03
     4a6:	bc 01       	movw	r22, r24
     4a8:	6f 5f       	subi	r22, 0xFF	; 255
     4aa:	7f 4f       	sbci	r23, 0xFF	; 255
     4ac:	73 83       	std	Z+3, r23	; 0x03
     4ae:	62 83       	std	Z+2, r22	; 0x02
     4b0:	da 01       	movw	r26, r20
     4b2:	a8 0f       	add	r26, r24
     4b4:	b9 1f       	adc	r27, r25
     4b6:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
     4b8:	22 81       	ldd	r18, Z+2	; 0x02
     4ba:	33 81       	ldd	r19, Z+3	; 0x03
     4bc:	84 81       	ldd	r24, Z+4	; 0x04
     4be:	95 81       	ldd	r25, Z+5	; 0x05
     4c0:	28 17       	cp	r18, r24
     4c2:	39 07       	cpc	r19, r25
     4c4:	21 f4       	brne	.+8      	; 0x4ce <__vector_36+0x74>
      rxFifo.tail = 0;
     4c6:	10 92 3c 0a 	sts	0x0A3C, r1	; 0x800a3c <rxFifo+0x3>
     4ca:	10 92 3b 0a 	sts	0x0A3B, r1	; 0x800a3b <rxFifo+0x2>
    rxFifo.bytes++;
     4ce:	e9 e3       	ldi	r30, 0x39	; 57
     4d0:	fa e0       	ldi	r31, 0x0A	; 10
     4d2:	86 81       	ldd	r24, Z+6	; 0x06
     4d4:	97 81       	ldd	r25, Z+7	; 0x07
     4d6:	01 96       	adiw	r24, 0x01	; 1
     4d8:	97 83       	std	Z+7, r25	; 0x07
     4da:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	80 93 a6 08 	sts	0x08A6, r24	; 0x8008a6 <newData>
  }

  PRAGMA(diag_default=Pa082);
}
     4e2:	ff 91       	pop	r31
     4e4:	ef 91       	pop	r30
     4e6:	bf 91       	pop	r27
     4e8:	af 91       	pop	r26
     4ea:	9f 91       	pop	r25
     4ec:	8f 91       	pop	r24
     4ee:	7f 91       	pop	r23
     4f0:	6f 91       	pop	r22
     4f2:	5f 91       	pop	r21
     4f4:	4f 91       	pop	r20
     4f6:	3f 91       	pop	r19
     4f8:	2f 91       	pop	r18
     4fa:	0f 90       	pop	r0
     4fc:	0b be       	out	0x3b, r0	; 59
     4fe:	0f 90       	pop	r0
     500:	0f be       	out	0x3f, r0	; 63
     502:	0f 90       	pop	r0
     504:	1f 90       	pop	r1
     506:	18 95       	reti

00000508 <HAL_UartTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
  if (txFifo.bytes && udrEmpty)
     508:	80 91 da 0b 	lds	r24, 0x0BDA	; 0x800bda <txFifo+0x6>
     50c:	90 91 db 0b 	lds	r25, 0x0BDB	; 0x800bdb <txFifo+0x7>
     510:	00 97       	sbiw	r24, 0x00	; 0
     512:	69 f1       	breq	.+90     	; 0x56e <HAL_UartTaskHandler+0x66>
     514:	20 91 a7 08 	lds	r18, 0x08A7	; 0x8008a7 <udrEmpty>
     518:	22 23       	and	r18, r18
     51a:	49 f1       	breq	.+82     	; 0x56e <HAL_UartTaskHandler+0x66>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
     51c:	e4 ed       	ldi	r30, 0xD4	; 212
     51e:	fb e0       	ldi	r31, 0x0B	; 11
     520:	60 85       	ldd	r22, Z+8	; 0x08
     522:	71 85       	ldd	r23, Z+9	; 0x09
     524:	20 81       	ld	r18, Z
     526:	31 81       	ldd	r19, Z+1	; 0x01
     528:	a9 01       	movw	r20, r18
     52a:	4f 5f       	subi	r20, 0xFF	; 255
     52c:	5f 4f       	sbci	r21, 0xFF	; 255
     52e:	51 83       	std	Z+1, r21	; 0x01
     530:	40 83       	st	Z, r20
     532:	db 01       	movw	r26, r22
     534:	a2 0f       	add	r26, r18
     536:	b3 1f       	adc	r27, r19
     538:	2c 91       	ld	r18, X
    if (txFifo.head == txFifo.size)
     53a:	64 81       	ldd	r22, Z+4	; 0x04
     53c:	75 81       	ldd	r23, Z+5	; 0x05
     53e:	46 17       	cp	r20, r22
     540:	57 07       	cpc	r21, r23
     542:	21 f4       	brne	.+8      	; 0x54c <HAL_UartTaskHandler+0x44>
      txFifo.head = 0;
     544:	10 92 d5 0b 	sts	0x0BD5, r1	; 0x800bd5 <txFifo+0x1>
     548:	10 92 d4 0b 	sts	0x0BD4, r1	; 0x800bd4 <txFifo>
    txFifo.bytes--;
     54c:	01 97       	sbiw	r24, 0x01	; 1
     54e:	90 93 db 0b 	sts	0x0BDB, r25	; 0x800bdb <txFifo+0x7>
     552:	80 93 da 0b 	sts	0x0BDA, r24	; 0x800bda <txFifo+0x6>

    ATOMIC_SECTION_ENTER
     556:	9f b7       	in	r25, 0x3f	; 63
     558:	f8 94       	cli
      UDRx = byte;
     55a:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
      UCSRxB |= (1 << UDRIE1);
     55e:	e9 ec       	ldi	r30, 0xC9	; 201
     560:	f0 e0       	ldi	r31, 0x00	; 0
     562:	80 81       	ld	r24, Z
     564:	80 62       	ori	r24, 0x20	; 32
     566:	80 83       	st	Z, r24
      udrEmpty = false;
     568:	10 92 a7 08 	sts	0x08A7, r1	; 0x8008a7 <udrEmpty>
    ATOMIC_SECTION_LEAVE
     56c:	9f bf       	out	0x3f, r25	; 63

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
     56e:	2f b7       	in	r18, 0x3f	; 63
     570:	f8 94       	cli
      new = newData;
     572:	90 91 a6 08 	lds	r25, 0x08A6	; 0x8008a6 <newData>
      newData = false;
     576:	10 92 a6 08 	sts	0x08A6, r1	; 0x8008a6 <newData>
      bytes = rxFifo.bytes;
     57a:	40 91 3f 0a 	lds	r20, 0x0A3F	; 0x800a3f <rxFifo+0x6>
     57e:	50 91 40 0a 	lds	r21, 0x0A40	; 0x800a40 <rxFifo+0x7>
    ATOMIC_SECTION_LEAVE
     582:	2f bf       	out	0x3f, r18	; 63

    if (new)
     584:	99 23       	and	r25, r25
     586:	11 f0       	breq	.+4      	; 0x58c <HAL_UartTaskHandler+0x84>
      HAL_UartBytesReceived(bytes);
     588:	ca 01       	movw	r24, r20
     58a:	f6 cd       	rjmp	.-1044   	; 0x178 <HAL_UartBytesReceived>
     58c:	08 95       	ret

0000058e <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
     58e:	ed e8       	ldi	r30, 0x8D	; 141
     590:	ff e1       	ldi	r31, 0x1F	; 31
     592:	14 82       	std	Z+4, r1	; 0x04
     594:	15 82       	std	Z+5, r1	; 0x05
     596:	11 82       	std	Z+1, r1	; 0x01
     598:	10 82       	st	Z, r1
     59a:	17 a2       	std	Z+39, r1	; 0x27
     59c:	16 a2       	std	Z+38, r1	; 0x26
     59e:	e3 e9       	ldi	r30, 0x93	; 147
     5a0:	ff e1       	ldi	r31, 0x1F	; 31
     5a2:	83 eb       	ldi	r24, 0xB3	; 179
     5a4:	9f e1       	ldi	r25, 0x1F	; 31
     5a6:	11 92       	st	Z+, r1
     5a8:	11 92       	st	Z+, r1
     5aa:	e8 17       	cp	r30, r24
     5ac:	f9 07       	cpc	r31, r25
     5ae:	d9 f7       	brne	.-10     	; 0x5a6 <NWK_Init+0x18>
     5b0:	42 d6       	rcall	.+3204   	; 0x1236 <nwkTxInit>
     5b2:	60 d3       	rcall	.+1728   	; 0xc74 <nwkRxInit>
     5b4:	0d d1       	rcall	.+538    	; 0x7d0 <nwkFrameInit>
     5b6:	40 d0       	rcall	.+128    	; 0x638 <nwkDataReqInit>
     5b8:	92 c1       	rjmp	.+804    	; 0x8de <nwkRouteInit>
     5ba:	08 95       	ret

000005bc <NWK_SetAddr>:
     5bc:	90 93 8e 1f 	sts	0x1F8E, r25	; 0x801f8e <nwkIb+0x1>
     5c0:	80 93 8d 1f 	sts	0x1F8D, r24	; 0x801f8d <nwkIb>
     5c4:	0c 94 1f 0b 	jmp	0x163e	; 0x163e <PHY_SetShortAddr>
     5c8:	08 95       	ret

000005ca <NWK_SetPanId>:
     5ca:	90 93 90 1f 	sts	0x1F90, r25	; 0x801f90 <nwkIb+0x3>
     5ce:	80 93 8f 1f 	sts	0x1F8F, r24	; 0x801f8f <nwkIb+0x2>
     5d2:	0c 94 0d 0b 	jmp	0x161a	; 0x161a <PHY_SetPanId>
     5d6:	08 95       	ret

000005d8 <NWK_OpenEndpoint>:
     5d8:	e8 2f       	mov	r30, r24
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	ee 0f       	add	r30, r30
     5de:	ff 1f       	adc	r31, r31
     5e0:	ed 56       	subi	r30, 0x6D	; 109
     5e2:	f0 4e       	sbci	r31, 0xE0	; 224
     5e4:	71 83       	std	Z+1, r23	; 0x01
     5e6:	60 83       	st	Z, r22
     5e8:	08 95       	ret

000005ea <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
     5ea:	8b d3       	rcall	.+1814   	; 0xd02 <nwkRxTaskHandler>
  nwkTxTaskHandler();
     5ec:	20 d7       	rcall	.+3648   	; 0x142e <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
     5ee:	4d c0       	rjmp	.+154    	; 0x68a <nwkDataReqTaskHandler>
     5f0:	08 95       	ret

000005f2 <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     5f2:	e0 91 de 0b 	lds	r30, 0x0BDE	; 0x800bde <nwkDataReqQueue>
     5f6:	f0 91 df 0b 	lds	r31, 0x0BDF	; 0x800bdf <nwkDataReqQueue+0x1>
     5fa:	30 97       	sbiw	r30, 0x00	; 0
     5fc:	d9 f0       	breq	.+54     	; 0x634 <nwkDataReqTxConf+0x42>
  {
    if (req->frame == frame)
     5fe:	22 81       	ldd	r18, Z+2	; 0x02
     600:	33 81       	ldd	r19, Z+3	; 0x03
     602:	82 17       	cp	r24, r18
     604:	93 07       	cpc	r25, r19
     606:	89 f4       	brne	.+34     	; 0x62a <nwkDataReqTxConf+0x38>
     608:	05 c0       	rjmp	.+10     	; 0x614 <nwkDataReqTxConf+0x22>
     60a:	22 81       	ldd	r18, Z+2	; 0x02
     60c:	33 81       	ldd	r19, Z+3	; 0x03
     60e:	28 17       	cp	r18, r24
     610:	39 07       	cpc	r19, r25
     612:	59 f4       	brne	.+22     	; 0x62a <nwkDataReqTxConf+0x38>
    {
      req->status = frame->tx.status;
     614:	dc 01       	movw	r26, r24
     616:	ad 57       	subi	r26, 0x7D	; 125
     618:	bf 4f       	sbci	r27, 0xFF	; 255
     61a:	2c 91       	ld	r18, X
     61c:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
     61e:	13 96       	adiw	r26, 0x03	; 3
     620:	2c 91       	ld	r18, X
     622:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
     624:	22 e0       	ldi	r18, 0x02	; 2
     626:	24 83       	std	Z+4, r18	; 0x04
      break;
     628:	05 c0       	rjmp	.+10     	; 0x634 <nwkDataReqTxConf+0x42>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     62a:	01 90       	ld	r0, Z+
     62c:	f0 81       	ld	r31, Z
     62e:	e0 2d       	mov	r30, r0
     630:	30 97       	sbiw	r30, 0x00	; 0
     632:	59 f7       	brne	.-42     	; 0x60a <nwkDataReqTxConf+0x18>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
     634:	11 c1       	rjmp	.+546    	; 0x858 <nwkFrameFree>
     636:	08 95       	ret

00000638 <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
     638:	10 92 df 0b 	sts	0x0BDF, r1	; 0x800bdf <nwkDataReqQueue+0x1>
     63c:	10 92 de 0b 	sts	0x0BDE, r1	; 0x800bde <nwkDataReqQueue>
     640:	08 95       	ret

00000642 <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     642:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
     644:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
     646:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
     648:	13 82       	std	Z+3, r1	; 0x03
     64a:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
     64c:	ad e8       	ldi	r26, 0x8D	; 141
     64e:	bf e1       	ldi	r27, 0x1F	; 31
     650:	96 96       	adiw	r26, 0x26	; 38
     652:	8d 91       	ld	r24, X+
     654:	9c 91       	ld	r25, X
     656:	97 97       	sbiw	r26, 0x27	; 39
     658:	01 96       	adiw	r24, 0x01	; 1
     65a:	97 96       	adiw	r26, 0x27	; 39
     65c:	9c 93       	st	X, r25
     65e:	8e 93       	st	-X, r24
     660:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
     662:	80 91 de 0b 	lds	r24, 0x0BDE	; 0x800bde <nwkDataReqQueue>
     666:	90 91 df 0b 	lds	r25, 0x0BDF	; 0x800bdf <nwkDataReqQueue+0x1>
     66a:	00 97       	sbiw	r24, 0x00	; 0
     66c:	39 f4       	brne	.+14     	; 0x67c <NWK_DataReq+0x3a>
  {
    req->next = NULL;
     66e:	11 82       	std	Z+1, r1	; 0x01
     670:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
     672:	f0 93 df 0b 	sts	0x0BDF, r31	; 0x800bdf <nwkDataReqQueue+0x1>
     676:	e0 93 de 0b 	sts	0x0BDE, r30	; 0x800bde <nwkDataReqQueue>
     67a:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
     67c:	91 83       	std	Z+1, r25	; 0x01
     67e:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
     680:	f0 93 df 0b 	sts	0x0BDF, r31	; 0x800bdf <nwkDataReqQueue+0x1>
     684:	e0 93 de 0b 	sts	0x0BDE, r30	; 0x800bde <nwkDataReqQueue>
     688:	08 95       	ret

0000068a <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     68a:	0f 93       	push	r16
     68c:	1f 93       	push	r17
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     692:	e0 91 de 0b 	lds	r30, 0x0BDE	; 0x800bde <nwkDataReqQueue>
     696:	f0 91 df 0b 	lds	r31, 0x0BDF	; 0x800bdf <nwkDataReqQueue+0x1>
     69a:	30 97       	sbiw	r30, 0x00	; 0
     69c:	09 f4       	brne	.+2      	; 0x6a0 <nwkDataReqTaskHandler+0x16>
     69e:	93 c0       	rjmp	.+294    	; 0x7c6 <nwkDataReqTaskHandler+0x13c>
     6a0:	ef 01       	movw	r28, r30
  {
    switch (req->state)
     6a2:	8c 81       	ldd	r24, Y+4	; 0x04
     6a4:	88 23       	and	r24, r24
     6a6:	21 f0       	breq	.+8      	; 0x6b0 <nwkDataReqTaskHandler+0x26>
     6a8:	82 30       	cpi	r24, 0x02	; 2
     6aa:	09 f4       	brne	.+2      	; 0x6ae <nwkDataReqTaskHandler+0x24>
     6ac:	66 c0       	rjmp	.+204    	; 0x77a <nwkDataReqTaskHandler+0xf0>
     6ae:	85 c0       	rjmp	.+266    	; 0x7ba <nwkDataReqTaskHandler+0x130>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
     6b0:	9a d0       	rcall	.+308    	; 0x7e6 <nwkFrameAlloc>
     6b2:	8c 01       	movw	r16, r24
     6b4:	00 97       	sbiw	r24, 0x00	; 0
     6b6:	21 f4       	brne	.+8      	; 0x6c0 <nwkDataReqTaskHandler+0x36>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
     6b8:	82 e0       	ldi	r24, 0x02	; 2
     6ba:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
     6bc:	8f 87       	std	Y+15, r24	; 0x0f
     6be:	83 c0       	rjmp	.+262    	; 0x7c6 <nwkDataReqTaskHandler+0x13c>
    return;
  }

  req->frame = frame;
     6c0:	9b 83       	std	Y+3, r25	; 0x03
     6c2:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
     6c8:	f8 01       	movw	r30, r16
     6ca:	e9 57       	subi	r30, 0x79	; 121
     6cc:	ff 4f       	sbci	r31, 0xFF	; 255
     6ce:	89 ef       	ldi	r24, 0xF9	; 249
     6d0:	92 e0       	ldi	r25, 0x02	; 2
     6d2:	91 83       	std	Z+1, r25	; 0x01
     6d4:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
     6d6:	31 97       	sbiw	r30, 0x01	; 1
     6d8:	89 85       	ldd	r24, Y+9	; 0x09
     6da:	82 fb       	bst	r24, 2
     6dc:	88 27       	eor	r24, r24
     6de:	80 f9       	bld	r24, 0
     6e0:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
     6e2:	99 85       	ldd	r25, Y+9	; 0x09
     6e4:	d8 01       	movw	r26, r16
     6e6:	1b 96       	adiw	r26, 0x0b	; 11
     6e8:	8c 91       	ld	r24, X
     6ea:	1b 97       	sbiw	r26, 0x0b	; 11
     6ec:	90 fb       	bst	r25, 0
     6ee:	80 f9       	bld	r24, 0
     6f0:	1b 96       	adiw	r26, 0x0b	; 11
     6f2:	8c 93       	st	X, r24
     6f4:	1b 97       	sbiw	r26, 0x0b	; 11
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
     6f6:	99 85       	ldd	r25, Y+9	; 0x09
     6f8:	93 fb       	bst	r25, 3
     6fa:	99 27       	eor	r25, r25
     6fc:	90 f9       	bld	r25, 0
     6fe:	90 fb       	bst	r25, 0
     700:	82 f9       	bld	r24, 2
     702:	1b 96       	adiw	r26, 0x0b	; 11
     704:	8c 93       	st	X, r24
     706:	1b 97       	sbiw	r26, 0x0b	; 11
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     708:	ed e8       	ldi	r30, 0x8D	; 141
     70a:	ff e1       	ldi	r31, 0x1F	; 31
     70c:	84 81       	ldd	r24, Z+4	; 0x04
     70e:	8f 5f       	subi	r24, 0xFF	; 255
     710:	84 83       	std	Z+4, r24	; 0x04
     712:	1c 96       	adiw	r26, 0x0c	; 12
     714:	8c 93       	st	X, r24
     716:	1c 97       	sbiw	r26, 0x0c	; 12
  frame->header.nwkSrcAddr = nwkIb.addr;
     718:	80 81       	ld	r24, Z
     71a:	91 81       	ldd	r25, Z+1	; 0x01
     71c:	1e 96       	adiw	r26, 0x0e	; 14
     71e:	9c 93       	st	X, r25
     720:	8e 93       	st	-X, r24
     722:	1d 97       	sbiw	r26, 0x0d	; 13
  frame->header.nwkDstAddr = req->dstAddr;
     724:	8d 81       	ldd	r24, Y+5	; 0x05
     726:	9e 81       	ldd	r25, Y+6	; 0x06
     728:	50 96       	adiw	r26, 0x10	; 16
     72a:	9c 93       	st	X, r25
     72c:	8e 93       	st	-X, r24
     72e:	1f 97       	sbiw	r26, 0x0f	; 15
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
     730:	88 85       	ldd	r24, Y+8	; 0x08
     732:	98 2f       	mov	r25, r24
     734:	9f 70       	andi	r25, 0x0F	; 15
     736:	51 96       	adiw	r26, 0x11	; 17
     738:	8c 91       	ld	r24, X
     73a:	51 97       	sbiw	r26, 0x11	; 17
     73c:	80 7f       	andi	r24, 0xF0	; 240
     73e:	89 2b       	or	r24, r25
     740:	51 96       	adiw	r26, 0x11	; 17
     742:	8c 93       	st	X, r24
     744:	51 97       	sbiw	r26, 0x11	; 17
  frame->header.nwkDstEndpoint = req->dstEndpoint;
     746:	9f 81       	ldd	r25, Y+7	; 0x07
     748:	92 95       	swap	r25
     74a:	90 7f       	andi	r25, 0xF0	; 240
     74c:	8f 70       	andi	r24, 0x0F	; 15
     74e:	89 2b       	or	r24, r25
     750:	51 96       	adiw	r26, 0x11	; 17
     752:	8c 93       	st	X, r24

  memcpy(frame->payload, req->data, req->size);
     754:	f8 01       	movw	r30, r16
     756:	ef 57       	subi	r30, 0x7F	; 127
     758:	ff 4f       	sbci	r31, 0xFF	; 255
     75a:	4c 85       	ldd	r20, Y+12	; 0x0c
     75c:	50 e0       	ldi	r21, 0x00	; 0
     75e:	6a 85       	ldd	r22, Y+10	; 0x0a
     760:	7b 85       	ldd	r23, Y+11	; 0x0b
     762:	80 81       	ld	r24, Z
     764:	91 81       	ldd	r25, Z+1	; 0x01
     766:	0e 94 56 0d 	call	0x1aac	; 0x1aac <memcpy>
  frame->size += req->size;
     76a:	f8 01       	movw	r30, r16
     76c:	91 81       	ldd	r25, Z+1	; 0x01
     76e:	8c 85       	ldd	r24, Y+12	; 0x0c
     770:	89 0f       	add	r24, r25
     772:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
     774:	c8 01       	movw	r24, r16
     776:	82 d5       	rcall	.+2820   	; 0x127c <nwkTxFrame>
     778:	26 c0       	rjmp	.+76     	; 0x7c6 <nwkDataReqTaskHandler+0x13c>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
     77a:	ec 17       	cp	r30, r28
     77c:	fd 07       	cpc	r31, r29
     77e:	41 f4       	brne	.+16     	; 0x790 <nwkDataReqTaskHandler+0x106>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
     780:	80 81       	ld	r24, Z
     782:	91 81       	ldd	r25, Z+1	; 0x01
     784:	90 93 df 0b 	sts	0x0BDF, r25	; 0x800bdf <nwkDataReqQueue+0x1>
     788:	80 93 de 0b 	sts	0x0BDE, r24	; 0x800bde <nwkDataReqQueue>
     78c:	0a c0       	rjmp	.+20     	; 0x7a2 <nwkDataReqTaskHandler+0x118>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
     78e:	fc 01       	movw	r30, r24
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
     790:	80 81       	ld	r24, Z
     792:	91 81       	ldd	r25, Z+1	; 0x01
     794:	8c 17       	cp	r24, r28
     796:	9d 07       	cpc	r25, r29
     798:	d1 f7       	brne	.-12     	; 0x78e <nwkDataReqTaskHandler+0x104>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
     79a:	88 81       	ld	r24, Y
     79c:	99 81       	ldd	r25, Y+1	; 0x01
     79e:	91 83       	std	Z+1, r25	; 0x01
     7a0:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
     7a2:	ed e8       	ldi	r30, 0x8D	; 141
     7a4:	ff e1       	ldi	r31, 0x1F	; 31
     7a6:	86 a1       	ldd	r24, Z+38	; 0x26
     7a8:	97 a1       	ldd	r25, Z+39	; 0x27
     7aa:	01 97       	sbiw	r24, 0x01	; 1
     7ac:	97 a3       	std	Z+39, r25	; 0x27
     7ae:	86 a3       	std	Z+38, r24	; 0x26
  req->confirm(req);
     7b0:	ed 85       	ldd	r30, Y+13	; 0x0d
     7b2:	fe 85       	ldd	r31, Y+14	; 0x0e
     7b4:	ce 01       	movw	r24, r28
     7b6:	19 95       	eicall
     7b8:	06 c0       	rjmp	.+12     	; 0x7c6 <nwkDataReqTaskHandler+0x13c>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     7ba:	09 90       	ld	r0, Y+
     7bc:	d8 81       	ld	r29, Y
     7be:	c0 2d       	mov	r28, r0
     7c0:	20 97       	sbiw	r28, 0x00	; 0
     7c2:	09 f0       	breq	.+2      	; 0x7c6 <nwkDataReqTaskHandler+0x13c>
     7c4:	6e cf       	rjmp	.-292    	; 0x6a2 <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	08 95       	ret

000007d0 <nwkFrameInit>:

/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
     7d0:	e0 ee       	ldi	r30, 0xE0	; 224
     7d2:	fb e0       	ldi	r31, 0x0B	; 11
     7d4:	8e ee       	ldi	r24, 0xEE	; 238
     7d6:	9b e1       	ldi	r25, 0x1B	; 27
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     7d8:	10 82       	st	Z, r1
     7da:	e7 57       	subi	r30, 0x77	; 119
     7dc:	ff 4f       	sbci	r31, 0xFF	; 255
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     7de:	e8 17       	cp	r30, r24
     7e0:	f9 07       	cpc	r31, r25
     7e2:	d1 f7       	brne	.-12     	; 0x7d8 <nwkFrameInit+0x8>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
     7e4:	08 95       	ret

000007e6 <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
     7e6:	80 91 e0 0b 	lds	r24, 0x0BE0	; 0x800be0 <nwkFrameFrames>
     7ea:	88 23       	and	r24, r24
     7ec:	59 f0       	breq	.+22     	; 0x804 <nwkFrameAlloc+0x1e>
     7ee:	e9 e6       	ldi	r30, 0x69	; 105
     7f0:	fc e0       	ldi	r31, 0x0C	; 12
     7f2:	6e ee       	ldi	r22, 0xEE	; 238
     7f4:	7b e1       	ldi	r23, 0x1B	; 27
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	ac 01       	movw	r20, r24
     7fc:	20 81       	ld	r18, Z
     7fe:	21 11       	cpse	r18, r1
     800:	22 c0       	rjmp	.+68     	; 0x846 <nwkFrameAlloc+0x60>
     802:	02 c0       	rjmp	.+4      	; 0x808 <nwkFrameAlloc+0x22>
     804:	40 e0       	ldi	r20, 0x00	; 0
     806:	50 e0       	ldi	r21, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
     808:	69 e8       	ldi	r22, 0x89	; 137
     80a:	64 9f       	mul	r22, r20
     80c:	90 01       	movw	r18, r0
     80e:	65 9f       	mul	r22, r21
     810:	30 0d       	add	r19, r0
     812:	11 24       	eor	r1, r1
     814:	c9 01       	movw	r24, r18
     816:	80 52       	subi	r24, 0x20	; 32
     818:	94 4f       	sbci	r25, 0xF4	; 244
     81a:	fc 01       	movw	r30, r24
     81c:	11 92       	st	Z+, r1
     81e:	6a 95       	dec	r22
     820:	e9 f7       	brne	.-6      	; 0x81c <nwkFrameAlloc+0x36>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
     822:	40 e1       	ldi	r20, 0x10	; 16
     824:	fc 01       	movw	r30, r24
     826:	41 83       	std	Z+1, r20	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
     828:	ef 57       	subi	r30, 0x7F	; 127
     82a:	ff 4f       	sbci	r31, 0xFF	; 255
     82c:	2e 50       	subi	r18, 0x0E	; 14
     82e:	34 4f       	sbci	r19, 0xF4	; 244
     830:	31 83       	std	Z+1, r19	; 0x01
     832:	20 83       	st	Z, r18
      nwkIb.lock++;
     834:	ed e8       	ldi	r30, 0x8D	; 141
     836:	ff e1       	ldi	r31, 0x1F	; 31
     838:	26 a1       	ldd	r18, Z+38	; 0x26
     83a:	37 a1       	ldd	r19, Z+39	; 0x27
     83c:	2f 5f       	subi	r18, 0xFF	; 255
     83e:	3f 4f       	sbci	r19, 0xFF	; 255
     840:	37 a3       	std	Z+39, r19	; 0x27
     842:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
     844:	08 95       	ret
     846:	01 96       	adiw	r24, 0x01	; 1
     848:	e7 57       	subi	r30, 0x77	; 119
     84a:	ff 4f       	sbci	r31, 0xFF	; 255
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     84c:	e6 17       	cp	r30, r22
     84e:	f7 07       	cpc	r31, r23
     850:	a1 f6       	brne	.-88     	; 0x7fa <nwkFrameAlloc+0x14>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	90 e0       	ldi	r25, 0x00	; 0
}
     856:	08 95       	ret

00000858 <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
     858:	fc 01       	movw	r30, r24
     85a:	10 82       	st	Z, r1
  nwkIb.lock--;
     85c:	ed e8       	ldi	r30, 0x8D	; 141
     85e:	ff e1       	ldi	r31, 0x1F	; 31
     860:	86 a1       	ldd	r24, Z+38	; 0x26
     862:	97 a1       	ldd	r25, Z+39	; 0x27
     864:	01 97       	sbiw	r24, 0x01	; 1
     866:	97 a3       	std	Z+39, r25	; 0x27
     868:	86 a3       	std	Z+38, r24	; 0x26
     86a:	08 95       	ret

0000086c <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
     86c:	00 97       	sbiw	r24, 0x00	; 0
     86e:	41 f0       	breq	.+16     	; 0x880 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
     870:	fc 01       	movw	r30, r24
     872:	e7 57       	subi	r30, 0x77	; 119
     874:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     876:	8b e1       	ldi	r24, 0x1B	; 27
     878:	ee 3e       	cpi	r30, 0xEE	; 238
     87a:	f8 07       	cpc	r31, r24
     87c:	18 f0       	brcs	.+6      	; 0x884 <nwkFrameNext+0x18>
     87e:	12 c0       	rjmp	.+36     	; 0x8a4 <nwkFrameNext+0x38>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
     880:	e0 ee       	ldi	r30, 0xE0	; 224
     882:	fb e0       	ldi	r31, 0x0B	; 11
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     884:	80 81       	ld	r24, Z
     886:	88 23       	and	r24, r24
     888:	21 f0       	breq	.+8      	; 0x892 <nwkFrameNext+0x26>
     88a:	0f c0       	rjmp	.+30     	; 0x8aa <nwkFrameNext+0x3e>
     88c:	80 81       	ld	r24, Z
     88e:	81 11       	cpse	r24, r1
     890:	0f c0       	rjmp	.+30     	; 0x8b0 <nwkFrameNext+0x44>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     892:	e7 57       	subi	r30, 0x77	; 119
     894:	ff 4f       	sbci	r31, 0xFF	; 255
     896:	8b e1       	ldi	r24, 0x1B	; 27
     898:	ee 3e       	cpi	r30, 0xEE	; 238
     89a:	f8 07       	cpc	r31, r24
     89c:	b8 f3       	brcs	.-18     	; 0x88c <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	08 95       	ret
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	08 95       	ret
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     8aa:	8e 2f       	mov	r24, r30
     8ac:	9f 2f       	mov	r25, r31
     8ae:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     8b0:	8e 2f       	mov	r24, r30
     8b2:	9f 2f       	mov	r25, r31
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
}
     8b4:	08 95       	ret

000008b6 <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
     8b6:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
     8b8:	dc 01       	movw	r26, r24
     8ba:	ad 57       	subi	r26, 0x7D	; 125
     8bc:	bf 4f       	sbci	r27, 0xFF	; 255
     8be:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     8c0:	ad e8       	ldi	r26, 0x8D	; 141
     8c2:	bf e1       	ldi	r27, 0x1F	; 31
     8c4:	14 96       	adiw	r26, 0x04	; 4
     8c6:	9c 91       	ld	r25, X
     8c8:	14 97       	sbiw	r26, 0x04	; 4
     8ca:	9f 5f       	subi	r25, 0xFF	; 255
     8cc:	14 96       	adiw	r26, 0x04	; 4
     8ce:	9c 93       	st	X, r25
     8d0:	14 97       	sbiw	r26, 0x04	; 4
     8d2:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
     8d4:	8d 91       	ld	r24, X+
     8d6:	9c 91       	ld	r25, X
     8d8:	96 87       	std	Z+14, r25	; 0x0e
     8da:	85 87       	std	Z+13, r24	; 0x0d
     8dc:	08 95       	ret

000008de <nwkRouteInit>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
     8de:	af ee       	ldi	r26, 0xEF	; 239
     8e0:	bb e1       	ldi	r27, 0x1B	; 27
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	4f ef       	ldi	r20, 0xFF	; 255
     8e8:	5f ef       	ldi	r21, 0xFF	; 255
     8ea:	11 96       	adiw	r26, 0x01	; 1
     8ec:	5c 93       	st	X, r21
     8ee:	4e 93       	st	-X, r20
     8f0:	fc 01       	movw	r30, r24
     8f2:	ee 0f       	add	r30, r30
     8f4:	ff 1f       	adc	r31, r31
     8f6:	ee 0f       	add	r30, r30
     8f8:	ff 1f       	adc	r31, r31
     8fa:	ee 0f       	add	r30, r30
     8fc:	ff 1f       	adc	r31, r31
     8fe:	e8 1b       	sub	r30, r24
     900:	f9 0b       	sbc	r31, r25
     902:	e2 51       	subi	r30, 0x12	; 18
     904:	f4 4e       	sbci	r31, 0xE4	; 228
     906:	20 81       	ld	r18, Z
     908:	2e 7f       	andi	r18, 0xFE	; 254
     90a:	20 83       	st	Z, r18
     90c:	14 96       	adiw	r26, 0x04	; 4
     90e:	1c 92       	st	X, r1
     910:	14 97       	sbiw	r26, 0x04	; 4
     912:	01 96       	adiw	r24, 0x01	; 1
     914:	17 96       	adiw	r26, 0x07	; 7
     916:	84 36       	cpi	r24, 0x64	; 100
     918:	91 05       	cpc	r25, r1
     91a:	39 f7       	brne	.-50     	; 0x8ea <nwkRouteInit+0xc>
     91c:	08 95       	ret

0000091e <NWK_RouteFindEntry>:
     91e:	0f 93       	push	r16
     920:	1f 93       	push	r17
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
     926:	ef ee       	ldi	r30, 0xEF	; 239
     928:	fb e1       	ldi	r31, 0x1B	; 27
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	06 2f       	mov	r16, r22
     930:	10 e0       	ldi	r17, 0x00	; 0
     932:	40 81       	ld	r20, Z
     934:	51 81       	ldd	r21, Z+1	; 0x01
     936:	48 17       	cp	r20, r24
     938:	59 07       	cpc	r21, r25
     93a:	b1 f4       	brne	.+44     	; 0x968 <NWK_RouteFindEntry+0x4a>
     93c:	d9 01       	movw	r26, r18
     93e:	aa 0f       	add	r26, r26
     940:	bb 1f       	adc	r27, r27
     942:	aa 0f       	add	r26, r26
     944:	bb 1f       	adc	r27, r27
     946:	aa 0f       	add	r26, r26
     948:	bb 1f       	adc	r27, r27
     94a:	a2 1b       	sub	r26, r18
     94c:	b3 0b       	sbc	r27, r19
     94e:	a2 51       	subi	r26, 0x12	; 18
     950:	b4 4e       	sbci	r27, 0xE4	; 228
     952:	4c 91       	ld	r20, X
     954:	46 95       	lsr	r20
     956:	41 70       	andi	r20, 0x01	; 1
     958:	c4 2f       	mov	r28, r20
     95a:	40 e0       	ldi	r20, 0x00	; 0
     95c:	d4 2f       	mov	r29, r20
     95e:	c0 17       	cp	r28, r16
     960:	d1 07       	cpc	r29, r17
     962:	11 f4       	brne	.+4      	; 0x968 <NWK_RouteFindEntry+0x4a>
     964:	cd 01       	movw	r24, r26
     966:	08 c0       	rjmp	.+16     	; 0x978 <NWK_RouteFindEntry+0x5a>
     968:	2f 5f       	subi	r18, 0xFF	; 255
     96a:	3f 4f       	sbci	r19, 0xFF	; 255
     96c:	37 96       	adiw	r30, 0x07	; 7
     96e:	24 36       	cpi	r18, 0x64	; 100
     970:	31 05       	cpc	r19, r1
     972:	f9 f6       	brne	.-66     	; 0x932 <NWK_RouteFindEntry+0x14>
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	1f 91       	pop	r17
     97e:	0f 91       	pop	r16
     980:	08 95       	ret

00000982 <NWK_RouteNewEntry>:
     982:	a0 e0       	ldi	r26, 0x00	; 0
     984:	b0 e0       	ldi	r27, 0x00	; 0
     986:	ee ee       	ldi	r30, 0xEE	; 238
     988:	fb e1       	ldi	r31, 0x1B	; 27
     98a:	80 81       	ld	r24, Z
     98c:	80 fd       	sbrc	r24, 0
     98e:	0d c0       	rjmp	.+26     	; 0x9aa <NWK_RouteNewEntry+0x28>
     990:	85 81       	ldd	r24, Z+5	; 0x05
     992:	88 23       	and	r24, r24
     994:	81 f0       	breq	.+32     	; 0x9b6 <NWK_RouteNewEntry+0x34>
     996:	10 97       	sbiw	r26, 0x00	; 0
     998:	39 f0       	breq	.+14     	; 0x9a8 <NWK_RouteNewEntry+0x26>
     99a:	15 96       	adiw	r26, 0x05	; 5
     99c:	9c 91       	ld	r25, X
     99e:	15 97       	sbiw	r26, 0x05	; 5
     9a0:	89 17       	cp	r24, r25
     9a2:	18 f4       	brcc	.+6      	; 0x9aa <NWK_RouteNewEntry+0x28>
     9a4:	df 01       	movw	r26, r30
     9a6:	01 c0       	rjmp	.+2      	; 0x9aa <NWK_RouteNewEntry+0x28>
     9a8:	df 01       	movw	r26, r30
     9aa:	37 96       	adiw	r30, 0x07	; 7
     9ac:	8e e1       	ldi	r24, 0x1E	; 30
     9ae:	ea 3a       	cpi	r30, 0xAA	; 170
     9b0:	f8 07       	cpc	r31, r24
     9b2:	59 f7       	brne	.-42     	; 0x98a <NWK_RouteNewEntry+0x8>
     9b4:	fd 01       	movw	r30, r26
     9b6:	80 81       	ld	r24, Z
     9b8:	8d 70       	andi	r24, 0x0D	; 13
     9ba:	80 63       	ori	r24, 0x30	; 48
     9bc:	80 83       	st	Z, r24
     9be:	80 e8       	ldi	r24, 0x80	; 128
     9c0:	85 83       	std	Z+5, r24	; 0x05
     9c2:	cf 01       	movw	r24, r30
     9c4:	08 95       	ret

000009c6 <NWK_RouteFreeEntry>:
     9c6:	fc 01       	movw	r30, r24
     9c8:	80 81       	ld	r24, Z
     9ca:	80 fd       	sbrc	r24, 0
     9cc:	05 c0       	rjmp	.+10     	; 0x9d8 <NWK_RouteFreeEntry+0x12>
     9ce:	8f ef       	ldi	r24, 0xFF	; 255
     9d0:	9f ef       	ldi	r25, 0xFF	; 255
     9d2:	92 83       	std	Z+2, r25	; 0x02
     9d4:	81 83       	std	Z+1, r24	; 0x01
     9d6:	15 82       	std	Z+5, r1	; 0x05
     9d8:	08 95       	ret

000009da <NWK_RouteNextHop>:
     9da:	a1 df       	rcall	.-190    	; 0x91e <NWK_RouteFindEntry>
     9dc:	00 97       	sbiw	r24, 0x00	; 0
     9de:	21 f0       	breq	.+8      	; 0x9e8 <NWK_RouteNextHop+0xe>
     9e0:	fc 01       	movw	r30, r24
     9e2:	83 81       	ldd	r24, Z+3	; 0x03
     9e4:	94 81       	ldd	r25, Z+4	; 0x04
     9e6:	08 95       	ret
     9e8:	8f ef       	ldi	r24, 0xFF	; 255
     9ea:	9f ef       	ldi	r25, 0xFF	; 255
     9ec:	08 95       	ret

000009ee <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
     9ee:	97 df       	rcall	.-210    	; 0x91e <NWK_RouteFindEntry>
  if (entry)
     9f0:	00 97       	sbiw	r24, 0x00	; 0
    NWK_RouteFreeEntry(entry);
     9f2:	09 f0       	breq	.+2      	; 0x9f6 <nwkRouteRemove+0x8>
     9f4:	e8 cf       	rjmp	.-48     	; 0x9c6 <NWK_RouteFreeEntry>
     9f6:	08 95       	ret

000009f8 <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
     9f8:	0f 93       	push	r16
     9fa:	1f 93       	push	r17
     9fc:	cf 93       	push	r28
     9fe:	df 93       	push	r29
     a00:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
     a02:	01 85       	ldd	r16, Z+9	; 0x09
     a04:	12 85       	ldd	r17, Z+10	; 0x0a
     a06:	11 23       	and	r17, r17
     a08:	2c f4       	brge	.+10     	; 0xa14 <nwkRouteFrameReceived+0x1c>
     a0a:	85 85       	ldd	r24, Z+13	; 0x0d
     a0c:	96 85       	ldd	r25, Z+14	; 0x0e
     a0e:	08 17       	cp	r16, r24
     a10:	19 07       	cpc	r17, r25
     a12:	e1 f5       	brne	.+120    	; 0xa8c <nwkRouteFrameReceived+0x94>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     a14:	85 81       	ldd	r24, Z+5	; 0x05
     a16:	96 81       	ldd	r25, Z+6	; 0x06
     a18:	01 96       	adiw	r24, 0x01	; 1
     a1a:	c1 f1       	breq	.+112    	; 0xa8c <nwkRouteFrameReceived+0x94>
     a1c:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
     a1e:	60 e0       	ldi	r22, 0x00	; 0
     a20:	85 85       	ldd	r24, Z+13	; 0x0d
     a22:	96 85       	ldd	r25, Z+14	; 0x0e
     a24:	7c df       	rcall	.-264    	; 0x91e <NWK_RouteFindEntry>
     a26:	fc 01       	movw	r30, r24

  if (entry)
     a28:	89 2b       	or	r24, r25
     a2a:	a1 f0       	breq	.+40     	; 0xa54 <nwkRouteFrameReceived+0x5c>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
     a2c:	8f 81       	ldd	r24, Y+7	; 0x07
     a2e:	98 85       	ldd	r25, Y+8	; 0x08
     a30:	01 96       	adiw	r24, 0x01	; 1
     a32:	f9 f4       	brne	.+62     	; 0xa72 <nwkRouteFrameReceived+0x7a>
     a34:	20 91 8d 1f 	lds	r18, 0x1F8D	; 0x801f8d <nwkIb>
     a38:	30 91 8e 1f 	lds	r19, 0x1F8E	; 0x801f8e <nwkIb+0x1>
     a3c:	8f 85       	ldd	r24, Y+15	; 0x0f
     a3e:	98 89       	ldd	r25, Y+16	; 0x10
     a40:	28 17       	cp	r18, r24
     a42:	39 07       	cpc	r19, r25
     a44:	b1 f4       	brne	.+44     	; 0xa72 <nwkRouteFrameReceived+0x7a>
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    {
      entry->nextHopAddr = header->macSrcAddr;
     a46:	14 83       	std	Z+4, r17	; 0x04
     a48:	03 83       	std	Z+3, r16	; 0x03
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
     a4a:	80 81       	ld	r24, Z
     a4c:	8f 70       	andi	r24, 0x0F	; 15
     a4e:	80 63       	ori	r24, 0x30	; 48
     a50:	80 83       	st	Z, r24
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
     a52:	0a c0       	rjmp	.+20     	; 0xa68 <nwkRouteFrameReceived+0x70>
     a54:	96 df       	rcall	.-212    	; 0x982 <NWK_RouteNewEntry>
     a56:	fc 01       	movw	r30, r24

    entry->dstAddr = header->nwkSrcAddr;
     a58:	8d 85       	ldd	r24, Y+13	; 0x0d
     a5a:	9e 85       	ldd	r25, Y+14	; 0x0e
     a5c:	92 83       	std	Z+2, r25	; 0x02
     a5e:	81 83       	std	Z+1, r24	; 0x01
    entry->nextHopAddr = header->macSrcAddr;
     a60:	89 85       	ldd	r24, Y+9	; 0x09
     a62:	9a 85       	ldd	r25, Y+10	; 0x0a
     a64:	94 83       	std	Z+4, r25	; 0x04
     a66:	83 83       	std	Z+3, r24	; 0x03
  }

  entry->lqi = frame->rx.lqi;
     a68:	cd 57       	subi	r28, 0x7D	; 125
     a6a:	df 4f       	sbci	r29, 0xFF	; 255
     a6c:	88 81       	ld	r24, Y
     a6e:	86 83       	std	Z+6, r24	; 0x06
     a70:	0d c0       	rjmp	.+26     	; 0xa8c <nwkRouteFrameReceived+0x94>
  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
     a72:	83 81       	ldd	r24, Z+3	; 0x03
     a74:	94 81       	ldd	r25, Z+4	; 0x04
     a76:	08 17       	cp	r16, r24
     a78:	19 07       	cpc	r17, r25
     a7a:	b1 f3       	breq	.-20     	; 0xa68 <nwkRouteFrameReceived+0x70>
     a7c:	96 81       	ldd	r25, Z+6	; 0x06
     a7e:	de 01       	movw	r26, r28
     a80:	ad 57       	subi	r26, 0x7D	; 125
     a82:	bf 4f       	sbci	r27, 0xFF	; 255
     a84:	8c 91       	ld	r24, X
     a86:	98 17       	cp	r25, r24
     a88:	f0 f2       	brcs	.-68     	; 0xa46 <nwkRouteFrameReceived+0x4e>
     a8a:	ee cf       	rjmp	.-36     	; 0xa68 <nwkRouteFrameReceived+0x70>

  entry->lqi = frame->rx.lqi;
#else
  (void)frame;
#endif
}
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	1f 91       	pop	r17
     a92:	0f 91       	pop	r16
     a94:	08 95       	ret

00000a96 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
     a9a:	fc 01       	movw	r30, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
     a9c:	87 85       	ldd	r24, Z+15	; 0x0f
     a9e:	90 89       	ldd	r25, Z+16	; 0x10
     aa0:	8f 3f       	cpi	r24, 0xFF	; 255
     aa2:	2f ef       	ldi	r18, 0xFF	; 255
     aa4:	92 07       	cpc	r25, r18
     aa6:	d9 f1       	breq	.+118    	; 0xb1e <nwkRouteFrameSent+0x88>
     aa8:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
     aaa:	63 85       	ldd	r22, Z+11	; 0x0b
     aac:	63 fb       	bst	r22, 3
     aae:	66 27       	eor	r22, r22
     ab0:	60 f9       	bld	r22, 0
     ab2:	35 df       	rcall	.-406    	; 0x91e <NWK_RouteFindEntry>
     ab4:	dc 01       	movw	r26, r24

  if (NULL == entry || entry->fixed)
     ab6:	89 2b       	or	r24, r25
     ab8:	91 f1       	breq	.+100    	; 0xb1e <nwkRouteFrameSent+0x88>
     aba:	8c 91       	ld	r24, X
     abc:	80 fd       	sbrc	r24, 0
     abe:	2f c0       	rjmp	.+94     	; 0xb1e <nwkRouteFrameSent+0x88>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
     ac0:	fe 01       	movw	r30, r28
     ac2:	ed 57       	subi	r30, 0x7D	; 125
     ac4:	ff 4f       	sbci	r31, 0xFF	; 255
     ac6:	80 81       	ld	r24, Z
     ac8:	81 11       	cpse	r24, r1
     aca:	19 c0       	rjmp	.+50     	; 0xafe <nwkRouteFrameSent+0x68>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
     acc:	8c 91       	ld	r24, X
     ace:	8f 70       	andi	r24, 0x0F	; 15
     ad0:	80 63       	ori	r24, 0x30	; 48
     ad2:	8c 93       	st	X, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
     ad4:	15 96       	adiw	r26, 0x05	; 5
     ad6:	8c 91       	ld	r24, X
     ad8:	15 97       	sbiw	r26, 0x05	; 5
     ada:	8f 5f       	subi	r24, 0xFF	; 255
     adc:	15 96       	adiw	r26, 0x05	; 5
     ade:	8c 93       	st	X, r24
     ae0:	8f 3f       	cpi	r24, 0xFF	; 255
     ae2:	e9 f4       	brne	.+58     	; 0xb1e <nwkRouteFrameSent+0x88>
     ae4:	e3 ef       	ldi	r30, 0xF3	; 243
     ae6:	fb e1       	ldi	r31, 0x1B	; 27
     ae8:	2f ea       	ldi	r18, 0xAF	; 175
     aea:	3e e1       	ldi	r19, 0x1E	; 30
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
     aec:	80 81       	ld	r24, Z
     aee:	86 95       	lsr	r24
     af0:	8f 5f       	subi	r24, 0xFF	; 255
     af2:	80 83       	st	Z, r24
     af4:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
     af6:	e2 17       	cp	r30, r18
     af8:	f3 07       	cpc	r31, r19
     afa:	c1 f7       	brne	.-16     	; 0xaec <nwkRouteFrameSent+0x56>
     afc:	10 c0       	rjmp	.+32     	; 0xb1e <nwkRouteFrameSent+0x88>
    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
      nwkRouteNormalizeRanks();
  }
  else
  {
    if (0 == --entry->score)
     afe:	9c 91       	ld	r25, X
     b00:	89 2f       	mov	r24, r25
     b02:	82 95       	swap	r24
     b04:	8f 70       	andi	r24, 0x0F	; 15
     b06:	81 5f       	subi	r24, 0xF1	; 241
     b08:	8f 70       	andi	r24, 0x0F	; 15
     b0a:	28 2f       	mov	r18, r24
     b0c:	22 95       	swap	r18
     b0e:	20 7f       	andi	r18, 0xF0	; 240
     b10:	9f 70       	andi	r25, 0x0F	; 15
     b12:	92 2b       	or	r25, r18
     b14:	9c 93       	st	X, r25
     b16:	81 11       	cpse	r24, r1
     b18:	02 c0       	rjmp	.+4      	; 0xb1e <nwkRouteFrameSent+0x88>
      NWK_RouteFreeEntry(entry);
     b1a:	cd 01       	movw	r24, r26
     b1c:	54 df       	rcall	.-344    	; 0x9c6 <NWK_RouteFreeEntry>
  }
}
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	08 95       	ret

00000b24 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
     b24:	cf 93       	push	r28
     b26:	df 93       	push	r29
     b28:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
     b2a:	87 85       	ldd	r24, Z+15	; 0x0f
     b2c:	90 89       	ldd	r25, Z+16	; 0x10
     b2e:	8f 3f       	cpi	r24, 0xFF	; 255
     b30:	2f ef       	ldi	r18, 0xFF	; 255
     b32:	92 07       	cpc	r25, r18
     b34:	29 f4       	brne	.+10     	; 0xb40 <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
     b36:	8f ef       	ldi	r24, 0xFF	; 255
     b38:	9f ef       	ldi	r25, 0xFF	; 255
     b3a:	90 87       	std	Z+8, r25	; 0x08
     b3c:	87 83       	std	Z+7, r24	; 0x07
     b3e:	0e c0       	rjmp	.+28     	; 0xb5c <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
     b40:	23 85       	ldd	r18, Z+11	; 0x0b
     b42:	22 ff       	sbrs	r18, 2
     b44:	03 c0       	rjmp	.+6      	; 0xb4c <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
     b46:	90 87       	std	Z+8, r25	; 0x08
     b48:	87 83       	std	Z+7, r24	; 0x07
     b4a:	08 c0       	rjmp	.+16     	; 0xb5c <nwkRoutePrepareTx+0x38>
     b4c:	ef 01       	movw	r28, r30
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
     b4e:	63 85       	ldd	r22, Z+11	; 0x0b
     b50:	63 fb       	bst	r22, 3
     b52:	66 27       	eor	r22, r22
     b54:	60 f9       	bld	r22, 0
     b56:	41 df       	rcall	.-382    	; 0x9da <NWK_RouteNextHop>
     b58:	98 87       	std	Y+8, r25	; 0x08
     b5a:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	08 95       	ret

00000b62 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
     b62:	af 92       	push	r10
     b64:	bf 92       	push	r11
     b66:	cf 92       	push	r12
     b68:	df 92       	push	r13
     b6a:	ef 92       	push	r14
     b6c:	ff 92       	push	r15
     b6e:	1f 93       	push	r17
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
     b76:	1b 85       	ldd	r17, Y+11	; 0x0b
     b78:	13 fb       	bst	r17, 3
     b7a:	11 27       	eor	r17, r17
     b7c:	10 f9       	bld	r17, 0
     b7e:	cf 84       	ldd	r12, Y+15	; 0x0f
     b80:	d8 88       	ldd	r13, Y+16	; 0x10
     b82:	61 2f       	mov	r22, r17
     b84:	c6 01       	movw	r24, r12
     b86:	29 df       	rcall	.-430    	; 0x9da <NWK_RouteNextHop>
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	59 f0       	breq	.+22     	; 0xba2 <nwkRouteFrame+0x40>
  {
    frame->tx.confirm = NULL;
     b8c:	fe 01       	movw	r30, r28
     b8e:	e9 57       	subi	r30, 0x79	; 121
     b90:	ff 4f       	sbci	r31, 0xFF	; 255
     b92:	11 82       	std	Z+1, r1	; 0x01
     b94:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
     b96:	31 97       	sbiw	r30, 0x01	; 1
     b98:	82 e0       	ldi	r24, 0x02	; 2
     b9a:	80 83       	st	Z, r24
    nwkTxFrame(frame);
     b9c:	ce 01       	movw	r24, r28
     b9e:	6e d3       	rcall	.+1756   	; 0x127c <nwkTxFrame>
     ba0:	22 c0       	rjmp	.+68     	; 0xbe6 <nwkRouteFrame+0x84>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
     ba2:	ad 84       	ldd	r10, Y+13	; 0x0d
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst, uint8_t multicast)
{
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
     ba4:	be 84       	ldd	r11, Y+14	; 0x0e
     ba6:	1f de       	rcall	.-962    	; 0x7e6 <nwkFrameAlloc>
     ba8:	7c 01       	movw	r14, r24
     baa:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(frame);
     bac:	d1 f0       	breq	.+52     	; 0xbe2 <nwkRouteFrame+0x80>
     bae:	83 de       	rcall	.-762    	; 0x8b6 <nwkFrameCommandInit>

  frame->size += sizeof(NwkCommandRouteError_t);
     bb0:	f7 01       	movw	r30, r14
     bb2:	81 81       	ldd	r24, Z+1	; 0x01
     bb4:	8a 5f       	subi	r24, 0xFA	; 250
     bb6:	81 83       	std	Z+1, r24	; 0x01
  frame->tx.confirm = NULL;
     bb8:	e9 57       	subi	r30, 0x79	; 121
     bba:	ff 4f       	sbci	r31, 0xFF	; 255
     bbc:	11 82       	std	Z+1, r1	; 0x01
     bbe:	10 82       	st	Z, r1

  frame->header.nwkDstAddr = src;
     bc0:	f7 01       	movw	r30, r14
     bc2:	b0 8a       	std	Z+16, r11	; 0x10
     bc4:	a7 86       	std	Z+15, r10	; 0x0f

  command = (NwkCommandRouteError_t *)frame->payload;
     bc6:	ef 57       	subi	r30, 0x7F	; 127
     bc8:	ff 4f       	sbci	r31, 0xFF	; 255
     bca:	01 90       	ld	r0, Z+
     bcc:	f0 81       	ld	r31, Z
     bce:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ROUTE_ERROR;
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	80 83       	st	Z, r24
  command->srcAddr = src;
     bd4:	b2 82       	std	Z+2, r11	; 0x02
     bd6:	a1 82       	std	Z+1, r10	; 0x01
  command->dstAddr = dst;
     bd8:	d4 82       	std	Z+4, r13	; 0x04
  command->multicast = multicast;

  nwkTxFrame(frame);
     bda:	c3 82       	std	Z+3, r12	; 0x03
     bdc:	15 83       	std	Z+5, r17	; 0x05
     bde:	c7 01       	movw	r24, r14
    nwkTxFrame(frame);
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    nwkFrameFree(frame);
     be0:	4d d3       	rcall	.+1690   	; 0x127c <nwkTxFrame>
     be2:	ce 01       	movw	r24, r28
     be4:	39 de       	rcall	.-910    	; 0x858 <nwkFrameFree>
  }
}
     be6:	df 91       	pop	r29
     be8:	cf 91       	pop	r28
     bea:	1f 91       	pop	r17
     bec:	ff 90       	pop	r15
     bee:	ef 90       	pop	r14
     bf0:	df 90       	pop	r13
     bf2:	cf 90       	pop	r12
     bf4:	bf 90       	pop	r11
     bf6:	af 90       	pop	r10
     bf8:	08 95       	ret

00000bfa <nwkRouteErrorReceived>:
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
     bfa:	fc 01       	movw	r30, r24
     bfc:	21 85       	ldd	r18, Z+9	; 0x09
     bfe:	26 30       	cpi	r18, 0x06	; 6
     c00:	49 f4       	brne	.+18     	; 0xc14 <nwkRouteErrorReceived+0x1a>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
     c02:	07 80       	ldd	r0, Z+7	; 0x07
     c04:	f0 85       	ldd	r31, Z+8	; 0x08
     c06:	e0 2d       	mov	r30, r0

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
     c08:	65 81       	ldd	r22, Z+5	; 0x05
     c0a:	83 81       	ldd	r24, Z+3	; 0x03
     c0c:	94 81       	ldd	r25, Z+4	; 0x04
     c0e:	ef de       	rcall	.-546    	; 0x9ee <nwkRouteRemove>

  return true;
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
     c14:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
     c16:	08 95       	ret

00000c18 <nwkRxServiceDataInd>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
     c18:	dc 01       	movw	r26, r24
     c1a:	19 96       	adiw	r26, 0x09	; 9
     c1c:	2c 91       	ld	r18, X
     c1e:	19 97       	sbiw	r26, 0x09	; 9
     c20:	22 23       	and	r18, r18
     c22:	71 f0       	breq	.+28     	; 0xc40 <nwkRxServiceDataInd+0x28>
     c24:	17 96       	adiw	r26, 0x07	; 7
     c26:	ed 91       	ld	r30, X+
     c28:	fc 91       	ld	r31, X
     c2a:	18 97       	sbiw	r26, 0x08	; 8
     c2c:	20 81       	ld	r18, Z
     c2e:	22 23       	and	r18, r18
     c30:	19 f0       	breq	.+6      	; 0xc38 <nwkRxServiceDataInd+0x20>
     c32:	21 30       	cpi	r18, 0x01	; 1
     c34:	19 f0       	breq	.+6      	; 0xc3c <nwkRxServiceDataInd+0x24>
     c36:	06 c0       	rjmp	.+12     	; 0xc44 <nwkRxServiceDataInd+0x2c>
     c38:	b2 c3       	rjmp	.+1892   	; 0x139e <nwkTxAckReceived>
     c3a:	08 95       	ret
     c3c:	de cf       	rjmp	.-68     	; 0xbfa <nwkRouteErrorReceived>
     c3e:	08 95       	ret
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	08 95       	ret
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	08 95       	ret

00000c48 <nwkRxDuplicateRejectionTimerHandler>:
     c48:	bc 01       	movw	r22, r24
     c4a:	ec eb       	ldi	r30, 0xBC	; 188
     c4c:	fe e1       	ldi	r31, 0x1E	; 30
     c4e:	2e ee       	ldi	r18, 0xEE	; 238
     c50:	3e e1       	ldi	r19, 0x1E	; 30
     c52:	40 e0       	ldi	r20, 0x00	; 0
     c54:	51 e0       	ldi	r21, 0x01	; 1
     c56:	90 81       	ld	r25, Z
     c58:	99 23       	and	r25, r25
     c5a:	19 f0       	breq	.+6      	; 0xc62 <nwkRxDuplicateRejectionTimerHandler+0x1a>
     c5c:	91 50       	subi	r25, 0x01	; 1
     c5e:	90 83       	st	Z, r25
     c60:	45 2f       	mov	r20, r21
     c62:	35 96       	adiw	r30, 0x05	; 5
     c64:	e2 17       	cp	r30, r18
     c66:	f3 07       	cpc	r31, r19
     c68:	b1 f7       	brne	.-20     	; 0xc56 <nwkRxDuplicateRejectionTimerHandler+0xe>
     c6a:	44 23       	and	r20, r20
     c6c:	11 f0       	breq	.+4      	; 0xc72 <nwkRxDuplicateRejectionTimerHandler+0x2a>
     c6e:	cb 01       	movw	r24, r22
     c70:	30 c6       	rjmp	.+3168   	; 0x18d2 <SYS_TimerStart>
     c72:	08 95       	ret

00000c74 <nwkRxInit>:
     c74:	ec eb       	ldi	r30, 0xBC	; 188
     c76:	fe e1       	ldi	r31, 0x1E	; 30
     c78:	8e ee       	ldi	r24, 0xEE	; 238
     c7a:	9e e1       	ldi	r25, 0x1E	; 30
     c7c:	10 82       	st	Z, r1
     c7e:	35 96       	adiw	r30, 0x05	; 5
     c80:	e8 17       	cp	r30, r24
     c82:	f9 07       	cpc	r31, r25
     c84:	d9 f7       	brne	.-10     	; 0xc7c <nwkRxInit+0x8>
     c86:	ea ea       	ldi	r30, 0xAA	; 170
     c88:	fe e1       	ldi	r31, 0x1E	; 30
     c8a:	84 e6       	ldi	r24, 0x64	; 100
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	a0 e0       	ldi	r26, 0x00	; 0
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	86 83       	std	Z+6, r24	; 0x06
     c94:	97 83       	std	Z+7, r25	; 0x07
     c96:	a0 87       	std	Z+8, r26	; 0x08
     c98:	b1 87       	std	Z+9, r27	; 0x09
     c9a:	12 86       	std	Z+10, r1	; 0x0a
     c9c:	84 e2       	ldi	r24, 0x24	; 36
     c9e:	96 e0       	ldi	r25, 0x06	; 6
     ca0:	94 87       	std	Z+12, r25	; 0x0c
     ca2:	83 87       	std	Z+11, r24	; 0x0b
     ca4:	6c e0       	ldi	r22, 0x0C	; 12
     ca6:	76 e0       	ldi	r23, 0x06	; 6
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	96 cc       	rjmp	.-1748   	; 0x5d8 <NWK_OpenEndpoint>
     cac:	08 95       	ret

00000cae <PHY_DataInd>:
     cae:	cf 93       	push	r28
     cb0:	df 93       	push	r29
     cb2:	dc 01       	movw	r26, r24
     cb4:	ed 91       	ld	r30, X+
     cb6:	fc 91       	ld	r31, X
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 81       	ldd	r18, Z+1	; 0x01
     cbc:	28 38       	cpi	r18, 0x88	; 136
     cbe:	f1 f4       	brne	.+60     	; 0xcfc <PHY_DataInd+0x4e>
     cc0:	20 81       	ld	r18, Z
     cc2:	2f 7d       	andi	r18, 0xDF	; 223
     cc4:	21 34       	cpi	r18, 0x41	; 65
     cc6:	d1 f4       	brne	.+52     	; 0xcfc <PHY_DataInd+0x4e>
     cc8:	12 96       	adiw	r26, 0x02	; 2
     cca:	2c 91       	ld	r18, X
     ccc:	20 31       	cpi	r18, 0x10	; 16
     cce:	b0 f0       	brcs	.+44     	; 0xcfc <PHY_DataInd+0x4e>
     cd0:	ec 01       	movw	r28, r24
     cd2:	89 dd       	rcall	.-1262   	; 0x7e6 <nwkFrameAlloc>
     cd4:	00 97       	sbiw	r24, 0x00	; 0
     cd6:	91 f0       	breq	.+36     	; 0xcfc <PHY_DataInd+0x4e>
     cd8:	20 e2       	ldi	r18, 0x20	; 32
     cda:	fc 01       	movw	r30, r24
     cdc:	20 83       	st	Z, r18
     cde:	2a 81       	ldd	r18, Y+2	; 0x02
     ce0:	21 83       	std	Z+1, r18	; 0x01
     ce2:	2b 81       	ldd	r18, Y+3	; 0x03
     ce4:	ed 57       	subi	r30, 0x7D	; 125
     ce6:	ff 4f       	sbci	r31, 0xFF	; 255
     ce8:	20 83       	st	Z, r18
     cea:	2c 81       	ldd	r18, Y+4	; 0x04
     cec:	31 96       	adiw	r30, 0x01	; 1
     cee:	20 83       	st	Z, r18
     cf0:	4a 81       	ldd	r20, Y+2	; 0x02
     cf2:	50 e0       	ldi	r21, 0x00	; 0
     cf4:	68 81       	ld	r22, Y
     cf6:	79 81       	ldd	r23, Y+1	; 0x01
     cf8:	02 96       	adiw	r24, 0x02	; 2
     cfa:	d8 d6       	rcall	.+3504   	; 0x1aac <memcpy>
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	08 95       	ret

00000d02 <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
     d02:	2f 92       	push	r2
     d04:	3f 92       	push	r3
     d06:	4f 92       	push	r4
     d08:	5f 92       	push	r5
     d0a:	6f 92       	push	r6
     d0c:	7f 92       	push	r7
     d0e:	8f 92       	push	r8
     d10:	9f 92       	push	r9
     d12:	af 92       	push	r10
     d14:	bf 92       	push	r11
     d16:	cf 92       	push	r12
     d18:	df 92       	push	r13
     d1a:	ef 92       	push	r14
     d1c:	ff 92       	push	r15
     d1e:	0f 93       	push	r16
     d20:	1f 93       	push	r17
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	2c 97       	sbiw	r28, 0x0c	; 12
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	f8 94       	cli
     d30:	de bf       	out	0x3e, r29	; 62
     d32:	0f be       	out	0x3f, r0	; 63
     d34:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
     d36:	00 e0       	ldi	r16, 0x00	; 0
     d38:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
     d3a:	0f 2e       	mov	r0, r31
     d3c:	f4 e2       	ldi	r31, 0x24	; 36
     d3e:	bf 2e       	mov	r11, r31
     d40:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
     d42:	0f 2e       	mov	r0, r31
     d44:	fd e8       	ldi	r31, 0x8D	; 141
     d46:	ef 2e       	mov	r14, r31
     d48:	ff e1       	ldi	r31, 0x1F	; 31
     d4a:	ff 2e       	mov	r15, r31
     d4c:	f0 2d       	mov	r31, r0
    ack = false;

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
      nwkIb.addr == frame->header.nwkDstAddr &&
      0 == frame->header.nwkFcf.multicast)
    ack = true;
     d4e:	55 24       	eor	r5, r5
     d50:	53 94       	inc	r5
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
     d52:	68 94       	set
     d54:	aa 24       	eor	r10, r10
     d56:	a4 f8       	bld	r10, 4
  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
     d58:	68 94       	set
     d5a:	77 24       	eor	r7, r7
     d5c:	73 f8       	bld	r7, 3

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
     d5e:	68 94       	set
     d60:	66 24       	eor	r6, r6
     d62:	62 f8       	bld	r6, 2
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
     d64:	31 2c       	mov	r3, r1
     d66:	21 2c       	mov	r2, r1
    return true;

  freeEntry->src = header->nwkSrcAddr;
  freeEntry->seq = header->nwkSeq;
  freeEntry->mask = 1;
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
     d68:	0f 2e       	mov	r0, r31
     d6a:	ff e1       	ldi	r31, 0x1F	; 31
     d6c:	4f 2e       	mov	r4, r31
     d6e:	f0 2d       	mov	r31, r0
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
     d70:	cc 24       	eor	r12, r12
     d72:	c3 94       	inc	r12
     d74:	d1 2c       	mov	r13, r1
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
     d76:	da c1       	rjmp	.+948    	; 0x112c <nwkRxTaskHandler+0x42a>
  {
    switch (frame->state)
     d78:	d8 01       	movw	r26, r16
     d7a:	8c 91       	ld	r24, X
     d7c:	82 32       	cpi	r24, 0x22	; 34
     d7e:	09 f4       	brne	.+2      	; 0xd82 <nwkRxTaskHandler+0x80>
     d80:	05 c1       	rjmp	.+522    	; 0xf8c <nwkRxTaskHandler+0x28a>
     d82:	18 f4       	brcc	.+6      	; 0xd8a <nwkRxTaskHandler+0x88>
     d84:	80 32       	cpi	r24, 0x20	; 32
     d86:	41 f0       	breq	.+16     	; 0xd98 <nwkRxTaskHandler+0x96>
     d88:	d1 c1       	rjmp	.+930    	; 0x112c <nwkRxTaskHandler+0x42a>
     d8a:	83 32       	cpi	r24, 0x23	; 35
     d8c:	09 f4       	brne	.+2      	; 0xd90 <nwkRxTaskHandler+0x8e>
     d8e:	c9 c1       	rjmp	.+914    	; 0x1122 <nwkRxTaskHandler+0x420>
     d90:	84 32       	cpi	r24, 0x24	; 36
     d92:	09 f4       	brne	.+2      	; 0xd96 <nwkRxTaskHandler+0x94>
     d94:	c9 c1       	rjmp	.+914    	; 0x1128 <nwkRxTaskHandler+0x426>
     d96:	ca c1       	rjmp	.+916    	; 0x112c <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
     d98:	f8 01       	movw	r30, r16
     d9a:	b0 82       	st	Z, r11

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
     d9c:	83 85       	ldd	r24, Z+11	; 0x0b

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
     d9e:	98 2f       	mov	r25, r24
     da0:	9a 70       	andi	r25, 0x0A	; 10
     da2:	09 f0       	breq	.+2      	; 0xda6 <nwkRxTaskHandler+0xa4>
     da4:	c3 c1       	rjmp	.+902    	; 0x112c <nwkRxTaskHandler+0x42a>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     da6:	25 81       	ldd	r18, Z+5	; 0x05
     da8:	36 81       	ldd	r19, Z+6	; 0x06
     daa:	2f 3f       	cpi	r18, 0xFF	; 255
     dac:	3f 4f       	sbci	r19, 0xFF	; 255
     dae:	91 f4       	brne	.+36     	; 0xdd4 <nwkRxTaskHandler+0xd2>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
     db0:	d8 01       	movw	r26, r16
     db2:	1f 96       	adiw	r26, 0x0f	; 15
     db4:	8d 91       	ld	r24, X+
     db6:	9c 91       	ld	r25, X
     db8:	50 97       	sbiw	r26, 0x10	; 16
     dba:	f7 01       	movw	r30, r14
     dbc:	20 81       	ld	r18, Z
     dbe:	31 81       	ldd	r19, Z+1	; 0x01
     dc0:	28 17       	cp	r18, r24
     dc2:	39 07       	cpc	r19, r25
     dc4:	19 f0       	breq	.+6      	; 0xdcc <nwkRxTaskHandler+0xca>
     dc6:	01 96       	adiw	r24, 0x01	; 1
     dc8:	09 f0       	breq	.+2      	; 0xdcc <nwkRxTaskHandler+0xca>
     dca:	b0 c1       	rjmp	.+864    	; 0x112c <nwkRxTaskHandler+0x42a>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
     dcc:	e2 e2       	ldi	r30, 0x22	; 34
     dce:	d8 01       	movw	r26, r16
     dd0:	ec 93       	st	X, r30
     dd2:	ac c1       	rjmp	.+856    	; 0x112c <nwkRxTaskHandler+0x42a>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
     dd4:	d8 01       	movw	r26, r16
     dd6:	1f 96       	adiw	r26, 0x0f	; 15
     dd8:	2d 91       	ld	r18, X+
     dda:	3c 91       	ld	r19, X
     ddc:	50 97       	sbiw	r26, 0x10	; 16
     dde:	2f 3f       	cpi	r18, 0xFF	; 255
     de0:	3f 4f       	sbci	r19, 0xFF	; 255
     de2:	11 f4       	brne	.+4      	; 0xde8 <nwkRxTaskHandler+0xe6>
     de4:	80 fd       	sbrc	r24, 0
     de6:	a2 c1       	rjmp	.+836    	; 0x112c <nwkRxTaskHandler+0x42a>
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
     de8:	f7 01       	movw	r30, r14
     dea:	20 81       	ld	r18, Z
     dec:	31 81       	ldd	r19, Z+1	; 0x01
     dee:	d8 01       	movw	r26, r16
     df0:	1d 96       	adiw	r26, 0x0d	; 13
     df2:	8d 91       	ld	r24, X+
     df4:	9c 91       	ld	r25, X
     df6:	1e 97       	sbiw	r26, 0x0e	; 14
     df8:	28 17       	cp	r18, r24
     dfa:	39 07       	cpc	r19, r25
     dfc:	09 f4       	brne	.+2      	; 0xe00 <nwkRxTaskHandler+0xfe>
     dfe:	96 c1       	rjmp	.+812    	; 0x112c <nwkRxTaskHandler+0x42a>
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
     e00:	c8 01       	movw	r24, r16
     e02:	fa dd       	rcall	.-1036   	; 0x9f8 <nwkRouteFrameReceived>
     e04:	e8 eb       	ldi	r30, 0xB8	; 184
     e06:	fe e1       	ldi	r31, 0x1E	; 30
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	90 e0       	ldi	r25, 0x00	; 0
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
     e0c:	83 2c       	mov	r8, r3
     e0e:	92 2c       	mov	r9, r2

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
     e10:	9c 01       	movw	r18, r24

    if (entry->ttl && header->nwkSrcAddr == entry->src)
     e12:	44 81       	ldd	r20, Z+4	; 0x04
     e14:	44 23       	and	r20, r20
     e16:	09 f4       	brne	.+2      	; 0xe1a <nwkRxTaskHandler+0x118>
     e18:	74 c0       	rjmp	.+232    	; 0xf02 <nwkRxTaskHandler+0x200>
     e1a:	d8 01       	movw	r26, r16
     e1c:	1d 96       	adiw	r26, 0x0d	; 13
     e1e:	6d 91       	ld	r22, X+
     e20:	7c 91       	ld	r23, X
     e22:	1e 97       	sbiw	r26, 0x0e	; 14
     e24:	40 81       	ld	r20, Z
     e26:	51 81       	ldd	r21, Z+1	; 0x01
     e28:	64 17       	cp	r22, r20
     e2a:	75 07       	cpc	r23, r21
     e2c:	09 f0       	breq	.+2      	; 0xe30 <nwkRxTaskHandler+0x12e>
     e2e:	6a c0       	rjmp	.+212    	; 0xf04 <nwkRxTaskHandler+0x202>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
     e30:	1c 96       	adiw	r26, 0x0c	; 12
     e32:	8c 91       	ld	r24, X
     e34:	1c 97       	sbiw	r26, 0x0c	; 12
     e36:	f9 01       	movw	r30, r18
     e38:	ee 0f       	add	r30, r30
     e3a:	ff 1f       	adc	r31, r31
     e3c:	ee 0f       	add	r30, r30
     e3e:	ff 1f       	adc	r31, r31
     e40:	e2 0f       	add	r30, r18
     e42:	f3 1f       	adc	r31, r19
     e44:	e8 54       	subi	r30, 0x48	; 72
     e46:	f1 4e       	sbci	r31, 0xE1	; 225
     e48:	92 81       	ldd	r25, Z+2	; 0x02
     e4a:	98 1b       	sub	r25, r24

      if (diff < 8)
     e4c:	98 30       	cpi	r25, 0x08	; 8
     e4e:	08 f0       	brcs	.+2      	; 0xe52 <nwkRxTaskHandler+0x150>
     e50:	3e c0       	rjmp	.+124    	; 0xece <nwkRxTaskHandler+0x1cc>
      {
        if (entry->mask & (1 << diff))
     e52:	f9 01       	movw	r30, r18
     e54:	ee 0f       	add	r30, r30
     e56:	ff 1f       	adc	r31, r31
     e58:	ee 0f       	add	r30, r30
     e5a:	ff 1f       	adc	r31, r31
     e5c:	e2 0f       	add	r30, r18
     e5e:	f3 1f       	adc	r31, r19
     e60:	e8 54       	subi	r30, 0x48	; 72
     e62:	f1 4e       	sbci	r31, 0xE1	; 225
     e64:	83 81       	ldd	r24, Z+3	; 0x03
     e66:	48 2f       	mov	r20, r24
     e68:	50 e0       	ldi	r21, 0x00	; 0
     e6a:	09 2e       	mov	r0, r25
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <nwkRxTaskHandler+0x170>
     e6e:	55 95       	asr	r21
     e70:	47 95       	ror	r20
     e72:	0a 94       	dec	r0
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <nwkRxTaskHandler+0x16c>
     e76:	40 ff       	sbrs	r20, 0
     e78:	17 c0       	rjmp	.+46     	; 0xea8 <nwkRxTaskHandler+0x1a6>
        {
        #ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
     e7a:	f7 01       	movw	r30, r14
     e7c:	20 81       	ld	r18, Z
     e7e:	31 81       	ldd	r19, Z+1	; 0x01
     e80:	17 96       	adiw	r26, 0x07	; 7
     e82:	8d 91       	ld	r24, X+
     e84:	9c 91       	ld	r25, X
     e86:	18 97       	sbiw	r26, 0x08	; 8
     e88:	28 17       	cp	r18, r24
     e8a:	39 07       	cpc	r19, r25
     e8c:	09 f0       	breq	.+2      	; 0xe90 <nwkRxTaskHandler+0x18e>
     e8e:	4e c1       	rjmp	.+668    	; 0x112c <nwkRxTaskHandler+0x42a>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
     e90:	1b 96       	adiw	r26, 0x0b	; 11
     e92:	6c 91       	ld	r22, X
     e94:	1b 97       	sbiw	r26, 0x0b	; 11
     e96:	63 fb       	bst	r22, 3
     e98:	66 27       	eor	r22, r22
     e9a:	60 f9       	bld	r22, 0
     e9c:	1f 96       	adiw	r26, 0x0f	; 15
     e9e:	8d 91       	ld	r24, X+
     ea0:	9c 91       	ld	r25, X
     ea2:	50 97       	sbiw	r26, 0x10	; 16
     ea4:	a4 dd       	rcall	.-1208   	; 0x9ee <nwkRouteRemove>
     ea6:	42 c1       	rjmp	.+644    	; 0x112c <nwkRxTaskHandler+0x42a>
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
     ea8:	f9 01       	movw	r30, r18
     eaa:	ee 0f       	add	r30, r30
     eac:	ff 1f       	adc	r31, r31
     eae:	ee 0f       	add	r30, r30
     eb0:	ff 1f       	adc	r31, r31
     eb2:	2e 0f       	add	r18, r30
     eb4:	3f 1f       	adc	r19, r31
     eb6:	f9 01       	movw	r30, r18
     eb8:	e8 54       	subi	r30, 0x48	; 72
     eba:	f1 4e       	sbci	r31, 0xE1	; 225
     ebc:	96 01       	movw	r18, r12
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <nwkRxTaskHandler+0x1c2>
     ec0:	22 0f       	add	r18, r18
     ec2:	33 1f       	adc	r19, r19
     ec4:	9a 95       	dec	r25
     ec6:	e2 f7       	brpl	.-8      	; 0xec0 <nwkRxTaskHandler+0x1be>
     ec8:	82 2b       	or	r24, r18
     eca:	83 83       	std	Z+3, r24	; 0x03
     ecc:	36 c1       	rjmp	.+620    	; 0x113a <nwkRxTaskHandler+0x438>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
     ece:	f9 01       	movw	r30, r18
     ed0:	ee 0f       	add	r30, r30
     ed2:	ff 1f       	adc	r31, r31
     ed4:	ee 0f       	add	r30, r30
     ed6:	ff 1f       	adc	r31, r31
     ed8:	2e 0f       	add	r18, r30
     eda:	3f 1f       	adc	r19, r31
     edc:	f9 01       	movw	r30, r18
     ede:	e8 54       	subi	r30, 0x48	; 72
     ee0:	f1 4e       	sbci	r31, 0xE1	; 225
     ee2:	82 83       	std	Z+2, r24	; 0x02
        entry->mask = (entry->mask << shift) | 1;
     ee4:	83 81       	ldd	r24, Z+3	; 0x03
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	91 95       	neg	r25
     eec:	a9 01       	movw	r20, r18
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <nwkRxTaskHandler+0x1f2>
     ef0:	44 0f       	add	r20, r20
     ef2:	55 1f       	adc	r21, r21
     ef4:	9a 95       	dec	r25
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <nwkRxTaskHandler+0x1ee>
     ef8:	ca 01       	movw	r24, r20
     efa:	81 60       	ori	r24, 0x01	; 1
     efc:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
     efe:	44 82       	std	Z+4, r4	; 0x04
     f00:	1c c1       	rjmp	.+568    	; 0x113a <nwkRxTaskHandler+0x438>
        return false;
      }
    }

    if (0 == entry->ttl)
      freeEntry = entry;
     f02:	4f 01       	movw	r8, r30
     f04:	01 96       	adiw	r24, 0x01	; 1
     f06:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     f08:	8a 30       	cpi	r24, 0x0A	; 10
     f0a:	91 05       	cpc	r25, r1
     f0c:	09 f0       	breq	.+2      	; 0xf10 <nwkRxTaskHandler+0x20e>
     f0e:	80 cf       	rjmp	.-256    	; 0xe10 <nwkRxTaskHandler+0x10e>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
     f10:	81 14       	cp	r8, r1
     f12:	91 04       	cpc	r9, r1
     f14:	09 f4       	brne	.+2      	; 0xf18 <nwkRxTaskHandler+0x216>
     f16:	0a c1       	rjmp	.+532    	; 0x112c <nwkRxTaskHandler+0x42a>
    return true;

  freeEntry->src = header->nwkSrcAddr;
     f18:	d8 01       	movw	r26, r16
     f1a:	1d 96       	adiw	r26, 0x0d	; 13
     f1c:	8d 91       	ld	r24, X+
     f1e:	9c 91       	ld	r25, X
     f20:	1e 97       	sbiw	r26, 0x0e	; 14
     f22:	f4 01       	movw	r30, r8
     f24:	91 83       	std	Z+1, r25	; 0x01
     f26:	80 83       	st	Z, r24
  freeEntry->seq = header->nwkSeq;
     f28:	1c 96       	adiw	r26, 0x0c	; 12
     f2a:	8c 91       	ld	r24, X
     f2c:	82 83       	std	Z+2, r24	; 0x02
  freeEntry->mask = 1;
     f2e:	53 82       	std	Z+3, r5	; 0x03
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
     f30:	44 82       	std	Z+4, r4	; 0x04

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
     f32:	8a ea       	ldi	r24, 0xAA	; 170
     f34:	9e e1       	ldi	r25, 0x1E	; 30
     f36:	cd d4       	rcall	.+2458   	; 0x18d2 <SYS_TimerStart>
     f38:	00 c1       	rjmp	.+512    	; 0x113a <nwkRxTaskHandler+0x438>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
     f3a:	d7 01       	movw	r26, r14
     f3c:	2d 91       	ld	r18, X+
     f3e:	3c 91       	ld	r19, X
     f40:	f8 01       	movw	r30, r16
     f42:	87 85       	ldd	r24, Z+15	; 0x0f
     f44:	90 89       	ldd	r25, Z+16	; 0x10
     f46:	28 17       	cp	r18, r24
     f48:	39 07       	cpc	r19, r25
     f4a:	81 f0       	breq	.+32     	; 0xf6c <nwkRxTaskHandler+0x26a>
     f4c:	43 85       	ldd	r20, Z+11	; 0x0b
     f4e:	42 fd       	sbrc	r20, 2
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
     f50:	0b c0       	rjmp	.+22     	; 0xf68 <nwkRxTaskHandler+0x266>
     f52:	c8 01       	movw	r24, r16
     f54:	e1 d1       	rcall	.+962    	; 0x1318 <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
     f56:	d7 01       	movw	r26, r14
     f58:	2d 91       	ld	r18, X+
     f5a:	3c 91       	ld	r19, X
     f5c:	f8 01       	movw	r30, r16
     f5e:	87 85       	ldd	r24, Z+15	; 0x0f
     f60:	90 89       	ldd	r25, Z+16	; 0x10
     f62:	28 17       	cp	r18, r24
     f64:	39 07       	cpc	r19, r25
     f66:	11 f0       	breq	.+4      	; 0xf6c <nwkRxTaskHandler+0x26a>
     f68:	01 96       	adiw	r24, 0x01	; 1
     f6a:	21 f4       	brne	.+8      	; 0xf74 <nwkRxTaskHandler+0x272>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
     f6c:	e2 e2       	ldi	r30, 0x22	; 34
     f6e:	d8 01       	movw	r26, r16
     f70:	ec 93       	st	X, r30
     f72:	dc c0       	rjmp	.+440    	; 0x112c <nwkRxTaskHandler+0x42a>
    }

  #ifdef NWK_ENABLE_ROUTING
    else if (nwkIb.addr == header->macDstAddr)
     f74:	d8 01       	movw	r26, r16
     f76:	17 96       	adiw	r26, 0x07	; 7
     f78:	8d 91       	ld	r24, X+
     f7a:	9c 91       	ld	r25, X
     f7c:	18 97       	sbiw	r26, 0x08	; 8
     f7e:	82 17       	cp	r24, r18
     f80:	93 07       	cpc	r25, r19
     f82:	09 f0       	breq	.+2      	; 0xf86 <nwkRxTaskHandler+0x284>
     f84:	d3 c0       	rjmp	.+422    	; 0x112c <nwkRxTaskHandler+0x42a>
    {
      frame->state = NWK_RX_STATE_ROUTE;
     f86:	e3 e2       	ldi	r30, 0x23	; 35
     f88:	ec 93       	st	X, r30
     f8a:	d0 c0       	rjmp	.+416    	; 0x112c <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
     f8c:	10 92 b7 1e 	sts	0x1EB7, r1	; 0x801eb7 <nwkRxAckControl>
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
     f90:	d8 01       	movw	r26, r16
     f92:	51 96       	adiw	r26, 0x11	; 17
     f94:	8c 91       	ld	r24, X
     f96:	51 97       	sbiw	r26, 0x11	; 17
     f98:	82 95       	swap	r24
     f9a:	8f 70       	andi	r24, 0x0F	; 15
     f9c:	e8 2f       	mov	r30, r24
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	ee 0f       	add	r30, r30
     fa2:	ff 1f       	adc	r31, r31
     fa4:	ed 56       	subi	r30, 0x6D	; 109
     fa6:	f0 4e       	sbci	r31, 0xE0	; 224
     fa8:	01 90       	ld	r0, Z+
     faa:	f0 81       	ld	r31, Z
     fac:	e0 2d       	mov	r30, r0
     fae:	30 97       	sbiw	r30, 0x00	; 0
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <nwkRxTaskHandler+0x2b2>
     fb2:	60 c0       	rjmp	.+192    	; 0x1074 <nwkRxTaskHandler+0x372>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
     fb4:	1d 96       	adiw	r26, 0x0d	; 13
     fb6:	2d 91       	ld	r18, X+
     fb8:	3c 91       	ld	r19, X
     fba:	1e 97       	sbiw	r26, 0x0e	; 14
     fbc:	3a 83       	std	Y+2, r19	; 0x02
     fbe:	29 83       	std	Y+1, r18	; 0x01
  ind.dstAddr = header->nwkDstAddr;
     fc0:	1f 96       	adiw	r26, 0x0f	; 15
     fc2:	4d 91       	ld	r20, X+
     fc4:	5c 91       	ld	r21, X
     fc6:	50 97       	sbiw	r26, 0x10	; 16
     fc8:	5c 83       	std	Y+4, r21	; 0x04
     fca:	4b 83       	std	Y+3, r20	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
     fcc:	51 96       	adiw	r26, 0x11	; 17
     fce:	9c 91       	ld	r25, X
     fd0:	51 97       	sbiw	r26, 0x11	; 17
     fd2:	9f 70       	andi	r25, 0x0F	; 15
     fd4:	9d 83       	std	Y+5, r25	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
     fd6:	8e 83       	std	Y+6, r24	; 0x06
  ind.data = frame->payload;
     fd8:	af 57       	subi	r26, 0x7F	; 127
     fda:	bf 4f       	sbci	r27, 0xFF	; 255
     fdc:	8d 91       	ld	r24, X+
     fde:	9c 91       	ld	r25, X
     fe0:	99 87       	std	Y+9, r25	; 0x09
     fe2:	88 87       	std	Y+8, r24	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
     fe4:	b8 01       	movw	r22, r16
     fe6:	6e 5f       	subi	r22, 0xFE	; 254
     fe8:	7f 4f       	sbci	r23, 0xFF	; 255
  ind.size = nwkFramePayloadSize(frame);
     fea:	86 1b       	sub	r24, r22
     fec:	97 0b       	sbc	r25, r23
     fee:	d8 01       	movw	r26, r16
     ff0:	11 96       	adiw	r26, 0x01	; 1
     ff2:	9c 91       	ld	r25, X
     ff4:	11 97       	sbiw	r26, 0x01	; 1
     ff6:	98 1b       	sub	r25, r24
     ff8:	9a 87       	std	Y+10, r25	; 0x0a
  ind.lqi = frame->rx.lqi;
     ffa:	ad 57       	subi	r26, 0x7D	; 125
     ffc:	bf 4f       	sbci	r27, 0xFF	; 255
     ffe:	8c 91       	ld	r24, X
    1000:	8b 87       	std	Y+11, r24	; 0x0b
  ind.rssi = frame->rx.rssi;
    1002:	11 96       	adiw	r26, 0x01	; 1
    1004:	8c 91       	ld	r24, X
    1006:	8c 87       	std	Y+12, r24	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    1008:	d8 01       	movw	r26, r16
    100a:	1b 96       	adiw	r26, 0x0b	; 11
    100c:	9c 91       	ld	r25, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    100e:	69 2f       	mov	r22, r25
    1010:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    1012:	92 fd       	sbrc	r25, 2
    1014:	02 c0       	rjmp	.+4      	; 0x101a <nwkRxTaskHandler+0x318>
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	01 c0       	rjmp	.+2      	; 0x101c <nwkRxTaskHandler+0x31a>
    101a:	80 e2       	ldi	r24, 0x20	; 32
    101c:	86 2b       	or	r24, r22
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    101e:	93 fd       	sbrc	r25, 3
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <nwkRxTaskHandler+0x324>
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	01 c0       	rjmp	.+2      	; 0x1028 <nwkRxTaskHandler+0x326>
    1026:	90 e4       	ldi	r25, 0x40	; 64
    1028:	89 2b       	or	r24, r25
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    102a:	4f 3f       	cpi	r20, 0xFF	; 255
    102c:	5f 4f       	sbci	r21, 0xFF	; 255
    102e:	11 f0       	breq	.+4      	; 0x1034 <nwkRxTaskHandler+0x332>
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	01 c0       	rjmp	.+2      	; 0x1036 <nwkRxTaskHandler+0x334>
    1034:	96 2d       	mov	r25, r6
    1036:	89 2b       	or	r24, r25
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    1038:	d8 01       	movw	r26, r16
    103a:	19 96       	adiw	r26, 0x09	; 9
    103c:	4d 91       	ld	r20, X+
    103e:	5c 91       	ld	r21, X
    1040:	1a 97       	sbiw	r26, 0x0a	; 10
    1042:	24 17       	cp	r18, r20
    1044:	35 07       	cpc	r19, r21
    1046:	11 f0       	breq	.+4      	; 0x104c <nwkRxTaskHandler+0x34a>
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	01 c0       	rjmp	.+2      	; 0x104e <nwkRxTaskHandler+0x34c>
    104c:	97 2d       	mov	r25, r7
    104e:	89 2b       	or	r24, r25
    1050:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    1052:	d8 01       	movw	r26, r16
    1054:	15 96       	adiw	r26, 0x05	; 5
    1056:	2d 91       	ld	r18, X+
    1058:	3c 91       	ld	r19, X
    105a:	16 97       	sbiw	r26, 0x06	; 6
    105c:	2f 3f       	cpi	r18, 0xFF	; 255
    105e:	3f 4f       	sbci	r19, 0xFF	; 255
    1060:	11 f0       	breq	.+4      	; 0x1066 <nwkRxTaskHandler+0x364>
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	01 c0       	rjmp	.+2      	; 0x1068 <nwkRxTaskHandler+0x366>
    1066:	9a 2d       	mov	r25, r10
    1068:	89 2b       	or	r24, r25
    106a:	8f 83       	std	Y+7, r24	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    106c:	ce 01       	movw	r24, r28
    106e:	01 96       	adiw	r24, 0x01	; 1
    1070:	19 95       	eicall
    1072:	01 c0       	rjmp	.+2      	; 0x1076 <nwkRxTaskHandler+0x374>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
    1074:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
    1076:	f8 01       	movw	r30, r16
    1078:	93 85       	ldd	r25, Z+11	; 0x0b
    107a:	90 ff       	sbrs	r25, 0
    ack = false;
    107c:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    107e:	d8 01       	movw	r26, r16
    1080:	17 96       	adiw	r26, 0x07	; 7
    1082:	2d 91       	ld	r18, X+
    1084:	3c 91       	ld	r19, X
    1086:	18 97       	sbiw	r26, 0x08	; 8
    1088:	2f 3f       	cpi	r18, 0xFF	; 255
    108a:	3f 4f       	sbci	r19, 0xFF	; 255
    108c:	69 f4       	brne	.+26     	; 0x10a8 <nwkRxTaskHandler+0x3a6>
    108e:	f7 01       	movw	r30, r14
    1090:	40 81       	ld	r20, Z
    1092:	51 81       	ldd	r21, Z+1	; 0x01
    1094:	d8 01       	movw	r26, r16
    1096:	1f 96       	adiw	r26, 0x0f	; 15
    1098:	2d 91       	ld	r18, X+
    109a:	3c 91       	ld	r19, X
    109c:	50 97       	sbiw	r26, 0x10	; 16
    109e:	42 17       	cp	r20, r18
    10a0:	53 07       	cpc	r21, r19
    10a2:	11 f4       	brne	.+4      	; 0x10a8 <nwkRxTaskHandler+0x3a6>
      nwkIb.addr == frame->header.nwkDstAddr &&
    10a4:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    10a6:	85 2d       	mov	r24, r5

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    10a8:	f8 01       	movw	r30, r16
    10aa:	25 81       	ldd	r18, Z+5	; 0x05
    10ac:	36 81       	ldd	r19, Z+6	; 0x06
    10ae:	2f 3f       	cpi	r18, 0xFF	; 255
    10b0:	3f 4f       	sbci	r19, 0xFF	; 255
    10b2:	a1 f1       	breq	.+104    	; 0x111c <nwkRxTaskHandler+0x41a>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    10b4:	d7 01       	movw	r26, r14
    10b6:	2d 91       	ld	r18, X+
    10b8:	3c 91       	ld	r19, X
    10ba:	2f 3f       	cpi	r18, 0xFF	; 255
    10bc:	3f 4f       	sbci	r19, 0xFF	; 255
    ack = false;

  if (ack)
    10be:	71 f1       	breq	.+92     	; 0x111c <nwkRxTaskHandler+0x41a>
    10c0:	88 23       	and	r24, r24
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
    10c2:	61 f1       	breq	.+88     	; 0x111c <nwkRxTaskHandler+0x41a>
    10c4:	90 db       	rcall	.-2272   	; 0x7e6 <nwkFrameAlloc>
    10c6:	4c 01       	movw	r8, r24
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(ack);
    10ca:	41 f1       	breq	.+80     	; 0x111c <nwkRxTaskHandler+0x41a>
    10cc:	f4 db       	rcall	.-2072   	; 0x8b6 <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
    10ce:	f4 01       	movw	r30, r8
    10d0:	81 81       	ldd	r24, Z+1	; 0x01
    10d2:	8d 5f       	subi	r24, 0xFD	; 253
    10d4:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
    10d6:	e9 57       	subi	r30, 0x79	; 121
    10d8:	ff 4f       	sbci	r31, 0xFF	; 255
    10da:	11 82       	std	Z+1, r1	; 0x01
    10dc:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    10de:	d8 01       	movw	r26, r16
    10e0:	1b 96       	adiw	r26, 0x0b	; 11
    10e2:	8c 91       	ld	r24, X
    10e4:	1b 97       	sbiw	r26, 0x0b	; 11
    10e6:	86 95       	lsr	r24
    10e8:	81 70       	andi	r24, 0x01	; 1
    10ea:	f4 01       	movw	r30, r8
    10ec:	93 85       	ldd	r25, Z+11	; 0x0b
    10ee:	80 fb       	bst	r24, 0
    10f0:	91 f9       	bld	r25, 1
    10f2:	93 87       	std	Z+11, r25	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    10f4:	1d 96       	adiw	r26, 0x0d	; 13
    10f6:	8d 91       	ld	r24, X+
    10f8:	9c 91       	ld	r25, X
    10fa:	1e 97       	sbiw	r26, 0x0e	; 14
    10fc:	90 8b       	std	Z+16, r25	; 0x10
    10fe:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
    1100:	ef 57       	subi	r30, 0x7F	; 127
    1102:	ff 4f       	sbci	r31, 0xFF	; 255
    1104:	01 90       	ld	r0, Z+
    1106:	f0 81       	ld	r31, Z
    1108:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
    110a:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
    110c:	80 91 b7 1e 	lds	r24, 0x1EB7	; 0x801eb7 <nwkRxAckControl>
  command->seq = frame->header.nwkSeq;
    1110:	82 83       	std	Z+2, r24	; 0x02
    1112:	1c 96       	adiw	r26, 0x0c	; 12
    1114:	8c 91       	ld	r24, X

  nwkTxFrame(ack);
    1116:	81 83       	std	Z+1, r24	; 0x01
    1118:	c4 01       	movw	r24, r8
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    111a:	b0 d0       	rcall	.+352    	; 0x127c <nwkTxFrame>
    111c:	d8 01       	movw	r26, r16
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    111e:	bc 92       	st	X, r11
    1120:	05 c0       	rjmp	.+10     	; 0x112c <nwkRxTaskHandler+0x42a>
    1122:	c8 01       	movw	r24, r16
      } break;
    1124:	1e dd       	rcall	.-1476   	; 0xb62 <nwkRouteFrame>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    1126:	02 c0       	rjmp	.+4      	; 0x112c <nwkRxTaskHandler+0x42a>
    1128:	c8 01       	movw	r24, r16
    112a:	96 db       	rcall	.-2260   	; 0x858 <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    112c:	c8 01       	movw	r24, r16
    112e:	9e db       	rcall	.-2244   	; 0x86c <nwkFrameNext>
    1130:	8c 01       	movw	r16, r24
    1132:	89 2b       	or	r24, r25
    1134:	09 f0       	breq	.+2      	; 0x1138 <nwkRxTaskHandler+0x436>
    1136:	20 ce       	rjmp	.-960    	; 0xd78 <nwkRxTaskHandler+0x76>
    1138:	07 c0       	rjmp	.+14     	; 0x1148 <nwkRxTaskHandler+0x446>
    113a:	f8 01       	movw	r30, r16
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    113c:	87 81       	ldd	r24, Z+7	; 0x07
    113e:	90 85       	ldd	r25, Z+8	; 0x08
    1140:	01 96       	adiw	r24, 0x01	; 1
    1142:	09 f0       	breq	.+2      	; 0x1146 <nwkRxTaskHandler+0x444>
    1144:	08 cf       	rjmp	.-496    	; 0xf56 <nwkRxTaskHandler+0x254>
    1146:	f9 ce       	rjmp	.-526    	; 0xf3a <nwkRxTaskHandler+0x238>
    1148:	2c 96       	adiw	r28, 0x0c	; 12
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	f8 94       	cli
    114e:	de bf       	out	0x3e, r29	; 62
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	cd bf       	out	0x3d, r28	; 61
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	1f 91       	pop	r17
    115a:	0f 91       	pop	r16
    115c:	ff 90       	pop	r15
    115e:	ef 90       	pop	r14
    1160:	df 90       	pop	r13
    1162:	cf 90       	pop	r12
    1164:	bf 90       	pop	r11
    1166:	af 90       	pop	r10
    1168:	9f 90       	pop	r9
    116a:	8f 90       	pop	r8
    116c:	7f 90       	pop	r7
    116e:	6f 90       	pop	r6
    1170:	5f 90       	pop	r5
    1172:	4f 90       	pop	r4
    1174:	3f 90       	pop	r3
    1176:	2f 90       	pop	r2
    1178:	08 95       	ret

0000117a <nwkTxDelayTimerHandler>:
    117a:	ef 92       	push	r14
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
  frame->tx.status = status;
    117c:	ff 92       	push	r15
    117e:	0f 93       	push	r16
    1180:	1f 93       	push	r17
    1182:	cf 93       	push	r28
    1184:	7c 01       	movw	r14, r24
    1186:	10 e0       	ldi	r17, 0x00	; 0
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	01 e0       	ldi	r16, 0x01	; 1
    118e:	c3 e1       	ldi	r28, 0x13	; 19
    1190:	13 c0       	rjmp	.+38     	; 0x11b8 <nwkTxDelayTimerHandler+0x3e>
    1192:	fc 01       	movw	r30, r24
    1194:	20 81       	ld	r18, Z
    1196:	21 31       	cpi	r18, 0x11	; 17
    1198:	79 f4       	brne	.+30     	; 0x11b8 <nwkTxDelayTimerHandler+0x3e>
    119a:	ec 57       	subi	r30, 0x7C	; 124
    119c:	ff 4f       	sbci	r31, 0xFF	; 255
    119e:	20 81       	ld	r18, Z
    11a0:	31 81       	ldd	r19, Z+1	; 0x01
    11a2:	21 50       	subi	r18, 0x01	; 1
    11a4:	31 09       	sbc	r19, r1
    11a6:	31 83       	std	Z+1, r19	; 0x01
    11a8:	20 83       	st	Z, r18
    11aa:	23 2b       	or	r18, r19
    11ac:	21 f4       	brne	.+8      	; 0x11b6 <nwkTxDelayTimerHandler+0x3c>
    11ae:	fc 01       	movw	r30, r24
    11b0:	c0 83       	st	Z, r28
    11b2:	10 2f       	mov	r17, r16
    11b4:	01 c0       	rjmp	.+2      	; 0x11b8 <nwkTxDelayTimerHandler+0x3e>
    11b6:	10 2f       	mov	r17, r16
    11b8:	59 db       	rcall	.-2382   	; 0x86c <nwkFrameNext>
    11ba:	00 97       	sbiw	r24, 0x00	; 0
    11bc:	51 f7       	brne	.-44     	; 0x1192 <nwkTxDelayTimerHandler+0x18>
    11be:	11 23       	and	r17, r17
    11c0:	11 f0       	breq	.+4      	; 0x11c6 <nwkTxDelayTimerHandler+0x4c>
    11c2:	c7 01       	movw	r24, r14
    11c4:	86 d3       	rcall	.+1804   	; 0x18d2 <SYS_TimerStart>
    11c6:	cf 91       	pop	r28
    11c8:	1f 91       	pop	r17
    11ca:	0f 91       	pop	r16
    11cc:	ff 90       	pop	r15
    11ce:	ef 90       	pop	r14
    11d0:	08 95       	ret

000011d2 <nwkTxAckWaitTimerHandler>:
    11d2:	ef 92       	push	r14
    11d4:	ff 92       	push	r15
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	7c 01       	movw	r14, r24
    11e0:	10 e0       	ldi	r17, 0x00	; 0
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	01 e0       	ldi	r16, 0x01	; 1
    11e8:	d7 e1       	ldi	r29, 0x17	; 23
    11ea:	c0 e1       	ldi	r28, 0x10	; 16
    11ec:	16 c0       	rjmp	.+44     	; 0x121a <nwkTxAckWaitTimerHandler+0x48>
    11ee:	fc 01       	movw	r30, r24
    11f0:	20 81       	ld	r18, Z
    11f2:	26 31       	cpi	r18, 0x16	; 22
    11f4:	91 f4       	brne	.+36     	; 0x121a <nwkTxAckWaitTimerHandler+0x48>
    11f6:	ec 57       	subi	r30, 0x7C	; 124
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	20 81       	ld	r18, Z
    11fc:	31 81       	ldd	r19, Z+1	; 0x01
    11fe:	21 50       	subi	r18, 0x01	; 1
    1200:	31 09       	sbc	r19, r1
    1202:	31 83       	std	Z+1, r19	; 0x01
    1204:	20 83       	st	Z, r18
    1206:	23 2b       	or	r18, r19
    1208:	39 f4       	brne	.+14     	; 0x1218 <nwkTxAckWaitTimerHandler+0x46>
    120a:	fc 01       	movw	r30, r24
    120c:	d0 83       	st	Z, r29
    120e:	ed 57       	subi	r30, 0x7D	; 125
    1210:	ff 4f       	sbci	r31, 0xFF	; 255
    1212:	c0 83       	st	Z, r28
    1214:	10 2f       	mov	r17, r16
    1216:	01 c0       	rjmp	.+2      	; 0x121a <nwkTxAckWaitTimerHandler+0x48>
    1218:	10 2f       	mov	r17, r16
    121a:	28 db       	rcall	.-2480   	; 0x86c <nwkFrameNext>
    121c:	00 97       	sbiw	r24, 0x00	; 0
    121e:	39 f7       	brne	.-50     	; 0x11ee <nwkTxAckWaitTimerHandler+0x1c>
    1220:	11 23       	and	r17, r17
    1222:	11 f0       	breq	.+4      	; 0x1228 <nwkTxAckWaitTimerHandler+0x56>
    1224:	c7 01       	movw	r24, r14
    1226:	55 d3       	rcall	.+1706   	; 0x18d2 <SYS_TimerStart>
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	1f 91       	pop	r17
    122e:	0f 91       	pop	r16
    1230:	ff 90       	pop	r15
    1232:	ef 90       	pop	r14
    1234:	08 95       	ret

00001236 <nwkTxInit>:
    1236:	10 92 05 1f 	sts	0x1F05, r1	; 0x801f05 <nwkTxPhyActiveFrame+0x1>
    123a:	10 92 04 1f 	sts	0x1F04, r1	; 0x801f04 <nwkTxPhyActiveFrame>
    123e:	e7 ef       	ldi	r30, 0xF7	; 247
    1240:	fe e1       	ldi	r31, 0x1E	; 30
    1242:	82 e3       	ldi	r24, 0x32	; 50
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	a0 e0       	ldi	r26, 0x00	; 0
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	86 83       	std	Z+6, r24	; 0x06
    124c:	97 83       	std	Z+7, r25	; 0x07
    124e:	a0 87       	std	Z+8, r26	; 0x08
    1250:	b1 87       	std	Z+9, r27	; 0x09
    1252:	12 86       	std	Z+10, r1	; 0x0a
    1254:	89 ee       	ldi	r24, 0xE9	; 233
    1256:	98 e0       	ldi	r25, 0x08	; 8
    1258:	94 87       	std	Z+12, r25	; 0x0c
    125a:	83 87       	std	Z+11, r24	; 0x0b
    125c:	ea ee       	ldi	r30, 0xEA	; 234
    125e:	fe e1       	ldi	r31, 0x1E	; 30
    1260:	8a e0       	ldi	r24, 0x0A	; 10
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	a0 e0       	ldi	r26, 0x00	; 0
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	86 83       	std	Z+6, r24	; 0x06
    126a:	97 83       	std	Z+7, r25	; 0x07
    126c:	a0 87       	std	Z+8, r26	; 0x08
    126e:	b1 87       	std	Z+9, r27	; 0x09
    1270:	12 86       	std	Z+10, r1	; 0x0a
    1272:	8d eb       	ldi	r24, 0xBD	; 189
    1274:	98 e0       	ldi	r25, 0x08	; 8
    1276:	94 87       	std	Z+12, r25	; 0x0c
    1278:	83 87       	std	Z+11, r24	; 0x0b
    127a:	08 95       	ret

0000127c <nwkTxFrame>:
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	ec 01       	movw	r28, r24
    1282:	fc 01       	movw	r30, r24
    1284:	ea 57       	subi	r30, 0x7A	; 122
    1286:	ff 4f       	sbci	r31, 0xFF	; 255
    1288:	80 81       	ld	r24, Z
    128a:	81 ff       	sbrs	r24, 1
    128c:	03 c0       	rjmp	.+6      	; 0x1294 <nwkTxFrame+0x18>
    128e:	92 e1       	ldi	r25, 0x12	; 18
    1290:	98 83       	st	Y, r25
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <nwkTxFrame+0x1c>
    1294:	92 e1       	ldi	r25, 0x12	; 18
    1296:	98 83       	st	Y, r25
    1298:	fe 01       	movw	r30, r28
    129a:	ed 57       	subi	r30, 0x7D	; 125
    129c:	ff 4f       	sbci	r31, 0xFF	; 255
    129e:	10 82       	st	Z, r1
    12a0:	80 ff       	sbrs	r24, 0
    12a2:	05 c0       	rjmp	.+10     	; 0x12ae <nwkTxFrame+0x32>
    12a4:	2f ef       	ldi	r18, 0xFF	; 255
    12a6:	3f ef       	ldi	r19, 0xFF	; 255
    12a8:	3e 83       	std	Y+6, r19	; 0x06
    12aa:	2d 83       	std	Y+5, r18	; 0x05
    12ac:	06 c0       	rjmp	.+12     	; 0x12ba <nwkTxFrame+0x3e>
    12ae:	20 91 8f 1f 	lds	r18, 0x1F8F	; 0x801f8f <nwkIb+0x2>
    12b2:	30 91 90 1f 	lds	r19, 0x1F90	; 0x801f90 <nwkIb+0x3>
    12b6:	3e 83       	std	Y+6, r19	; 0x06
    12b8:	2d 83       	std	Y+5, r18	; 0x05
    12ba:	85 70       	andi	r24, 0x05	; 5
    12bc:	19 f4       	brne	.+6      	; 0x12c4 <nwkTxFrame+0x48>
    12be:	ce 01       	movw	r24, r28
    12c0:	31 dc       	rcall	.-1950   	; 0xb24 <nwkRoutePrepareTx>
    12c2:	04 c0       	rjmp	.+8      	; 0x12cc <nwkTxFrame+0x50>
    12c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    12c6:	98 89       	ldd	r25, Y+16	; 0x10
    12c8:	98 87       	std	Y+8, r25	; 0x08
    12ca:	8f 83       	std	Y+7, r24	; 0x07
    12cc:	ed e8       	ldi	r30, 0x8D	; 141
    12ce:	ff e1       	ldi	r31, 0x1F	; 31
    12d0:	80 81       	ld	r24, Z
    12d2:	91 81       	ldd	r25, Z+1	; 0x01
    12d4:	9a 87       	std	Y+10, r25	; 0x0a
    12d6:	89 87       	std	Y+9, r24	; 0x09
    12d8:	85 81       	ldd	r24, Z+5	; 0x05
    12da:	8f 5f       	subi	r24, 0xFF	; 255
    12dc:	85 83       	std	Z+5, r24	; 0x05
    12de:	8c 83       	std	Y+4, r24	; 0x04
    12e0:	8f 81       	ldd	r24, Y+7	; 0x07
    12e2:	98 85       	ldd	r25, Y+8	; 0x08
    12e4:	01 96       	adiw	r24, 0x01	; 1
    12e6:	69 f4       	brne	.+26     	; 0x1302 <nwkTxFrame+0x86>
    12e8:	81 e4       	ldi	r24, 0x41	; 65
    12ea:	98 e8       	ldi	r25, 0x88	; 136
    12ec:	9b 83       	std	Y+3, r25	; 0x03
    12ee:	8a 83       	std	Y+2, r24	; 0x02
    12f0:	cf d3       	rcall	.+1950   	; 0x1a90 <rand>
    12f2:	cc 57       	subi	r28, 0x7C	; 124
    12f4:	df 4f       	sbci	r29, 0xFF	; 255
    12f6:	87 70       	andi	r24, 0x07	; 7
    12f8:	99 27       	eor	r25, r25
    12fa:	01 96       	adiw	r24, 0x01	; 1
    12fc:	99 83       	std	Y+1, r25	; 0x01
    12fe:	88 83       	st	Y, r24
    1300:	08 c0       	rjmp	.+16     	; 0x1312 <nwkTxFrame+0x96>
    1302:	81 e6       	ldi	r24, 0x61	; 97
    1304:	98 e8       	ldi	r25, 0x88	; 136
    1306:	9b 83       	std	Y+3, r25	; 0x03
    1308:	8a 83       	std	Y+2, r24	; 0x02
    130a:	cc 57       	subi	r28, 0x7C	; 124
    130c:	df 4f       	sbci	r29, 0xFF	; 255
    130e:	19 82       	std	Y+1, r1	; 0x01
    1310:	18 82       	st	Y, r1
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	08 95       	ret

00001318 <nwkTxBroadcastFrame>:
    1318:	0f 93       	push	r16
    131a:	1f 93       	push	r17
    131c:	cf 93       	push	r28
    131e:	df 93       	push	r29
    1320:	8c 01       	movw	r16, r24
    1322:	61 da       	rcall	.-2878   	; 0x7e6 <nwkFrameAlloc>
    1324:	ec 01       	movw	r28, r24
    1326:	89 2b       	or	r24, r25
    1328:	a9 f1       	breq	.+106    	; 0x1394 <nwkTxBroadcastFrame+0x7c>
    132a:	82 e1       	ldi	r24, 0x12	; 18
    132c:	88 83       	st	Y, r24
    132e:	f8 01       	movw	r30, r16
    1330:	81 81       	ldd	r24, Z+1	; 0x01
    1332:	89 83       	std	Y+1, r24	; 0x01
    1334:	fe 01       	movw	r30, r28
    1336:	ed 57       	subi	r30, 0x7D	; 125
    1338:	ff 4f       	sbci	r31, 0xFF	; 255
    133a:	10 82       	st	Z, r1
    133c:	a9 d3       	rcall	.+1874   	; 0x1a90 <rand>
    133e:	fe 01       	movw	r30, r28
    1340:	ec 57       	subi	r30, 0x7C	; 124
    1342:	ff 4f       	sbci	r31, 0xFF	; 255
    1344:	87 70       	andi	r24, 0x07	; 7
    1346:	99 27       	eor	r25, r25
    1348:	01 96       	adiw	r24, 0x01	; 1
    134a:	91 83       	std	Z+1, r25	; 0x01
    134c:	80 83       	st	Z, r24
    134e:	33 96       	adiw	r30, 0x03	; 3
    1350:	11 82       	std	Z+1, r1	; 0x01
    1352:	10 82       	st	Z, r1
    1354:	f8 01       	movw	r30, r16
    1356:	41 81       	ldd	r20, Z+1	; 0x01
    1358:	50 e0       	ldi	r21, 0x00	; 0
    135a:	b8 01       	movw	r22, r16
    135c:	6e 5f       	subi	r22, 0xFE	; 254
    135e:	7f 4f       	sbci	r23, 0xFF	; 255
    1360:	ce 01       	movw	r24, r28
    1362:	02 96       	adiw	r24, 0x02	; 2
    1364:	a3 d3       	rcall	.+1862   	; 0x1aac <memcpy>
    1366:	81 e4       	ldi	r24, 0x41	; 65
    1368:	98 e8       	ldi	r25, 0x88	; 136
    136a:	9b 83       	std	Y+3, r25	; 0x03
    136c:	8a 83       	std	Y+2, r24	; 0x02
    136e:	8f ef       	ldi	r24, 0xFF	; 255
    1370:	9f ef       	ldi	r25, 0xFF	; 255
    1372:	98 87       	std	Y+8, r25	; 0x08
    1374:	8f 83       	std	Y+7, r24	; 0x07
    1376:	f8 01       	movw	r30, r16
    1378:	85 81       	ldd	r24, Z+5	; 0x05
    137a:	96 81       	ldd	r25, Z+6	; 0x06
    137c:	9e 83       	std	Y+6, r25	; 0x06
    137e:	8d 83       	std	Y+5, r24	; 0x05
    1380:	ed e8       	ldi	r30, 0x8D	; 141
    1382:	ff e1       	ldi	r31, 0x1F	; 31
    1384:	80 81       	ld	r24, Z
    1386:	91 81       	ldd	r25, Z+1	; 0x01
    1388:	9a 87       	std	Y+10, r25	; 0x0a
    138a:	89 87       	std	Y+9, r24	; 0x09
    138c:	85 81       	ldd	r24, Z+5	; 0x05
    138e:	8f 5f       	subi	r24, 0xFF	; 255
    1390:	85 83       	std	Z+5, r24	; 0x05
    1392:	8c 83       	std	Y+4, r24	; 0x04
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	1f 91       	pop	r17
    139a:	0f 91       	pop	r16
    139c:	08 95       	ret

0000139e <nwkTxAckReceived>:
    139e:	cf 93       	push	r28
    13a0:	df 93       	push	r29
    13a2:	fc 01       	movw	r30, r24
    13a4:	21 85       	ldd	r18, Z+9	; 0x09
    13a6:	23 30       	cpi	r18, 0x03	; 3
    13a8:	d9 f4       	brne	.+54     	; 0x13e0 <nwkTxAckReceived+0x42>
    13aa:	10 c0       	rjmp	.+32     	; 0x13cc <nwkTxAckReceived+0x2e>
    13ac:	fc 01       	movw	r30, r24
    13ae:	20 81       	ld	r18, Z
    13b0:	26 31       	cpi	r18, 0x16	; 22
    13b2:	89 f4       	brne	.+34     	; 0x13d6 <nwkTxAckReceived+0x38>
    13b4:	34 85       	ldd	r19, Z+12	; 0x0c
    13b6:	29 81       	ldd	r18, Y+1	; 0x01
    13b8:	32 13       	cpse	r19, r18
    13ba:	0d c0       	rjmp	.+26     	; 0x13d6 <nwkTxAckReceived+0x38>
    13bc:	27 e1       	ldi	r18, 0x17	; 23
    13be:	20 83       	st	Z, r18
    13c0:	2a 81       	ldd	r18, Y+2	; 0x02
    13c2:	ea 57       	subi	r30, 0x7A	; 122
    13c4:	ff 4f       	sbci	r31, 0xFF	; 255
    13c6:	20 83       	st	Z, r18
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	0b c0       	rjmp	.+22     	; 0x13e2 <nwkTxAckReceived+0x44>
    13cc:	fc 01       	movw	r30, r24
    13ce:	c7 81       	ldd	r28, Z+7	; 0x07
    13d0:	d0 85       	ldd	r29, Z+8	; 0x08
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	4a da       	rcall	.-2924   	; 0x86c <nwkFrameNext>
    13d8:	00 97       	sbiw	r24, 0x00	; 0
    13da:	41 f7       	brne	.-48     	; 0x13ac <nwkTxAckReceived+0xe>
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	01 c0       	rjmp	.+2      	; 0x13e2 <nwkTxAckReceived+0x44>
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	df 91       	pop	r29
    13e4:	cf 91       	pop	r28
    13e6:	08 95       	ret

000013e8 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    13e8:	e0 91 04 1f 	lds	r30, 0x1F04	; 0x801f04 <nwkTxPhyActiveFrame>
    13ec:	f0 91 05 1f 	lds	r31, 0x1F05	; 0x801f05 <nwkTxPhyActiveFrame+0x1>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    13f0:	81 30       	cpi	r24, 0x01	; 1
    13f2:	21 f0       	breq	.+8      	; 0x13fc <PHY_DataConf+0x14>
    13f4:	48 f0       	brcs	.+18     	; 0x1408 <PHY_DataConf+0x20>
    13f6:	82 30       	cpi	r24, 0x02	; 2
    13f8:	19 f0       	breq	.+6      	; 0x1400 <PHY_DataConf+0x18>
    13fa:	04 c0       	rjmp	.+8      	; 0x1404 <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    13fc:	80 e2       	ldi	r24, 0x20	; 32
    13fe:	05 c0       	rjmp	.+10     	; 0x140a <PHY_DataConf+0x22>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    1400:	81 e2       	ldi	r24, 0x21	; 33
    1402:	03 c0       	rjmp	.+6      	; 0x140a <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	01 c0       	rjmp	.+2      	; 0x140a <PHY_DataConf+0x22>
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    1408:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    140a:	df 01       	movw	r26, r30
    140c:	ad 57       	subi	r26, 0x7D	; 125
    140e:	bf 4f       	sbci	r27, 0xFF	; 255
    1410:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    1412:	85 e1       	ldi	r24, 0x15	; 21
    1414:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    1416:	10 92 05 1f 	sts	0x1F05, r1	; 0x801f05 <nwkTxPhyActiveFrame+0x1>
    141a:	10 92 04 1f 	sts	0x1F04, r1	; 0x801f04 <nwkTxPhyActiveFrame>
  nwkIb.lock--;
    141e:	ed e8       	ldi	r30, 0x8D	; 141
    1420:	ff e1       	ldi	r31, 0x1F	; 31
    1422:	86 a1       	ldd	r24, Z+38	; 0x26
    1424:	97 a1       	ldd	r25, Z+39	; 0x27
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	97 a3       	std	Z+39, r25	; 0x27
    142a:	86 a3       	std	Z+38, r24	; 0x26
    142c:	08 95       	ret

0000142e <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    142e:	9f 92       	push	r9
    1430:	af 92       	push	r10
    1432:	bf 92       	push	r11
    1434:	cf 92       	push	r12
    1436:	df 92       	push	r13
    1438:	ef 92       	push	r14
    143a:	ff 92       	push	r15
    143c:	0f 93       	push	r16
    143e:	1f 93       	push	r17
    1440:	cf 93       	push	r28
    1442:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    1444:	c0 e0       	ldi	r28, 0x00	; 0
    1446:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    1448:	0f 2e       	mov	r0, r31
    144a:	f4 e1       	ldi	r31, 0x14	; 20
    144c:	af 2e       	mov	r10, r31
    144e:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    1450:	0d e8       	ldi	r16, 0x8D	; 141
    1452:	1f e1       	ldi	r17, 0x1F	; 31
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    1454:	0f 2e       	mov	r0, r31
    1456:	f7 e1       	ldi	r31, 0x17	; 23
    1458:	df 2e       	mov	r13, r31
    145a:	f0 2d       	mov	r31, r0
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    145c:	0f 2e       	mov	r0, r31
    145e:	f6 e1       	ldi	r31, 0x16	; 22
    1460:	9f 2e       	mov	r9, r31
    1462:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    1464:	0f 2e       	mov	r0, r31
    1466:	f9 e2       	ldi	r31, 0x29	; 41
    1468:	ef 2e       	mov	r14, r31
    146a:	f1 2c       	mov	r15, r1
    146c:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    146e:	0f 2e       	mov	r0, r31
    1470:	f3 e1       	ldi	r31, 0x13	; 19
    1472:	cf 2e       	mov	r12, r31
    1474:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    1476:	0f 2e       	mov	r0, r31
    1478:	f1 e1       	ldi	r31, 0x11	; 17
    147a:	bf 2e       	mov	r11, r31
    147c:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    147e:	60 c0       	rjmp	.+192    	; 0x1540 <nwkTxTaskHandler+0x112>
  {
    switch (frame->state)
    1480:	88 81       	ld	r24, Y
    1482:	83 31       	cpi	r24, 0x13	; 19
    1484:	c1 f0       	breq	.+48     	; 0x14b6 <nwkTxTaskHandler+0x88>
    1486:	18 f4       	brcc	.+6      	; 0x148e <nwkTxTaskHandler+0x60>
    1488:	82 31       	cpi	r24, 0x12	; 18
    148a:	39 f0       	breq	.+14     	; 0x149a <nwkTxTaskHandler+0x6c>
    148c:	59 c0       	rjmp	.+178    	; 0x1540 <nwkTxTaskHandler+0x112>
    148e:	85 31       	cpi	r24, 0x15	; 21
    1490:	49 f1       	breq	.+82     	; 0x14e4 <nwkTxTaskHandler+0xb6>
    1492:	87 31       	cpi	r24, 0x17	; 23
    1494:	09 f4       	brne	.+2      	; 0x1498 <nwkTxTaskHandler+0x6a>
    1496:	45 c0       	rjmp	.+138    	; 0x1522 <nwkTxTaskHandler+0xf4>
    1498:	53 c0       	rjmp	.+166    	; 0x1540 <nwkTxTaskHandler+0x112>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    149a:	fe 01       	movw	r30, r28
    149c:	ec 57       	subi	r30, 0x7C	; 124
    149e:	ff 4f       	sbci	r31, 0xFF	; 255
    14a0:	80 81       	ld	r24, Z
    14a2:	91 81       	ldd	r25, Z+1	; 0x01
    14a4:	89 2b       	or	r24, r25
    14a6:	29 f0       	breq	.+10     	; 0x14b2 <nwkTxTaskHandler+0x84>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    14a8:	b8 82       	st	Y, r11
          SYS_TimerStart(&nwkTxDelayTimer);
    14aa:	8a ee       	ldi	r24, 0xEA	; 234
    14ac:	9e e1       	ldi	r25, 0x1E	; 30
    14ae:	11 d2       	rcall	.+1058   	; 0x18d2 <SYS_TimerStart>
    14b0:	47 c0       	rjmp	.+142    	; 0x1540 <nwkTxTaskHandler+0x112>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    14b2:	c8 82       	st	Y, r12
    14b4:	45 c0       	rjmp	.+138    	; 0x1540 <nwkTxTaskHandler+0x112>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    14b6:	80 91 04 1f 	lds	r24, 0x1F04	; 0x801f04 <nwkTxPhyActiveFrame>
    14ba:	90 91 05 1f 	lds	r25, 0x1F05	; 0x801f05 <nwkTxPhyActiveFrame+0x1>
    14be:	89 2b       	or	r24, r25
    14c0:	09 f0       	breq	.+2      	; 0x14c4 <nwkTxTaskHandler+0x96>
    14c2:	3e c0       	rjmp	.+124    	; 0x1540 <nwkTxTaskHandler+0x112>
        {
          nwkTxPhyActiveFrame = frame;
    14c4:	d0 93 05 1f 	sts	0x1F05, r29	; 0x801f05 <nwkTxPhyActiveFrame+0x1>
    14c8:	c0 93 04 1f 	sts	0x1F04, r28	; 0x801f04 <nwkTxPhyActiveFrame>
          frame->state = NWK_TX_STATE_WAIT_CONF;
    14cc:	a8 82       	st	Y, r10
          PHY_DataReq(frame->data, frame->size);
    14ce:	69 81       	ldd	r22, Y+1	; 0x01
    14d0:	ce 01       	movw	r24, r28
    14d2:	02 96       	adiw	r24, 0x02	; 2
    14d4:	cb d0       	rcall	.+406    	; 0x166c <PHY_DataReq>
          nwkIb.lock++;
    14d6:	f8 01       	movw	r30, r16
    14d8:	86 a1       	ldd	r24, Z+38	; 0x26
    14da:	97 a1       	ldd	r25, Z+39	; 0x27
    14dc:	01 96       	adiw	r24, 0x01	; 1
    14de:	97 a3       	std	Z+39, r25	; 0x27
    14e0:	86 a3       	std	Z+38, r24	; 0x26
    14e2:	2e c0       	rjmp	.+92     	; 0x1540 <nwkTxTaskHandler+0x112>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    14e4:	fe 01       	movw	r30, r28
    14e6:	ed 57       	subi	r30, 0x7D	; 125
    14e8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ea:	80 81       	ld	r24, Z
    14ec:	81 11       	cpse	r24, r1
    14ee:	17 c0       	rjmp	.+46     	; 0x151e <nwkTxTaskHandler+0xf0>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    14f0:	2d 85       	ldd	r18, Y+13	; 0x0d
    14f2:	3e 85       	ldd	r19, Y+14	; 0x0e
    14f4:	f8 01       	movw	r30, r16
    14f6:	80 81       	ld	r24, Z
    14f8:	91 81       	ldd	r25, Z+1	; 0x01
    14fa:	28 17       	cp	r18, r24
    14fc:	39 07       	cpc	r19, r25
    14fe:	69 f4       	brne	.+26     	; 0x151a <nwkTxTaskHandler+0xec>
    1500:	8b 85       	ldd	r24, Y+11	; 0x0b
    1502:	80 ff       	sbrs	r24, 0
    1504:	0a c0       	rjmp	.+20     	; 0x151a <nwkTxTaskHandler+0xec>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    1506:	98 82       	st	Y, r9
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    1508:	fe 01       	movw	r30, r28
    150a:	ec 57       	subi	r30, 0x7C	; 124
    150c:	ff 4f       	sbci	r31, 0xFF	; 255
    150e:	f1 82       	std	Z+1, r15	; 0x01
    1510:	e0 82       	st	Z, r14
            SYS_TimerStart(&nwkTxAckWaitTimer);
    1512:	87 ef       	ldi	r24, 0xF7	; 247
    1514:	9e e1       	ldi	r25, 0x1E	; 30
    1516:	dd d1       	rcall	.+954    	; 0x18d2 <SYS_TimerStart>
    1518:	13 c0       	rjmp	.+38     	; 0x1540 <nwkTxTaskHandler+0x112>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    151a:	d8 82       	st	Y, r13
    151c:	11 c0       	rjmp	.+34     	; 0x1540 <nwkTxTaskHandler+0x112>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    151e:	d8 82       	st	Y, r13
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    1520:	0f c0       	rjmp	.+30     	; 0x1540 <nwkTxTaskHandler+0x112>
    1522:	ce 01       	movw	r24, r28
    1524:	b8 da       	rcall	.-2704   	; 0xa96 <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    1526:	fe 01       	movw	r30, r28
    1528:	e9 57       	subi	r30, 0x79	; 121
    152a:	ff 4f       	sbci	r31, 0xFF	; 255
    152c:	01 90       	ld	r0, Z+
    152e:	f0 81       	ld	r31, Z
    1530:	e0 2d       	mov	r30, r0
    1532:	30 97       	sbiw	r30, 0x00	; 0
          nwkFrameFree(frame);
    1534:	19 f4       	brne	.+6      	; 0x153c <nwkTxTaskHandler+0x10e>
    1536:	ce 01       	movw	r24, r28
    1538:	8f d9       	rcall	.-3298   	; 0x858 <nwkFrameFree>
        else
          frame->tx.confirm(frame);
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <nwkTxTaskHandler+0x112>
    153c:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    153e:	19 95       	eicall
    1540:	ce 01       	movw	r24, r28
    1542:	94 d9       	rcall	.-3288   	; 0x86c <nwkFrameNext>
    1544:	ec 01       	movw	r28, r24
    1546:	89 2b       	or	r24, r25
    1548:	09 f0       	breq	.+2      	; 0x154c <nwkTxTaskHandler+0x11e>
    154a:	9a cf       	rjmp	.-204    	; 0x1480 <nwkTxTaskHandler+0x52>

      default:
        break;
    };
  }
}
    154c:	df 91       	pop	r29
    154e:	cf 91       	pop	r28
    1550:	1f 91       	pop	r17
    1552:	0f 91       	pop	r16
    1554:	ff 90       	pop	r15
    1556:	ef 90       	pop	r14
    1558:	df 90       	pop	r13
    155a:	cf 90       	pop	r12
    155c:	bf 90       	pop	r11
    155e:	af 90       	pop	r10
    1560:	9f 90       	pop	r9
    1562:	08 95       	ret

00001564 <phySetChannel>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    1564:	80 91 06 1f 	lds	r24, 0x1F06	; 0x801f06 <phyBand>
    1568:	98 2f       	mov	r25, r24
    156a:	9f 70       	andi	r25, 0x0F	; 15
    156c:	e4 e5       	ldi	r30, 0x54	; 84
    156e:	f1 e0       	ldi	r31, 0x01	; 1
    1570:	80 81       	ld	r24, Z
    1572:	80 7f       	andi	r24, 0xF0	; 240
    1574:	89 2b       	or	r24, r25
    1576:	80 83       	st	Z, r24
    1578:	80 91 06 1f 	lds	r24, 0x1F06	; 0x801f06 <phyBand>
    157c:	88 23       	and	r24, r24
    157e:	29 f0       	breq	.+10     	; 0x158a <phySetChannel+0x26>
    1580:	80 91 07 1f 	lds	r24, 0x1F07	; 0x801f07 <phyChannel>
    1584:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7c0153>
    1588:	08 95       	ret
    158a:	80 91 07 1f 	lds	r24, 0x1F07	; 0x801f07 <phyChannel>
    158e:	98 2f       	mov	r25, r24
    1590:	9f 71       	andi	r25, 0x1F	; 31
    1592:	e8 e4       	ldi	r30, 0x48	; 72
    1594:	f1 e0       	ldi	r31, 0x01	; 1
    1596:	80 81       	ld	r24, Z
    1598:	80 7e       	andi	r24, 0xE0	; 224
    159a:	89 2b       	or	r24, r25
    159c:	80 83       	st	Z, r24
    159e:	08 95       	ret

000015a0 <phyTrxSetState>:
    15a0:	93 e0       	ldi	r25, 0x03	; 3
    15a2:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    15a6:	e1 e4       	ldi	r30, 0x41	; 65
    15a8:	f1 e0       	ldi	r31, 0x01	; 1
    15aa:	90 81       	ld	r25, Z
    15ac:	9f 71       	andi	r25, 0x1F	; 31
    15ae:	98 30       	cpi	r25, 0x08	; 8
    15b0:	e1 f7       	brne	.-8      	; 0x15aa <phyTrxSetState+0xa>
    15b2:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    15b6:	e1 e4       	ldi	r30, 0x41	; 65
    15b8:	f1 e0       	ldi	r31, 0x01	; 1
    15ba:	90 81       	ld	r25, Z
    15bc:	9f 71       	andi	r25, 0x1F	; 31
    15be:	89 13       	cpse	r24, r25
    15c0:	fc cf       	rjmp	.-8      	; 0x15ba <phyTrxSetState+0x1a>
    15c2:	08 95       	ret

000015c4 <phySetRxState>:
    15c4:	88 e0       	ldi	r24, 0x08	; 8
    15c6:	ec df       	rcall	.-40     	; 0x15a0 <phyTrxSetState>
    15c8:	8f ef       	ldi	r24, 0xFF	; 255
    15ca:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    15ce:	80 91 08 1f 	lds	r24, 0x1F08	; 0x801f08 <phyRxState>
    15d2:	88 23       	and	r24, r24
    15d4:	11 f0       	breq	.+4      	; 0x15da <phySetRxState+0x16>
    15d6:	86 e1       	ldi	r24, 0x16	; 22
    15d8:	e3 cf       	rjmp	.-58     	; 0x15a0 <phyTrxSetState>
    15da:	08 95       	ret

000015dc <PHY_Init>:
    15dc:	e9 e3       	ldi	r30, 0x39	; 57
    15de:	f1 e0       	ldi	r31, 0x01	; 1
    15e0:	80 81       	ld	r24, Z
    15e2:	81 60       	ori	r24, 0x01	; 1
    15e4:	80 83       	st	Z, r24
    15e6:	10 92 08 1f 	sts	0x1F08, r1	; 0x801f08 <phyRxState>
    15ea:	10 92 06 1f 	sts	0x1F06, r1	; 0x801f06 <phyBand>
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	80 93 89 1f 	sts	0x1F89, r24	; 0x801f89 <phyState>
    15f4:	88 e0       	ldi	r24, 0x08	; 8
    15f6:	d4 df       	rcall	.-88     	; 0x15a0 <phyTrxSetState>
    15f8:	8b ee       	ldi	r24, 0xEB	; 235
    15fa:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x7c0156>
    15fe:	ec e4       	ldi	r30, 0x4C	; 76
    1600:	f1 e0       	ldi	r31, 0x01	; 1
    1602:	80 81       	ld	r24, Z
    1604:	80 68       	ori	r24, 0x80	; 128
    1606:	80 83       	st	Z, r24
    1608:	08 95       	ret

0000160a <PHY_SetRxState>:
    160a:	80 93 08 1f 	sts	0x1F08, r24	; 0x801f08 <phyRxState>
    160e:	da cf       	rjmp	.-76     	; 0x15c4 <phySetRxState>
    1610:	08 95       	ret

00001612 <PHY_SetChannel>:
    1612:	80 93 07 1f 	sts	0x1F07, r24	; 0x801f07 <phyChannel>
    1616:	a6 cf       	rjmp	.-180    	; 0x1564 <phySetChannel>
    1618:	08 95       	ret

0000161a <PHY_SetPanId>:
    161a:	cf 93       	push	r28
    161c:	df 93       	push	r29
    161e:	1f 92       	push	r1
    1620:	1f 92       	push	r1
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
    1626:	9a 83       	std	Y+2, r25	; 0x02
    1628:	89 83       	std	Y+1, r24	; 0x01
    162a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
    162e:	8a 81       	ldd	r24, Y+2	; 0x02
    1630:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	08 95       	ret

0000163e <PHY_SetShortAddr>:
    163e:	cf 93       	push	r28
    1640:	df 93       	push	r29
    1642:	1f 92       	push	r1
    1644:	1f 92       	push	r1
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	9a 83       	std	Y+2, r25	; 0x02
    164c:	89 83       	std	Y+1, r24	; 0x01
    164e:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
    1658:	99 81       	ldd	r25, Y+1	; 0x01
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	89 0f       	add	r24, r25
    165e:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	df 91       	pop	r29
    1668:	cf 91       	pop	r28
    166a:	08 95       	ret

0000166c <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    166c:	1f 93       	push	r17
    166e:	cf 93       	push	r28
    1670:	df 93       	push	r29
    1672:	18 2f       	mov	r17, r24
    1674:	d9 2f       	mov	r29, r25
    1676:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    1678:	89 e1       	ldi	r24, 0x19	; 25
    167a:	92 df       	rcall	.-220    	; 0x15a0 <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    167c:	8f ef       	ldi	r24, 0xFF	; 255
    167e:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    1682:	82 e0       	ldi	r24, 0x02	; 2
    1684:	8c 0f       	add	r24, r28
    1686:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x7c0180>
  for (uint8_t i = 0; i < size; i++)
    168a:	cc 23       	and	r28, r28
    168c:	71 f0       	breq	.+28     	; 0x16aa <PHY_DataReq+0x3e>
    168e:	a1 2f       	mov	r26, r17
    1690:	bd 2f       	mov	r27, r29
    1692:	c1 50       	subi	r28, 0x01	; 1
    1694:	6c 2f       	mov	r22, r28
    1696:	70 e0       	ldi	r23, 0x00	; 0
    1698:	6e 57       	subi	r22, 0x7E	; 126
    169a:	7e 4f       	sbci	r23, 0xFE	; 254
    169c:	e1 e8       	ldi	r30, 0x81	; 129
    169e:	f1 e0       	ldi	r31, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    16a0:	8d 91       	ld	r24, X+
    16a2:	81 93       	st	Z+, r24
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    16a4:	e6 17       	cp	r30, r22
    16a6:	f7 07       	cpc	r31, r23
    16a8:	d9 f7       	brne	.-10     	; 0x16a0 <PHY_DataReq+0x34>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    16aa:	83 e0       	ldi	r24, 0x03	; 3
    16ac:	80 93 89 1f 	sts	0x1F89, r24	; 0x801f89 <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    16b0:	82 e0       	ldi	r24, 0x02	; 2
    16b2:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
}
    16b6:	df 91       	pop	r29
    16b8:	cf 91       	pop	r28
    16ba:	1f 91       	pop	r17
    16bc:	08 95       	ret

000016be <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    16be:	1f 93       	push	r17
    16c0:	cf 93       	push	r28
    16c2:	df 93       	push	r29
    16c4:	00 d0       	rcall	.+0      	; 0x16c6 <PHY_TaskHandler+0x8>
    16c6:	1f 92       	push	r1
    16c8:	1f 92       	push	r1
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    16ce:	80 91 89 1f 	lds	r24, 0x1F89	; 0x801f89 <phyState>
    16d2:	82 30       	cpi	r24, 0x02	; 2
    16d4:	09 f4       	brne	.+2      	; 0x16d8 <PHY_TaskHandler+0x1a>
    16d6:	65 c0       	rjmp	.+202    	; 0x17a2 <PHY_TaskHandler+0xe4>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    16d8:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    16dc:	83 ff       	sbrs	r24, 3
    16de:	3e c0       	rjmp	.+124    	; 0x175c <PHY_TaskHandler+0x9e>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    16e0:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7c017b>

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    16e4:	6a 2f       	mov	r22, r26
    16e6:	70 e0       	ldi	r23, 0x00	; 0
    16e8:	ab 01       	movw	r20, r22
    16ea:	4f 5f       	subi	r20, 0xFF	; 255
    16ec:	5f 4f       	sbci	r21, 0xFF	; 255
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	20 e0       	ldi	r18, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    16f4:	fc 01       	movw	r30, r24
    16f6:	e0 58       	subi	r30, 0x80	; 128
    16f8:	fe 4f       	sbci	r31, 0xFE	; 254
    16fa:	30 81       	ld	r19, Z
    16fc:	fc 01       	movw	r30, r24
    16fe:	e7 5f       	subi	r30, 0xF7	; 247
    1700:	f0 4e       	sbci	r31, 0xE0	; 224
    1702:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    1704:	2f 5f       	subi	r18, 0xFF	; 255
    1706:	82 2f       	mov	r24, r18
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	84 17       	cp	r24, r20
    170c:	95 07       	cpc	r25, r21
    170e:	94 f3       	brlt	.-28     	; 0x16f4 <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    1710:	89 e0       	ldi	r24, 0x09	; 9
    1712:	9f e1       	ldi	r25, 0x1F	; 31
    1714:	9a 83       	std	Y+2, r25	; 0x02
    1716:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    1718:	a2 50       	subi	r26, 0x02	; 2
    171a:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    171c:	fb 01       	movw	r30, r22
    171e:	e7 5f       	subi	r30, 0xF7	; 247
    1720:	f0 4e       	sbci	r31, 0xE0	; 224
    1722:	80 81       	ld	r24, Z
    1724:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    1726:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7c0147>
    172a:	8a 55       	subi	r24, 0x5A	; 90
    172c:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    172e:	ce 01       	movw	r24, r28
    1730:	01 96       	adiw	r24, 0x01	; 1
    1732:	bd da       	rcall	.-2694   	; 0xcae <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    1734:	e1 e4       	ldi	r30, 0x41	; 65
    1736:	f1 e0       	ldi	r31, 0x01	; 1
    1738:	80 81       	ld	r24, Z
    173a:	8f 71       	andi	r24, 0x1F	; 31
    173c:	86 31       	cpi	r24, 0x16	; 22
    173e:	e1 f7       	brne	.-8      	; 0x1738 <PHY_TaskHandler+0x7a>

    IRQ_STATUS_REG_s.rxEnd = 1;
    1740:	ef e4       	ldi	r30, 0x4F	; 79
    1742:	f1 e0       	ldi	r31, 0x01	; 1
    1744:	80 81       	ld	r24, Z
    1746:	88 60       	ori	r24, 0x08	; 8
    1748:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    174a:	ec e4       	ldi	r30, 0x4C	; 76
    174c:	f1 e0       	ldi	r31, 0x01	; 1
    174e:	80 81       	ld	r24, Z
    1750:	8f 77       	andi	r24, 0x7F	; 127
    1752:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    1754:	80 81       	ld	r24, Z
    1756:	80 68       	ori	r24, 0x80	; 128
    1758:	80 83       	st	Z, r24
    175a:	23 c0       	rjmp	.+70     	; 0x17a2 <PHY_TaskHandler+0xe4>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    175c:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    1760:	86 ff       	sbrs	r24, 6
    1762:	1f c0       	rjmp	.+62     	; 0x17a2 <PHY_TaskHandler+0xe4>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    1764:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    1768:	8f 71       	andi	r24, 0x1F	; 31
    176a:	89 31       	cpi	r24, 0x19	; 25
    176c:	a9 f4       	brne	.+42     	; 0x1798 <PHY_TaskHandler+0xda>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    176e:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1772:	12 95       	swap	r17
    1774:	16 95       	lsr	r17
    1776:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    1778:	49 f0       	breq	.+18     	; 0x178c <PHY_TaskHandler+0xce>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    177a:	13 30       	cpi	r17, 0x03	; 3
    177c:	21 f0       	breq	.+8      	; 0x1786 <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    177e:	15 30       	cpi	r17, 0x05	; 5
    1780:	21 f0       	breq	.+8      	; 0x178a <PHY_TaskHandler+0xcc>
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    1782:	13 e0       	ldi	r17, 0x03	; 3
    1784:	03 c0       	rjmp	.+6      	; 0x178c <PHY_TaskHandler+0xce>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    1786:	11 e0       	ldi	r17, 0x01	; 1
    1788:	01 c0       	rjmp	.+2      	; 0x178c <PHY_TaskHandler+0xce>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    178a:	12 e0       	ldi	r17, 0x02	; 2
    178c:	1b df       	rcall	.-458    	; 0x15c4 <phySetRxState>
      phyState = PHY_STATE_IDLE;
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	80 93 89 1f 	sts	0x1F89, r24	; 0x801f89 <phyState>

      PHY_DataConf(status);
    1794:	81 2f       	mov	r24, r17
    1796:	28 de       	rcall	.-944    	; 0x13e8 <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    1798:	ef e4       	ldi	r30, 0x4F	; 79
    179a:	f1 e0       	ldi	r31, 0x01	; 1
    179c:	80 81       	ld	r24, Z
    179e:	80 64       	ori	r24, 0x40	; 64
    17a0:	80 83       	st	Z, r24
  }
}
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	df 91       	pop	r29
    17ae:	cf 91       	pop	r28
    17b0:	1f 91       	pop	r17
    17b2:	08 95       	ret

000017b4 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    17b4:	0e 94 3e 01 	call	0x27c	; 0x27c <HAL_Init>
  SYS_TimerInit();
    17b8:	6d d0       	rcall	.+218    	; 0x1894 <SYS_TimerInit>
  PHY_Init();
    17ba:	10 df       	rcall	.-480    	; 0x15dc <PHY_Init>
    17bc:	0c 94 c7 02 	jmp	0x58e	; 0x58e <NWK_Init>
  NWK_Init();
    17c0:	08 95       	ret

000017c2 <SYS_TaskHandler>:
    17c2:	7d df       	rcall	.-262    	; 0x16be <PHY_TaskHandler>
/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
  NWK_TaskHandler();
    17c4:	0e 94 f5 02 	call	0x5ea	; 0x5ea <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    17c8:	8f c0       	rjmp	.+286    	; 0x18e8 <SYS_TimerTaskHandler>
    17ca:	08 95       	ret

000017cc <placeTimer>:
    17cc:	0f 93       	push	r16
    17ce:	1f 93       	push	r17
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	ec 01       	movw	r28, r24
    17d6:	80 91 8a 1f 	lds	r24, 0x1F8A	; 0x801f8a <timers>
    17da:	90 91 8b 1f 	lds	r25, 0x1F8B	; 0x801f8b <timers+0x1>
    17de:	00 97       	sbiw	r24, 0x00	; 0
    17e0:	09 f4       	brne	.+2      	; 0x17e4 <placeTimer+0x18>
    17e2:	45 c0       	rjmp	.+138    	; 0x186e <placeTimer+0xa2>
    17e4:	4e 81       	ldd	r20, Y+6	; 0x06
    17e6:	5f 81       	ldd	r21, Y+7	; 0x07
    17e8:	68 85       	ldd	r22, Y+8	; 0x08
    17ea:	79 85       	ldd	r23, Y+9	; 0x09
    17ec:	fc 01       	movw	r30, r24
    17ee:	02 81       	ldd	r16, Z+2	; 0x02
    17f0:	13 81       	ldd	r17, Z+3	; 0x03
    17f2:	24 81       	ldd	r18, Z+4	; 0x04
    17f4:	35 81       	ldd	r19, Z+5	; 0x05
    17f6:	40 17       	cp	r20, r16
    17f8:	51 07       	cpc	r21, r17
    17fa:	62 07       	cpc	r22, r18
    17fc:	73 07       	cpc	r23, r19
    17fe:	60 f0       	brcs	.+24     	; 0x1818 <placeTimer+0x4c>
    1800:	dc 01       	movw	r26, r24
    1802:	17 c0       	rjmp	.+46     	; 0x1832 <placeTimer+0x66>
    1804:	02 81       	ldd	r16, Z+2	; 0x02
    1806:	13 81       	ldd	r17, Z+3	; 0x03
    1808:	24 81       	ldd	r18, Z+4	; 0x04
    180a:	35 81       	ldd	r19, Z+5	; 0x05
    180c:	40 17       	cp	r20, r16
    180e:	51 07       	cpc	r21, r17
    1810:	62 07       	cpc	r22, r18
    1812:	73 07       	cpc	r23, r19
    1814:	68 f4       	brcc	.+26     	; 0x1830 <placeTimer+0x64>
    1816:	03 c0       	rjmp	.+6      	; 0x181e <placeTimer+0x52>
    1818:	fc 01       	movw	r30, r24
    181a:	a0 e0       	ldi	r26, 0x00	; 0
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	04 1b       	sub	r16, r20
    1820:	15 0b       	sbc	r17, r21
    1822:	26 0b       	sbc	r18, r22
    1824:	37 0b       	sbc	r19, r23
    1826:	02 83       	std	Z+2, r16	; 0x02
    1828:	13 83       	std	Z+3, r17	; 0x03
    182a:	24 83       	std	Z+4, r18	; 0x04
    182c:	35 83       	std	Z+5, r19	; 0x05
    182e:	0a c0       	rjmp	.+20     	; 0x1844 <placeTimer+0x78>
    1830:	df 01       	movw	r26, r30
    1832:	40 1b       	sub	r20, r16
    1834:	51 0b       	sbc	r21, r17
    1836:	62 0b       	sbc	r22, r18
    1838:	73 0b       	sbc	r23, r19
    183a:	ed 91       	ld	r30, X+
    183c:	fc 91       	ld	r31, X
    183e:	11 97       	sbiw	r26, 0x01	; 1
    1840:	30 97       	sbiw	r30, 0x00	; 0
    1842:	01 f7       	brne	.-64     	; 0x1804 <placeTimer+0x38>
    1844:	4a 83       	std	Y+2, r20	; 0x02
    1846:	5b 83       	std	Y+3, r21	; 0x03
    1848:	6c 83       	std	Y+4, r22	; 0x04
    184a:	7d 83       	std	Y+5, r23	; 0x05
    184c:	10 97       	sbiw	r26, 0x00	; 0
    184e:	41 f0       	breq	.+16     	; 0x1860 <placeTimer+0x94>
    1850:	8d 91       	ld	r24, X+
    1852:	9c 91       	ld	r25, X
    1854:	11 97       	sbiw	r26, 0x01	; 1
    1856:	99 83       	std	Y+1, r25	; 0x01
    1858:	88 83       	st	Y, r24
    185a:	cd 93       	st	X+, r28
    185c:	dc 93       	st	X, r29
    185e:	15 c0       	rjmp	.+42     	; 0x188a <placeTimer+0xbe>
    1860:	99 83       	std	Y+1, r25	; 0x01
    1862:	88 83       	st	Y, r24
    1864:	d0 93 8b 1f 	sts	0x1F8B, r29	; 0x801f8b <timers+0x1>
    1868:	c0 93 8a 1f 	sts	0x1F8A, r28	; 0x801f8a <timers>
    186c:	0e c0       	rjmp	.+28     	; 0x188a <placeTimer+0xbe>
    186e:	19 82       	std	Y+1, r1	; 0x01
    1870:	18 82       	st	Y, r1
    1872:	8e 81       	ldd	r24, Y+6	; 0x06
    1874:	9f 81       	ldd	r25, Y+7	; 0x07
    1876:	a8 85       	ldd	r26, Y+8	; 0x08
    1878:	b9 85       	ldd	r27, Y+9	; 0x09
    187a:	8a 83       	std	Y+2, r24	; 0x02
    187c:	9b 83       	std	Y+3, r25	; 0x03
    187e:	ac 83       	std	Y+4, r26	; 0x04
    1880:	bd 83       	std	Y+5, r27	; 0x05
    1882:	d0 93 8b 1f 	sts	0x1F8B, r29	; 0x801f8b <timers+0x1>
    1886:	c0 93 8a 1f 	sts	0x1F8A, r28	; 0x801f8a <timers>
    188a:	df 91       	pop	r29
    188c:	cf 91       	pop	r28
    188e:	1f 91       	pop	r17
    1890:	0f 91       	pop	r16
    1892:	08 95       	ret

00001894 <SYS_TimerInit>:
    1894:	10 92 8b 1f 	sts	0x1F8B, r1	; 0x801f8b <timers+0x1>
    1898:	10 92 8a 1f 	sts	0x1F8A, r1	; 0x801f8a <timers>
    189c:	08 95       	ret

0000189e <SYS_TimerStarted>:
    189e:	e0 91 8a 1f 	lds	r30, 0x1F8A	; 0x801f8a <timers>
    18a2:	f0 91 8b 1f 	lds	r31, 0x1F8B	; 0x801f8b <timers+0x1>
    18a6:	30 97       	sbiw	r30, 0x00	; 0
    18a8:	71 f0       	breq	.+28     	; 0x18c6 <SYS_TimerStarted+0x28>
    18aa:	e8 17       	cp	r30, r24
    18ac:	f9 07       	cpc	r31, r25
    18ae:	21 f4       	brne	.+8      	; 0x18b8 <SYS_TimerStarted+0x1a>
    18b0:	0c c0       	rjmp	.+24     	; 0x18ca <SYS_TimerStarted+0x2c>
    18b2:	8e 17       	cp	r24, r30
    18b4:	9f 07       	cpc	r25, r31
    18b6:	59 f0       	breq	.+22     	; 0x18ce <SYS_TimerStarted+0x30>
    18b8:	01 90       	ld	r0, Z+
    18ba:	f0 81       	ld	r31, Z
    18bc:	e0 2d       	mov	r30, r0
    18be:	30 97       	sbiw	r30, 0x00	; 0
    18c0:	c1 f7       	brne	.-16     	; 0x18b2 <SYS_TimerStarted+0x14>
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	08 95       	ret
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	08 95       	ret
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	08 95       	ret
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	08 95       	ret

000018d2 <SYS_TimerStart>:
    18d2:	cf 93       	push	r28
    18d4:	df 93       	push	r29
    18d6:	ec 01       	movw	r28, r24
    18d8:	e2 df       	rcall	.-60     	; 0x189e <SYS_TimerStarted>
    18da:	81 11       	cpse	r24, r1
    18dc:	02 c0       	rjmp	.+4      	; 0x18e2 <SYS_TimerStart+0x10>
    18de:	ce 01       	movw	r24, r28
    18e0:	75 df       	rcall	.-278    	; 0x17cc <placeTimer>
    18e2:	df 91       	pop	r29
    18e4:	cf 91       	pop	r28
    18e6:	08 95       	ret

000018e8 <SYS_TimerTaskHandler>:
    18e8:	cf 92       	push	r12
    18ea:	df 92       	push	r13
    18ec:	ef 92       	push	r14
    18ee:	ff 92       	push	r15
    18f0:	cf 93       	push	r28
    18f2:	df 93       	push	r29
    18f4:	80 91 8c 1f 	lds	r24, 0x1F8C	; 0x801f8c <halTimerIrqCount>
    18f8:	88 23       	and	r24, r24
    18fa:	09 f4       	brne	.+2      	; 0x18fe <SYS_TimerTaskHandler+0x16>
    18fc:	59 c0       	rjmp	.+178    	; 0x19b0 <SYS_TimerTaskHandler+0xc8>
    18fe:	8f b7       	in	r24, 0x3f	; 63
    1900:	f8 94       	cli
    1902:	c0 90 8c 1f 	lds	r12, 0x1F8C	; 0x801f8c <halTimerIrqCount>
    1906:	10 92 8c 1f 	sts	0x1F8C, r1	; 0x801f8c <halTimerIrqCount>
    190a:	8f bf       	out	0x3f, r24	; 63
    190c:	d1 2c       	mov	r13, r1
    190e:	e1 2c       	mov	r14, r1
    1910:	f1 2c       	mov	r15, r1
    1912:	cc 0c       	add	r12, r12
    1914:	dd 1c       	adc	r13, r13
    1916:	ee 1c       	adc	r14, r14
    1918:	ff 1c       	adc	r15, r15
    191a:	d7 01       	movw	r26, r14
    191c:	c6 01       	movw	r24, r12
    191e:	88 0f       	add	r24, r24
    1920:	99 1f       	adc	r25, r25
    1922:	aa 1f       	adc	r26, r26
    1924:	bb 1f       	adc	r27, r27
    1926:	88 0f       	add	r24, r24
    1928:	99 1f       	adc	r25, r25
    192a:	aa 1f       	adc	r26, r26
    192c:	bb 1f       	adc	r27, r27
    192e:	c8 0e       	add	r12, r24
    1930:	d9 1e       	adc	r13, r25
    1932:	ea 1e       	adc	r14, r26
    1934:	fb 1e       	adc	r15, r27
    1936:	c0 91 8a 1f 	lds	r28, 0x1F8A	; 0x801f8a <timers>
    193a:	d0 91 8b 1f 	lds	r29, 0x1F8B	; 0x801f8b <timers+0x1>
    193e:	20 97       	sbiw	r28, 0x00	; 0
    1940:	b9 f1       	breq	.+110    	; 0x19b0 <SYS_TimerTaskHandler+0xc8>
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	9b 81       	ldd	r25, Y+3	; 0x03
    1946:	ac 81       	ldd	r26, Y+4	; 0x04
    1948:	bd 81       	ldd	r27, Y+5	; 0x05
    194a:	c8 16       	cp	r12, r24
    194c:	d9 06       	cpc	r13, r25
    194e:	ea 06       	cpc	r14, r26
    1950:	fb 06       	cpc	r15, r27
    1952:	10 f1       	brcs	.+68     	; 0x1998 <SYS_TimerTaskHandler+0xb0>
    1954:	c8 1a       	sub	r12, r24
    1956:	d9 0a       	sbc	r13, r25
    1958:	ea 0a       	sbc	r14, r26
    195a:	fb 0a       	sbc	r15, r27
    195c:	88 81       	ld	r24, Y
    195e:	99 81       	ldd	r25, Y+1	; 0x01
    1960:	90 93 8b 1f 	sts	0x1F8B, r25	; 0x801f8b <timers+0x1>
    1964:	80 93 8a 1f 	sts	0x1F8A, r24	; 0x801f8a <timers>
    1968:	8a 85       	ldd	r24, Y+10	; 0x0a
    196a:	81 30       	cpi	r24, 0x01	; 1
    196c:	11 f4       	brne	.+4      	; 0x1972 <SYS_TimerTaskHandler+0x8a>
    196e:	ce 01       	movw	r24, r28
    1970:	2d df       	rcall	.-422    	; 0x17cc <placeTimer>
    1972:	eb 85       	ldd	r30, Y+11	; 0x0b
    1974:	fc 85       	ldd	r31, Y+12	; 0x0c
    1976:	ce 01       	movw	r24, r28
    1978:	19 95       	eicall
    197a:	c0 91 8a 1f 	lds	r28, 0x1F8A	; 0x801f8a <timers>
    197e:	d0 91 8b 1f 	lds	r29, 0x1F8B	; 0x801f8b <timers+0x1>
    1982:	20 97       	sbiw	r28, 0x00	; 0
    1984:	a9 f0       	breq	.+42     	; 0x19b0 <SYS_TimerTaskHandler+0xc8>
    1986:	8a 81       	ldd	r24, Y+2	; 0x02
    1988:	9b 81       	ldd	r25, Y+3	; 0x03
    198a:	ac 81       	ldd	r26, Y+4	; 0x04
    198c:	bd 81       	ldd	r27, Y+5	; 0x05
    198e:	c8 16       	cp	r12, r24
    1990:	d9 06       	cpc	r13, r25
    1992:	ea 06       	cpc	r14, r26
    1994:	fb 06       	cpc	r15, r27
    1996:	f0 f6       	brcc	.-68     	; 0x1954 <SYS_TimerTaskHandler+0x6c>
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	9b 81       	ldd	r25, Y+3	; 0x03
    199c:	ac 81       	ldd	r26, Y+4	; 0x04
    199e:	bd 81       	ldd	r27, Y+5	; 0x05
    19a0:	8c 19       	sub	r24, r12
    19a2:	9d 09       	sbc	r25, r13
    19a4:	ae 09       	sbc	r26, r14
    19a6:	bf 09       	sbc	r27, r15
    19a8:	8a 83       	std	Y+2, r24	; 0x02
    19aa:	9b 83       	std	Y+3, r25	; 0x03
    19ac:	ac 83       	std	Y+4, r26	; 0x04
    19ae:	bd 83       	std	Y+5, r27	; 0x05
    19b0:	df 91       	pop	r29
    19b2:	cf 91       	pop	r28
    19b4:	ff 90       	pop	r15
    19b6:	ef 90       	pop	r14
    19b8:	df 90       	pop	r13
    19ba:	cf 90       	pop	r12
    19bc:	08 95       	ret

000019be <__udivmodsi4>:
    19be:	a1 e2       	ldi	r26, 0x21	; 33
    19c0:	1a 2e       	mov	r1, r26
    19c2:	aa 1b       	sub	r26, r26
    19c4:	bb 1b       	sub	r27, r27
    19c6:	fd 01       	movw	r30, r26
    19c8:	0d c0       	rjmp	.+26     	; 0x19e4 <__udivmodsi4_ep>

000019ca <__udivmodsi4_loop>:
    19ca:	aa 1f       	adc	r26, r26
    19cc:	bb 1f       	adc	r27, r27
    19ce:	ee 1f       	adc	r30, r30
    19d0:	ff 1f       	adc	r31, r31
    19d2:	a2 17       	cp	r26, r18
    19d4:	b3 07       	cpc	r27, r19
    19d6:	e4 07       	cpc	r30, r20
    19d8:	f5 07       	cpc	r31, r21
    19da:	20 f0       	brcs	.+8      	; 0x19e4 <__udivmodsi4_ep>
    19dc:	a2 1b       	sub	r26, r18
    19de:	b3 0b       	sbc	r27, r19
    19e0:	e4 0b       	sbc	r30, r20
    19e2:	f5 0b       	sbc	r31, r21

000019e4 <__udivmodsi4_ep>:
    19e4:	66 1f       	adc	r22, r22
    19e6:	77 1f       	adc	r23, r23
    19e8:	88 1f       	adc	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	1a 94       	dec	r1
    19ee:	69 f7       	brne	.-38     	; 0x19ca <__udivmodsi4_loop>
    19f0:	60 95       	com	r22
    19f2:	70 95       	com	r23
    19f4:	80 95       	com	r24
    19f6:	90 95       	com	r25
    19f8:	9b 01       	movw	r18, r22
    19fa:	ac 01       	movw	r20, r24
    19fc:	bd 01       	movw	r22, r26
    19fe:	cf 01       	movw	r24, r30
    1a00:	08 95       	ret

00001a02 <do_rand>:
    1a02:	8f 92       	push	r8
    1a04:	9f 92       	push	r9
    1a06:	af 92       	push	r10
    1a08:	bf 92       	push	r11
    1a0a:	cf 92       	push	r12
    1a0c:	df 92       	push	r13
    1a0e:	ef 92       	push	r14
    1a10:	ff 92       	push	r15
    1a12:	cf 93       	push	r28
    1a14:	df 93       	push	r29
    1a16:	ec 01       	movw	r28, r24
    1a18:	68 81       	ld	r22, Y
    1a1a:	79 81       	ldd	r23, Y+1	; 0x01
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a20:	61 15       	cp	r22, r1
    1a22:	71 05       	cpc	r23, r1
    1a24:	81 05       	cpc	r24, r1
    1a26:	91 05       	cpc	r25, r1
    1a28:	21 f4       	brne	.+8      	; 0x1a32 <do_rand+0x30>
    1a2a:	64 e2       	ldi	r22, 0x24	; 36
    1a2c:	79 ed       	ldi	r23, 0xD9	; 217
    1a2e:	8b e5       	ldi	r24, 0x5B	; 91
    1a30:	97 e0       	ldi	r25, 0x07	; 7
    1a32:	2d e1       	ldi	r18, 0x1D	; 29
    1a34:	33 ef       	ldi	r19, 0xF3	; 243
    1a36:	41 e0       	ldi	r20, 0x01	; 1
    1a38:	50 e0       	ldi	r21, 0x00	; 0
    1a3a:	41 d0       	rcall	.+130    	; 0x1abe <__divmodsi4>
    1a3c:	49 01       	movw	r8, r18
    1a3e:	5a 01       	movw	r10, r20
    1a40:	9b 01       	movw	r18, r22
    1a42:	ac 01       	movw	r20, r24
    1a44:	a7 ea       	ldi	r26, 0xA7	; 167
    1a46:	b1 e4       	ldi	r27, 0x41	; 65
    1a48:	56 d0       	rcall	.+172    	; 0x1af6 <__muluhisi3>
    1a4a:	6b 01       	movw	r12, r22
    1a4c:	7c 01       	movw	r14, r24
    1a4e:	ac ee       	ldi	r26, 0xEC	; 236
    1a50:	b4 ef       	ldi	r27, 0xF4	; 244
    1a52:	a5 01       	movw	r20, r10
    1a54:	94 01       	movw	r18, r8
    1a56:	5b d0       	rcall	.+182    	; 0x1b0e <__mulohisi3>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	8c 0d       	add	r24, r12
    1a5e:	9d 1d       	adc	r25, r13
    1a60:	ae 1d       	adc	r26, r14
    1a62:	bf 1d       	adc	r27, r15
    1a64:	b7 ff       	sbrs	r27, 7
    1a66:	03 c0       	rjmp	.+6      	; 0x1a6e <do_rand+0x6c>
    1a68:	01 97       	sbiw	r24, 0x01	; 1
    1a6a:	a1 09       	sbc	r26, r1
    1a6c:	b0 48       	sbci	r27, 0x80	; 128
    1a6e:	88 83       	st	Y, r24
    1a70:	99 83       	std	Y+1, r25	; 0x01
    1a72:	aa 83       	std	Y+2, r26	; 0x02
    1a74:	bb 83       	std	Y+3, r27	; 0x03
    1a76:	9f 77       	andi	r25, 0x7F	; 127
    1a78:	df 91       	pop	r29
    1a7a:	cf 91       	pop	r28
    1a7c:	ff 90       	pop	r15
    1a7e:	ef 90       	pop	r14
    1a80:	df 90       	pop	r13
    1a82:	cf 90       	pop	r12
    1a84:	bf 90       	pop	r11
    1a86:	af 90       	pop	r10
    1a88:	9f 90       	pop	r9
    1a8a:	8f 90       	pop	r8
    1a8c:	08 95       	ret

00001a8e <rand_r>:
    1a8e:	b9 cf       	rjmp	.-142    	; 0x1a02 <do_rand>

00001a90 <rand>:
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	92 e0       	ldi	r25, 0x02	; 2
    1a94:	b6 cf       	rjmp	.-148    	; 0x1a02 <do_rand>

00001a96 <srand>:
    1a96:	a0 e0       	ldi	r26, 0x00	; 0
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    1a9e:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1aa2:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    1aa6:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    1aaa:	08 95       	ret

00001aac <memcpy>:
    1aac:	fb 01       	movw	r30, r22
    1aae:	dc 01       	movw	r26, r24
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <memcpy+0xa>
    1ab2:	01 90       	ld	r0, Z+
    1ab4:	0d 92       	st	X+, r0
    1ab6:	41 50       	subi	r20, 0x01	; 1
    1ab8:	50 40       	sbci	r21, 0x00	; 0
    1aba:	d8 f7       	brcc	.-10     	; 0x1ab2 <memcpy+0x6>
    1abc:	08 95       	ret

00001abe <__divmodsi4>:
    1abe:	05 2e       	mov	r0, r21
    1ac0:	97 fb       	bst	r25, 7
    1ac2:	16 f4       	brtc	.+4      	; 0x1ac8 <__divmodsi4+0xa>
    1ac4:	00 94       	com	r0
    1ac6:	0f d0       	rcall	.+30     	; 0x1ae6 <__negsi2>
    1ac8:	57 fd       	sbrc	r21, 7
    1aca:	05 d0       	rcall	.+10     	; 0x1ad6 <__divmodsi4_neg2>
    1acc:	78 df       	rcall	.-272    	; 0x19be <__udivmodsi4>
    1ace:	07 fc       	sbrc	r0, 7
    1ad0:	02 d0       	rcall	.+4      	; 0x1ad6 <__divmodsi4_neg2>
    1ad2:	46 f4       	brtc	.+16     	; 0x1ae4 <__divmodsi4_exit>
    1ad4:	08 c0       	rjmp	.+16     	; 0x1ae6 <__negsi2>

00001ad6 <__divmodsi4_neg2>:
    1ad6:	50 95       	com	r21
    1ad8:	40 95       	com	r20
    1ada:	30 95       	com	r19
    1adc:	21 95       	neg	r18
    1ade:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae0:	4f 4f       	sbci	r20, 0xFF	; 255
    1ae2:	5f 4f       	sbci	r21, 0xFF	; 255

00001ae4 <__divmodsi4_exit>:
    1ae4:	08 95       	ret

00001ae6 <__negsi2>:
    1ae6:	90 95       	com	r25
    1ae8:	80 95       	com	r24
    1aea:	70 95       	com	r23
    1aec:	61 95       	neg	r22
    1aee:	7f 4f       	sbci	r23, 0xFF	; 255
    1af0:	8f 4f       	sbci	r24, 0xFF	; 255
    1af2:	9f 4f       	sbci	r25, 0xFF	; 255
    1af4:	08 95       	ret

00001af6 <__muluhisi3>:
    1af6:	0f d0       	rcall	.+30     	; 0x1b16 <__umulhisi3>
    1af8:	a5 9f       	mul	r26, r21
    1afa:	90 0d       	add	r25, r0
    1afc:	b4 9f       	mul	r27, r20
    1afe:	90 0d       	add	r25, r0
    1b00:	a4 9f       	mul	r26, r20
    1b02:	80 0d       	add	r24, r0
    1b04:	91 1d       	adc	r25, r1
    1b06:	11 24       	eor	r1, r1
    1b08:	08 95       	ret

00001b0a <__mulshisi3>:
    1b0a:	b7 ff       	sbrs	r27, 7
    1b0c:	f4 cf       	rjmp	.-24     	; 0x1af6 <__muluhisi3>

00001b0e <__mulohisi3>:
    1b0e:	f3 df       	rcall	.-26     	; 0x1af6 <__muluhisi3>
    1b10:	82 1b       	sub	r24, r18
    1b12:	93 0b       	sbc	r25, r19
    1b14:	08 95       	ret

00001b16 <__umulhisi3>:
    1b16:	a2 9f       	mul	r26, r18
    1b18:	b0 01       	movw	r22, r0
    1b1a:	b3 9f       	mul	r27, r19
    1b1c:	c0 01       	movw	r24, r0
    1b1e:	a3 9f       	mul	r26, r19
    1b20:	70 0d       	add	r23, r0
    1b22:	81 1d       	adc	r24, r1
    1b24:	11 24       	eor	r1, r1
    1b26:	91 1d       	adc	r25, r1
    1b28:	b2 9f       	mul	r27, r18
    1b2a:	70 0d       	add	r23, r0
    1b2c:	81 1d       	adc	r24, r1
    1b2e:	11 24       	eor	r1, r1
    1b30:	91 1d       	adc	r25, r1
    1b32:	08 95       	ret

00001b34 <_exit>:
    1b34:	f8 94       	cli

00001b36 <__stop_program>:
    1b36:	ff cf       	rjmp	.-2      	; 0x1b36 <__stop_program>
