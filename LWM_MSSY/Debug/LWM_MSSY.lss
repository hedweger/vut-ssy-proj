
LWM_MSSY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800200  00001c76  00001d0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001d90  00800242  00800242  00001d4c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d4c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000448  00000000  00000000  00001dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000064a4  00000000  00000000  00002204  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d15  00000000  00000000  000086a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002715  00000000  00000000  0000b3bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a28  00000000  00000000  0000dad4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001fd7  00000000  00000000  0000e4fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000026c2  00000000  00000000  000104d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000488  00000000  00000000  00012b95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
       2:	00 00       	nop
       4:	b7 c0       	rjmp	.+366    	; 0x174 <__bad_interrupt>
       6:	00 00       	nop
       8:	b5 c0       	rjmp	.+362    	; 0x174 <__bad_interrupt>
       a:	00 00       	nop
       c:	b3 c0       	rjmp	.+358    	; 0x174 <__bad_interrupt>
       e:	00 00       	nop
      10:	b1 c0       	rjmp	.+354    	; 0x174 <__bad_interrupt>
      12:	00 00       	nop
      14:	af c0       	rjmp	.+350    	; 0x174 <__bad_interrupt>
      16:	00 00       	nop
      18:	ad c0       	rjmp	.+346    	; 0x174 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ab c0       	rjmp	.+342    	; 0x174 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a9 c0       	rjmp	.+338    	; 0x174 <__bad_interrupt>
      22:	00 00       	nop
      24:	a7 c0       	rjmp	.+334    	; 0x174 <__bad_interrupt>
      26:	00 00       	nop
      28:	a5 c0       	rjmp	.+330    	; 0x174 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a3 c0       	rjmp	.+326    	; 0x174 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a1 c0       	rjmp	.+322    	; 0x174 <__bad_interrupt>
      32:	00 00       	nop
      34:	fc c1       	rjmp	.+1016   	; 0x42e <__vector_13>
      36:	00 00       	nop
      38:	9d c0       	rjmp	.+314    	; 0x174 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9b c0       	rjmp	.+310    	; 0x174 <__bad_interrupt>
      3e:	00 00       	nop
      40:	99 c0       	rjmp	.+306    	; 0x174 <__bad_interrupt>
      42:	00 00       	nop
      44:	97 c0       	rjmp	.+302    	; 0x174 <__bad_interrupt>
      46:	00 00       	nop
      48:	95 c0       	rjmp	.+298    	; 0x174 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	93 c0       	rjmp	.+294    	; 0x174 <__bad_interrupt>
      4e:	00 00       	nop
      50:	91 c0       	rjmp	.+290    	; 0x174 <__bad_interrupt>
      52:	00 00       	nop
      54:	8f c0       	rjmp	.+286    	; 0x174 <__bad_interrupt>
      56:	00 00       	nop
      58:	8d c0       	rjmp	.+282    	; 0x174 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8b c0       	rjmp	.+278    	; 0x174 <__bad_interrupt>
      5e:	00 00       	nop
      60:	89 c0       	rjmp	.+274    	; 0x174 <__bad_interrupt>
      62:	00 00       	nop
      64:	87 c0       	rjmp	.+270    	; 0x174 <__bad_interrupt>
      66:	00 00       	nop
      68:	85 c0       	rjmp	.+266    	; 0x174 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	83 c0       	rjmp	.+262    	; 0x174 <__bad_interrupt>
      6e:	00 00       	nop
      70:	81 c0       	rjmp	.+258    	; 0x174 <__bad_interrupt>
      72:	00 00       	nop
      74:	7f c0       	rjmp	.+254    	; 0x174 <__bad_interrupt>
      76:	00 00       	nop
      78:	7d c0       	rjmp	.+250    	; 0x174 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7b c0       	rjmp	.+246    	; 0x174 <__bad_interrupt>
      7e:	00 00       	nop
      80:	79 c0       	rjmp	.+242    	; 0x174 <__bad_interrupt>
      82:	00 00       	nop
      84:	77 c0       	rjmp	.+238    	; 0x174 <__bad_interrupt>
      86:	00 00       	nop
      88:	75 c0       	rjmp	.+234    	; 0x174 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	73 c0       	rjmp	.+230    	; 0x174 <__bad_interrupt>
      8e:	00 00       	nop
      90:	83 c2       	rjmp	.+1286   	; 0x598 <__vector_36>
      92:	00 00       	nop
      94:	65 c2       	rjmp	.+1226   	; 0x560 <__vector_37>
      96:	00 00       	nop
      98:	6d c0       	rjmp	.+218    	; 0x174 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6b c0       	rjmp	.+214    	; 0x174 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	69 c0       	rjmp	.+210    	; 0x174 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	67 c0       	rjmp	.+206    	; 0x174 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b1 c1       	rjmp	.+866    	; 0x40c <__vector_42>
      aa:	00 00       	nop
      ac:	63 c0       	rjmp	.+198    	; 0x174 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	61 c0       	rjmp	.+194    	; 0x174 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5f c0       	rjmp	.+190    	; 0x174 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5d c0       	rjmp	.+186    	; 0x174 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5b c0       	rjmp	.+182    	; 0x174 <__bad_interrupt>
      be:	00 00       	nop
      c0:	59 c0       	rjmp	.+178    	; 0x174 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	57 c0       	rjmp	.+174    	; 0x174 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	55 c0       	rjmp	.+170    	; 0x174 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	53 c0       	rjmp	.+166    	; 0x174 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	51 c0       	rjmp	.+162    	; 0x174 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4f c0       	rjmp	.+158    	; 0x174 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4d c0       	rjmp	.+154    	; 0x174 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4b c0       	rjmp	.+150    	; 0x174 <__bad_interrupt>
      de:	00 00       	nop
      e0:	49 c0       	rjmp	.+146    	; 0x174 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	47 c0       	rjmp	.+142    	; 0x174 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	45 c0       	rjmp	.+138    	; 0x174 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	43 c0       	rjmp	.+134    	; 0x174 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	41 c0       	rjmp	.+130    	; 0x174 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	3f c0       	rjmp	.+126    	; 0x174 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	3d c0       	rjmp	.+122    	; 0x174 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	3b c0       	rjmp	.+118    	; 0x174 <__bad_interrupt>
      fe:	00 00       	nop
     100:	39 c0       	rjmp	.+114    	; 0x174 <__bad_interrupt>
     102:	00 00       	nop
     104:	37 c0       	rjmp	.+110    	; 0x174 <__bad_interrupt>
     106:	00 00       	nop
     108:	35 c0       	rjmp	.+106    	; 0x174 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	33 c0       	rjmp	.+102    	; 0x174 <__bad_interrupt>
     10e:	00 00       	nop
     110:	31 c0       	rjmp	.+98     	; 0x174 <__bad_interrupt>
     112:	00 00       	nop
     114:	2f c0       	rjmp	.+94     	; 0x174 <__bad_interrupt>
     116:	00 00       	nop
     118:	2d c0       	rjmp	.+90     	; 0x174 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2b c0       	rjmp	.+86     	; 0x174 <__bad_interrupt>
     11e:	00 00       	nop
     120:	29 c0       	rjmp	.+82     	; 0x174 <__bad_interrupt>
     122:	00 00       	nop
     124:	27 c0       	rjmp	.+78     	; 0x174 <__bad_interrupt>
     126:	00 00       	nop
     128:	25 c0       	rjmp	.+74     	; 0x174 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	23 c0       	rjmp	.+70     	; 0x174 <__bad_interrupt>
     12e:	00 00       	nop
     130:	21 c0       	rjmp	.+66     	; 0x174 <__bad_interrupt>
	...

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf ef       	ldi	r28, 0xFF	; 255
     13a:	d1 e8       	ldi	r29, 0x81	; 129
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
     144:	12 e0       	ldi	r17, 0x02	; 2
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b2 e0       	ldi	r27, 0x02	; 2
     14a:	e6 e7       	ldi	r30, 0x76	; 118
     14c:	fc e1       	ldi	r31, 0x1C	; 28
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	0b bf       	out	0x3b, r16	; 59
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
     154:	07 90       	elpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	a2 34       	cpi	r26, 0x42	; 66
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
     15e:	2f e1       	ldi	r18, 0x1F	; 31
     160:	a2 e4       	ldi	r26, 0x42	; 66
     162:	b2 e0       	ldi	r27, 0x02	; 2
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	a2 3d       	cpi	r26, 0xD2	; 210
     16a:	b2 07       	cpc	r27, r18
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	12 d1       	rcall	.+548    	; 0x394 <main>
     170:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <_exit>

00000174 <__bad_interrupt>:
     174:	45 cf       	rjmp	.-374    	; 0x0 <__vectors>

00000176 <APP_dataConf>:
}

void APP_timerHandler(SYS_Timer_t *timer) {
  char test[] = "SYSLOG: timer is being reset";
  for (int i = 0; strlen(test); i++) {
    HAL_UartWriteByte(test[i]);
     176:	08 95       	ret

00000178 <HAL_UartBytesReceived>:
static uint8_t appMsgBuffer[NWK_MAX_PAYLOAD_SIZE - sizeof(AppMsg_t)];

static RouteTable_t routeTable[ROUTE_TABLE_SIZE];
static uint8_t routeTablePtr = 0;

void HAL_UartBytesReceived(uint16_t bytes) { HAL_UartWriteString(bytes); }
     178:	e5 c1       	rjmp	.+970    	; 0x544 <HAL_UartWriteString>
     17a:	08 95       	ret

0000017c <APP_dataSend>:

void APP_dataSend(AppMsgType_t msgType, uint8_t addr) {
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	1f 92       	push	r1
     182:	cd b7       	in	r28, 0x3d	; 61
     184:	de b7       	in	r29, 0x3e	; 62
     186:	69 83       	std	Y+1, r22	; 0x01
  RouteTable_t route = routeTable[addr];
     188:	70 e0       	ldi	r23, 0x00	; 0
     18a:	fb 01       	movw	r30, r22
     18c:	ee 0f       	add	r30, r30
     18e:	ff 1f       	adc	r31, r31
     190:	e6 0f       	add	r30, r22
     192:	f7 1f       	adc	r31, r23
     194:	ee 0f       	add	r30, r30
     196:	ff 1f       	adc	r31, r31
     198:	ed 5b       	subi	r30, 0xBD	; 189
     19a:	fd 4f       	sbci	r31, 0xFD	; 253
     19c:	20 81       	ld	r18, Z
     19e:	31 81       	ldd	r19, Z+1	; 0x01
     1a0:	92 81       	ldd	r25, Z+2	; 0x02
  switch (msgType) {
     1a2:	87 30       	cpi	r24, 0x07	; 7
     1a4:	61 f0       	breq	.+24     	; 0x1be <APP_dataSend+0x42>
     1a6:	89 30       	cpi	r24, 0x09	; 9
     1a8:	91 f4       	brne	.+36     	; 0x1ce <APP_dataSend+0x52>
  case OFFER:
    dataReq.data = &addr;
     1aa:	e0 eb       	ldi	r30, 0xB0	; 176
     1ac:	f8 e0       	ldi	r31, 0x08	; 8
     1ae:	ae 01       	movw	r20, r28
     1b0:	4f 5f       	subi	r20, 0xFF	; 255
     1b2:	5f 4f       	sbci	r21, 0xFF	; 255
     1b4:	53 87       	std	Z+11, r21	; 0x0b
     1b6:	42 87       	std	Z+10, r20	; 0x0a
    dataReq.size = sizeof(uint8_t);
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	84 87       	std	Z+12, r24	; 0x0c
    break;
     1bc:	08 c0       	rjmp	.+16     	; 0x1ce <APP_dataSend+0x52>
  case APPDATA:
    dataReq.data = &"data";
     1be:	e0 eb       	ldi	r30, 0xB0	; 176
     1c0:	f8 e0       	ldi	r31, 0x08	; 8
     1c2:	41 e2       	ldi	r20, 0x21	; 33
     1c4:	52 e0       	ldi	r21, 0x02	; 2
     1c6:	53 87       	std	Z+11, r21	; 0x0b
     1c8:	42 87       	std	Z+10, r20	; 0x0a
    dataReq.size = sizeof(dataReq.data);
     1ca:	82 e0       	ldi	r24, 0x02	; 2
     1cc:	84 87       	std	Z+12, r24	; 0x0c
    break;
  }

  dataReq.dstAddr = route.addr;
     1ce:	e0 eb       	ldi	r30, 0xB0	; 176
     1d0:	f8 e0       	ldi	r31, 0x08	; 8
     1d2:	36 83       	std	Z+6, r19	; 0x06
     1d4:	25 83       	std	Z+5, r18	; 0x05
  dataReq.dstEndpoint = route.endpoint;
     1d6:	97 83       	std	Z+7, r25	; 0x07
  dataReq.srcEndpoint = route.endpoint;
     1d8:	90 87       	std	Z+8, r25	; 0x08
  dataReq.options = NWK_OPT_ENABLE_SECURITY;
     1da:	82 e0       	ldi	r24, 0x02	; 2
     1dc:	81 87       	std	Z+9, r24	; 0x09
  dataReq.confirm = APP_dataConf;
     1de:	8b eb       	ldi	r24, 0xBB	; 187
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	96 87       	std	Z+14, r25	; 0x0e
     1e4:	85 87       	std	Z+13, r24	; 0x0d
  NWK_DataReq(&dataReq);
     1e6:	cf 01       	movw	r24, r30
     1e8:	cb d2       	rcall	.+1430   	; 0x780 <NWK_DataReq>

  uartBufferPtr = 0;
  dataReqBusy = true;
}
     1ea:	0f 90       	pop	r0
     1ec:	df 91       	pop	r29
     1ee:	cf 91       	pop	r28
     1f0:	08 95       	ret

000001f2 <APP_pushAddr>:
 * Should only be called when the server offers the config,
 * on accept from client, the in_use flag needs to be set,
 * otherwise the server will rewrite the entry on next pass.
 * The route table has 65535 entries
 */
uint16_t APP_pushAddr(uint8_t endpoint, uint8_t *data) {
     1f2:	cf 93       	push	r28
     1f4:	df 93       	push	r29
     1f6:	48 2f       	mov	r20, r24
  if (routeTable[routeTablePtr].in_use) {
     1f8:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <__data_end>
     1fc:	29 2f       	mov	r18, r25
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	f9 01       	movw	r30, r18
     202:	ee 0f       	add	r30, r30
     204:	ff 1f       	adc	r31, r31
     206:	e2 0f       	add	r30, r18
     208:	f3 1f       	adc	r31, r19
     20a:	ee 0f       	add	r30, r30
     20c:	ff 1f       	adc	r31, r31
     20e:	ed 5b       	subi	r30, 0xBD	; 189
     210:	fd 4f       	sbci	r31, 0xFD	; 253
     212:	85 81       	ldd	r24, Z+5	; 0x05
     214:	88 23       	and	r24, r24
     216:	31 f0       	breq	.+12     	; 0x224 <APP_pushAddr+0x32>
     218:	84 2f       	mov	r24, r20
    routeTablePtr++;
     21a:	9f 5f       	subi	r25, 0xFF	; 255
     21c:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <__data_end>
    return APP_pushAddr(endpoint, data);
     220:	e8 df       	rcall	.-48     	; 0x1f2 <APP_pushAddr>
     222:	1c c0       	rjmp	.+56     	; 0x25c <APP_pushAddr+0x6a>
  }

  routeTable[routeTablePtr].addr = routeTablePtr;
     224:	89 2f       	mov	r24, r25
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	f9 01       	movw	r30, r18
     22a:	ee 0f       	add	r30, r30
     22c:	ff 1f       	adc	r31, r31
     22e:	df 01       	movw	r26, r30
     230:	a2 0f       	add	r26, r18
     232:	b3 1f       	adc	r27, r19
     234:	aa 0f       	add	r26, r26
     236:	bb 1f       	adc	r27, r27
     238:	ad 5b       	subi	r26, 0xBD	; 189
     23a:	bd 4f       	sbci	r27, 0xFD	; 253
     23c:	11 96       	adiw	r26, 0x01	; 1
     23e:	9c 93       	st	X, r25
     240:	8e 93       	st	-X, r24
  routeTable[routeTablePtr].endpoint = endpoint;
     242:	12 96       	adiw	r26, 0x02	; 2
     244:	4c 93       	st	X, r20
     246:	12 97       	sbiw	r26, 0x02	; 2
  routeTable[routeTablePtr].sleeping = false;
     248:	14 96       	adiw	r26, 0x04	; 4
     24a:	1c 92       	st	X, r1
     24c:	14 97       	sbiw	r26, 0x04	; 4
  routeTable[routeTablePtr].type = (SensorType_t)(*data);
     24e:	eb 01       	movw	r28, r22
     250:	48 81       	ld	r20, Y
     252:	13 96       	adiw	r26, 0x03	; 3
     254:	4c 93       	st	X, r20
     256:	13 97       	sbiw	r26, 0x03	; 3
  // in_use only goes active on APP_ACK from client
  routeTable[routeTablePtr].in_use = false;
     258:	fd 01       	movw	r30, r26
     25a:	15 82       	std	Z+5, r1	; 0x05
  return routeTablePtr;
}
     25c:	df 91       	pop	r29
     25e:	cf 91       	pop	r28
     260:	08 95       	ret

00000262 <APP_dataRecv>:

bool APP_dataRecv(NWK_DataInd_t *ind) {
     262:	0f 93       	push	r16
     264:	1f 93       	push	r17
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
     26a:	ec 01       	movw	r28, r24
  AppMsg_t *recv = (AppMsg_t *)ind->data;
     26c:	0f 81       	ldd	r16, Y+7	; 0x07
     26e:	18 85       	ldd	r17, Y+8	; 0x08
     */
    APP_dataSend(APPDATA, ind->srcAddr);
    break;
  }
#else if DESIGNATION == 0 // server
  switch (recv->msgType) {
     270:	d8 01       	movw	r26, r16
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	84 30       	cpi	r24, 0x04	; 4
     278:	09 f4       	brne	.+2      	; 0x27c <APP_dataRecv+0x1a>
     27a:	57 c0       	rjmp	.+174    	; 0x32a <APP_dataRecv+0xc8>
     27c:	20 f4       	brcc	.+8      	; 0x286 <APP_dataRecv+0x24>
     27e:	82 30       	cpi	r24, 0x02	; 2
     280:	08 f0       	brcs	.+2      	; 0x284 <APP_dataRecv+0x22>
     282:	47 c0       	rjmp	.+142    	; 0x312 <APP_dataRecv+0xb0>
     284:	69 c0       	rjmp	.+210    	; 0x358 <APP_dataRecv+0xf6>
     286:	86 30       	cpi	r24, 0x06	; 6
     288:	b9 f1       	breq	.+110    	; 0x2f8 <APP_dataRecv+0x96>
     28a:	40 f1       	brcs	.+80     	; 0x2dc <APP_dataRecv+0x7a>
     28c:	87 30       	cpi	r24, 0x07	; 7
     28e:	09 f0       	breq	.+2      	; 0x292 <APP_dataRecv+0x30>
     290:	63 c0       	rjmp	.+198    	; 0x358 <APP_dataRecv+0xf6>
  case APPDATA:
    routeTable[ind->srcAddr].sleeping = true;
     292:	88 81       	ld	r24, Y
     294:	99 81       	ldd	r25, Y+1	; 0x01
     296:	fc 01       	movw	r30, r24
     298:	ee 0f       	add	r30, r30
     29a:	ff 1f       	adc	r31, r31
     29c:	e8 0f       	add	r30, r24
     29e:	f9 1f       	adc	r31, r25
     2a0:	ee 0f       	add	r30, r30
     2a2:	ff 1f       	adc	r31, r31
     2a4:	ed 5b       	subi	r30, 0xBD	; 189
     2a6:	fd 4f       	sbci	r31, 0xFD	; 253
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	84 83       	std	Z+4, r24	; 0x04
    /*
     * Place to handle receiving data from clients.
     */
    for (int i = 0; i < recv->size; i++) {
     2ac:	f8 01       	movw	r30, r16
     2ae:	80 81       	ld	r24, Z
     2b0:	88 23       	and	r24, r24
     2b2:	09 f4       	brne	.+2      	; 0x2b6 <APP_dataRecv+0x54>
     2b4:	52 c0       	rjmp	.+164    	; 0x35a <APP_dataRecv+0xf8>
     2b6:	c0 e0       	ldi	r28, 0x00	; 0
     2b8:	d0 e0       	ldi	r29, 0x00	; 0
      HAL_UartWriteByte(recv->data[i]);
     2ba:	d8 01       	movw	r26, r16
     2bc:	13 96       	adiw	r26, 0x03	; 3
     2be:	ed 91       	ld	r30, X+
     2c0:	fc 91       	ld	r31, X
     2c2:	14 97       	sbiw	r26, 0x04	; 4
     2c4:	ec 0f       	add	r30, r28
     2c6:	fd 1f       	adc	r31, r29
     2c8:	80 81       	ld	r24, Z
     2ca:	15 d1       	rcall	.+554    	; 0x4f6 <HAL_UartWriteByte>
  case APPDATA:
    routeTable[ind->srcAddr].sleeping = true;
    /*
     * Place to handle receiving data from clients.
     */
    for (int i = 0; i < recv->size; i++) {
     2cc:	21 96       	adiw	r28, 0x01	; 1
     2ce:	f8 01       	movw	r30, r16
     2d0:	80 81       	ld	r24, Z
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	c8 17       	cp	r28, r24
     2d6:	d9 07       	cpc	r29, r25
     2d8:	84 f3       	brlt	.-32     	; 0x2ba <APP_dataRecv+0x58>
     2da:	3f c0       	rjmp	.+126    	; 0x35a <APP_dataRecv+0xf8>
      HAL_UartWriteByte(recv->data[i]);
    }
    break;
  case APP_SLEEP:
    routeTable[ind->srcAddr].sleeping = true;
     2dc:	88 81       	ld	r24, Y
     2de:	99 81       	ldd	r25, Y+1	; 0x01
     2e0:	fc 01       	movw	r30, r24
     2e2:	ee 0f       	add	r30, r30
     2e4:	ff 1f       	adc	r31, r31
     2e6:	e8 0f       	add	r30, r24
     2e8:	f9 1f       	adc	r31, r25
     2ea:	ee 0f       	add	r30, r30
     2ec:	ff 1f       	adc	r31, r31
     2ee:	ed 5b       	subi	r30, 0xBD	; 189
     2f0:	fd 4f       	sbci	r31, 0xFD	; 253
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	84 83       	std	Z+4, r24	; 0x04
    break;
     2f6:	31 c0       	rjmp	.+98     	; 0x35a <APP_dataRecv+0xf8>
  case RECONNECT:
    routeTable[ind->srcAddr].sleeping = false;
     2f8:	88 81       	ld	r24, Y
     2fa:	99 81       	ldd	r25, Y+1	; 0x01
     2fc:	fc 01       	movw	r30, r24
     2fe:	ee 0f       	add	r30, r30
     300:	ff 1f       	adc	r31, r31
     302:	e8 0f       	add	r30, r24
     304:	f9 1f       	adc	r31, r25
     306:	ee 0f       	add	r30, r30
     308:	ff 1f       	adc	r31, r31
     30a:	ed 5b       	subi	r30, 0xBD	; 189
     30c:	fd 4f       	sbci	r31, 0xFD	; 253
     30e:	14 82       	std	Z+4, r1	; 0x04
    break;
     310:	24 c0       	rjmp	.+72     	; 0x35a <APP_dataRecv+0xf8>
     * not evil.
     * Also, I presume that clients will not
     * request new adresses once they receive
     * one.
     */
    routeTablePtr++;
     312:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__data_end>
     316:	8f 5f       	subi	r24, 0xFF	; 255
     318:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__data_end>
    int16_t addr = APP_pushAddr(ind->srcEndpoint, ind->data);
     31c:	b8 01       	movw	r22, r16
     31e:	8c 81       	ldd	r24, Y+4	; 0x04
     320:	68 df       	rcall	.-304    	; 0x1f2 <APP_pushAddr>
    APP_dataSend(OFFER, addr);
     322:	68 2f       	mov	r22, r24
     324:	89 e0       	ldi	r24, 0x09	; 9
     326:	2a df       	rcall	.-428    	; 0x17c <APP_dataSend>
    break;
     328:	18 c0       	rjmp	.+48     	; 0x35a <APP_dataRecv+0xf8>
     * Therefore, it is presumed the REQUEST message
     * will be sent with the server-assigned adress,
     * so the server can set their adress as in use
     * in the routing table.
     */
    routeTable[ind->srcAddr].in_use = true;
     32a:	88 81       	ld	r24, Y
     32c:	99 81       	ldd	r25, Y+1	; 0x01
     32e:	fc 01       	movw	r30, r24
     330:	ee 0f       	add	r30, r30
     332:	ff 1f       	adc	r31, r31
     334:	e8 0f       	add	r30, r24
     336:	f9 1f       	adc	r31, r25
     338:	ee 0f       	add	r30, r30
     33a:	ff 1f       	adc	r31, r31
     33c:	ed 5b       	subi	r30, 0xBD	; 189
     33e:	fd 4f       	sbci	r31, 0xFD	; 253
     340:	81 e0       	ldi	r24, 0x01	; 1
    HAL_UartWriteString("Accepted client on addr.: ");
     342:	85 83       	std	Z+5, r24	; 0x05
     344:	86 e2       	ldi	r24, 0x26	; 38
     346:	92 e0       	ldi	r25, 0x02	; 2
    HAL_UartWriteString(ind->srcAddr);
     348:	fd d0       	rcall	.+506    	; 0x544 <HAL_UartWriteString>
     34a:	88 81       	ld	r24, Y
     34c:	99 81       	ldd	r25, Y+1	; 0x01
    APP_dataSend(APP_ACK, ind->srcAddr);
     34e:	fa d0       	rcall	.+500    	; 0x544 <HAL_UartWriteString>
     350:	68 81       	ld	r22, Y
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	13 df       	rcall	.-474    	; 0x17c <APP_dataSend>
    break;
     356:	01 c0       	rjmp	.+2      	; 0x35a <APP_dataRecv+0xf8>
  default:
    // HAL_UartWriteString("Unknown msg type: ");
    HAL_UartWriteByte(recv->msgType);
     358:	ce d0       	rcall	.+412    	; 0x4f6 <HAL_UartWriteByte>
     35a:	81 e0       	ldi	r24, 0x01	; 1
    break;
  }
#endif

  return true;
}
     35c:	df 91       	pop	r29
     35e:	cf 91       	pop	r28
     360:	1f 91       	pop	r17
     362:	0f 91       	pop	r16
     364:	08 95       	ret

00000366 <APP_init>:
     366:	80 e0       	ldi	r24, 0x00	; 0
  }
  (void)timer;
}

void APP_init(void) {
  NWK_SetAddr(APP_ADDR);
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	c7 d1       	rcall	.+910    	; 0x6fa <NWK_SetAddr>
  NWK_SetPanId(APP_PANID);
     36c:	80 e8       	ldi	r24, 0x80	; 128
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	cb d1       	rcall	.+918    	; 0x708 <NWK_SetPanId>
  PHY_SetChannel(APP_CHANNEL);
     372:	8f e0       	ldi	r24, 0x0F	; 15
     374:	0e 94 a8 0b 	call	0x1750	; 0x1750 <PHY_SetChannel>
  PHY_SetRxState(true);
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	0e 94 a4 0b 	call	0x1748	; 0x1748 <PHY_SetRxState>

  NWK_OpenEndpoint(APP_ENDPOINT, APP_dataRecv);
     37e:	61 e3       	ldi	r22, 0x31	; 49
     380:	71 e0       	ldi	r23, 0x01	; 1
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	c8 d1       	rcall	.+912    	; 0x716 <NWK_OpenEndpoint>
  HAL_BoardInit();

  timer.interval = APP_FLUSH_TIMER_INTERVAL;
  timer.mode = SYS_TIMER_INTERVAL_MODE;
  timer.handler = APP_timerHandler;
  dataReq.data = dataReqBuffer;
     386:	83 e4       	ldi	r24, 0x43	; 67
     388:	98 e0       	ldi	r25, 0x08	; 8
     38a:	90 93 bb 08 	sts	0x08BB, r25	; 0x8008bb <dataReq+0xb>
     38e:	80 93 ba 08 	sts	0x08BA, r24	; 0x8008ba <dataReq+0xa>
     392:	08 95       	ret

00000394 <main>:
		break;
	}
}

int main(void) {
	SYS_Init();
     394:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <SYS_Init>
	HAL_UartInit(38400);
     398:	60 e0       	ldi	r22, 0x00	; 0
     39a:	76 e9       	ldi	r23, 0x96	; 150
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	55 d0       	rcall	.+170    	; 0x44c <HAL_UartInit>

static void APP_TaskHandler(void) {
	switch (appState) {
		case INIT: {
			APP_init();
			appState = IDLE;
     3a2:	c1 e0       	ldi	r28, 0x01	; 1
int main(void) {
	SYS_Init();
	HAL_UartInit(38400);

	while (1) {
		SYS_TaskHandler();
     3a4:	0e 94 80 0c 	call	0x1900	; 0x1900 <SYS_TaskHandler>
		HAL_UartTaskHandler();
     3a8:	4e d1       	rcall	.+668    	; 0x646 <HAL_UartTaskHandler>
#include "sys.h"

static AppState_t appState;

static void APP_TaskHandler(void) {
	switch (appState) {
     3aa:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <appState>
     3ae:	81 11       	cpse	r24, r1
		case INIT: {
			APP_init();
     3b0:	f9 cf       	rjmp	.-14     	; 0x3a4 <main+0x10>
     3b2:	d9 df       	rcall	.-78     	; 0x366 <APP_init>
			appState = IDLE;
     3b4:	c0 93 c1 08 	sts	0x08C1, r28	; 0x8008c1 <appState>
     3b8:	f5 cf       	rjmp	.-22     	; 0x3a4 <main+0x10>

000003ba <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
     3ba:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	f8 94       	cli
     3c0:	a8 95       	wdr
     3c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     3c6:	88 61       	ori	r24, 0x18	; 24
     3c8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     3cc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     3d0:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
     3d2:	e1 e6       	ldi	r30, 0x61	; 97
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	80 e8       	ldi	r24, 0x80	; 128
     3d8:	80 83       	st	Z, r24
  CLKPR = 0;
     3da:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
     3dc:	78 94       	sei

  HAL_TimerInit();
     3de:	01 c0       	rjmp	.+2      	; 0x3e2 <HAL_TimerInit>
     3e0:	08 95       	ret

000003e2 <HAL_TimerInit>:

  TIFR4 = (1 << OCF4B);
  while (0 == (TIFR4 & (1 << OCF4B)));

  PRAGMA(diag_default=Pa082);
}
     3e2:	10 92 a9 1f 	sts	0x1FA9, r1	; 0x801fa9 <halTimerIrqCount>
     3e6:	80 e1       	ldi	r24, 0x10	; 16
     3e8:	97 e2       	ldi	r25, 0x27	; 39
     3ea:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
     3ee:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
     3f2:	e1 ea       	ldi	r30, 0xA1	; 161
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	88 e0       	ldi	r24, 0x08	; 8
     3f8:	80 83       	st	Z, r24
     3fa:	80 81       	ld	r24, Z
     3fc:	82 60       	ori	r24, 0x02	; 2
     3fe:	80 83       	st	Z, r24
     400:	e2 e7       	ldi	r30, 0x72	; 114
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	80 81       	ld	r24, Z
     406:	82 60       	ori	r24, 0x02	; 2
     408:	80 83       	st	Z, r24
     40a:	08 95       	ret

0000040c <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
     40c:	1f 92       	push	r1
     40e:	0f 92       	push	r0
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	0f 92       	push	r0
     414:	11 24       	eor	r1, r1
     416:	8f 93       	push	r24
  halTimerIrqCount++;
     418:	80 91 a9 1f 	lds	r24, 0x1FA9	; 0x801fa9 <halTimerIrqCount>
     41c:	8f 5f       	subi	r24, 0xFF	; 255
     41e:	80 93 a9 1f 	sts	0x1FA9, r24	; 0x801fa9 <halTimerIrqCount>
}
     422:	8f 91       	pop	r24
     424:	0f 90       	pop	r0
     426:	0f be       	out	0x3f, r0	; 63
     428:	0f 90       	pop	r0
     42a:	1f 90       	pop	r1
     42c:	18 95       	reti

0000042e <__vector_13>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
     42e:	1f 92       	push	r1
     430:	0f 92       	push	r0
     432:	0f b6       	in	r0, 0x3f	; 63
     434:	0f 92       	push	r0
     436:	11 24       	eor	r1, r1
     438:	8f 93       	push	r24
  halSleepTimerEvent = true;
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	80 93 c2 08 	sts	0x08C2, r24	; 0x8008c2 <halSleepTimerEvent>
}
     440:	8f 91       	pop	r24
     442:	0f 90       	pop	r0
     444:	0f be       	out	0x3f, r0	; 63
     446:	0f 90       	pop	r0
     448:	1f 90       	pop	r1
     44a:	18 95       	reti

0000044c <HAL_UartInit>:
    rxFifo.bytes--;
  ATOMIC_SECTION_LEAVE
  PRAGMA(diag_default=Pa082);

  return byte;
}
     44c:	dc 01       	movw	r26, r24
     44e:	cb 01       	movw	r24, r22
     450:	88 0f       	add	r24, r24
     452:	99 1f       	adc	r25, r25
     454:	aa 1f       	adc	r26, r26
     456:	bb 1f       	adc	r27, r27
     458:	88 0f       	add	r24, r24
     45a:	99 1f       	adc	r25, r25
     45c:	aa 1f       	adc	r26, r26
     45e:	bb 1f       	adc	r27, r27
     460:	9c 01       	movw	r18, r24
     462:	ad 01       	movw	r20, r26
     464:	22 0f       	add	r18, r18
     466:	33 1f       	adc	r19, r19
     468:	44 1f       	adc	r20, r20
     46a:	55 1f       	adc	r21, r21
     46c:	22 0f       	add	r18, r18
     46e:	33 1f       	adc	r19, r19
     470:	44 1f       	adc	r20, r20
     472:	55 1f       	adc	r21, r21
     474:	60 e0       	ldi	r22, 0x00	; 0
     476:	74 e2       	ldi	r23, 0x24	; 36
     478:	84 ef       	ldi	r24, 0xF4	; 244
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__udivmodsi4>
     480:	ba 01       	movw	r22, r20
     482:	a9 01       	movw	r20, r18
     484:	41 50       	subi	r20, 0x01	; 1
     486:	51 09       	sbc	r21, r1
     488:	61 09       	sbc	r22, r1
     48a:	71 09       	sbc	r23, r1
     48c:	bb 27       	eor	r27, r27
     48e:	a7 2f       	mov	r26, r23
     490:	96 2f       	mov	r25, r22
     492:	85 2f       	mov	r24, r21
     494:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
     498:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
     49c:	82 e0       	ldi	r24, 0x02	; 2
     49e:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
     4a2:	88 e9       	ldi	r24, 0x98	; 152
     4a4:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
     4a8:	86 e0       	ldi	r24, 0x06	; 6
     4aa:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>
     4ae:	e1 ef       	ldi	r30, 0xF1	; 241
     4b0:	fb e0       	ldi	r31, 0x0B	; 11
     4b2:	80 e6       	ldi	r24, 0x60	; 96
     4b4:	9a e0       	ldi	r25, 0x0A	; 10
     4b6:	91 87       	std	Z+9, r25	; 0x09
     4b8:	80 87       	std	Z+8, r24	; 0x08
     4ba:	80 e9       	ldi	r24, 0x90	; 144
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	95 83       	std	Z+5, r25	; 0x05
     4c0:	84 83       	std	Z+4, r24	; 0x04
     4c2:	17 82       	std	Z+7, r1	; 0x07
     4c4:	16 82       	std	Z+6, r1	; 0x06
     4c6:	11 82       	std	Z+1, r1	; 0x01
     4c8:	10 82       	st	Z, r1
     4ca:	13 82       	std	Z+3, r1	; 0x03
     4cc:	12 82       	std	Z+2, r1	; 0x02
     4ce:	e6 e5       	ldi	r30, 0x56	; 86
     4d0:	fa e0       	ldi	r31, 0x0A	; 10
     4d2:	25 ec       	ldi	r18, 0xC5	; 197
     4d4:	38 e0       	ldi	r19, 0x08	; 8
     4d6:	31 87       	std	Z+9, r19	; 0x09
     4d8:	20 87       	std	Z+8, r18	; 0x08
     4da:	95 83       	std	Z+5, r25	; 0x05
     4dc:	84 83       	std	Z+4, r24	; 0x04
     4de:	17 82       	std	Z+7, r1	; 0x07
     4e0:	16 82       	std	Z+6, r1	; 0x06
     4e2:	11 82       	std	Z+1, r1	; 0x01
     4e4:	10 82       	st	Z, r1
     4e6:	13 82       	std	Z+3, r1	; 0x03
     4e8:	12 82       	std	Z+2, r1	; 0x02
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <udrEmpty>
     4f0:	10 92 c3 08 	sts	0x08C3, r1	; 0x8008c3 <newData>
     4f4:	08 95       	ret

000004f6 <HAL_UartWriteByte>:
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	e1 ef       	ldi	r30, 0xF1	; 241
     4fc:	fb e0       	ldi	r31, 0x0B	; 11
     4fe:	26 81       	ldd	r18, Z+6	; 0x06
     500:	37 81       	ldd	r19, Z+7	; 0x07
     502:	64 81       	ldd	r22, Z+4	; 0x04
     504:	75 81       	ldd	r23, Z+5	; 0x05
     506:	26 17       	cp	r18, r22
     508:	37 07       	cpc	r19, r23
     50a:	c9 f0       	breq	.+50     	; 0x53e <HAL_UartWriteByte+0x48>
     50c:	c0 85       	ldd	r28, Z+8	; 0x08
     50e:	d1 85       	ldd	r29, Z+9	; 0x09
     510:	42 81       	ldd	r20, Z+2	; 0x02
     512:	53 81       	ldd	r21, Z+3	; 0x03
     514:	da 01       	movw	r26, r20
     516:	11 96       	adiw	r26, 0x01	; 1
     518:	b3 83       	std	Z+3, r27	; 0x03
     51a:	a2 83       	std	Z+2, r26	; 0x02
     51c:	fe 01       	movw	r30, r28
     51e:	e4 0f       	add	r30, r20
     520:	f5 1f       	adc	r31, r21
     522:	80 83       	st	Z, r24
     524:	6a 17       	cp	r22, r26
     526:	7b 07       	cpc	r23, r27
     528:	21 f4       	brne	.+8      	; 0x532 <HAL_UartWriteByte+0x3c>
     52a:	10 92 f4 0b 	sts	0x0BF4, r1	; 0x800bf4 <txFifo+0x3>
     52e:	10 92 f3 0b 	sts	0x0BF3, r1	; 0x800bf3 <txFifo+0x2>
     532:	2f 5f       	subi	r18, 0xFF	; 255
     534:	3f 4f       	sbci	r19, 0xFF	; 255
     536:	30 93 f8 0b 	sts	0x0BF8, r19	; 0x800bf8 <txFifo+0x7>
     53a:	20 93 f7 0b 	sts	0x0BF7, r18	; 0x800bf7 <txFifo+0x6>
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	08 95       	ret

00000544 <HAL_UartWriteString>:
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	ec 01       	movw	r28, r24
     54a:	88 81       	ld	r24, Y
     54c:	88 23       	and	r24, r24
     54e:	29 f0       	breq	.+10     	; 0x55a <HAL_UartWriteString+0x16>
     550:	21 96       	adiw	r28, 0x01	; 1
     552:	d1 df       	rcall	.-94     	; 0x4f6 <HAL_UartWriteByte>
     554:	89 91       	ld	r24, Y+
     556:	81 11       	cpse	r24, r1
     558:	fc cf       	rjmp	.-8      	; 0x552 <HAL_UartWriteString+0xe>
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	08 95       	ret

00000560 <__vector_37>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
     560:	1f 92       	push	r1
     562:	0f 92       	push	r0
     564:	0f b6       	in	r0, 0x3f	; 63
     566:	0f 92       	push	r0
     568:	11 24       	eor	r1, r1
     56a:	0b b6       	in	r0, 0x3b	; 59
     56c:	0f 92       	push	r0
     56e:	8f 93       	push	r24
     570:	ef 93       	push	r30
     572:	ff 93       	push	r31
  udrEmpty = true;
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <udrEmpty>
  UCSRxB &= ~(1 << UDRIE1);
     57a:	e9 ec       	ldi	r30, 0xC9	; 201
     57c:	f0 e0       	ldi	r31, 0x00	; 0
     57e:	80 81       	ld	r24, Z
     580:	8f 7d       	andi	r24, 0xDF	; 223
     582:	80 83       	st	Z, r24
}
     584:	ff 91       	pop	r31
     586:	ef 91       	pop	r30
     588:	8f 91       	pop	r24
     58a:	0f 90       	pop	r0
     58c:	0b be       	out	0x3b, r0	; 59
     58e:	0f 90       	pop	r0
     590:	0f be       	out	0x3f, r0	; 63
     592:	0f 90       	pop	r0
     594:	1f 90       	pop	r1
     596:	18 95       	reti

00000598 <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
     598:	1f 92       	push	r1
     59a:	0f 92       	push	r0
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	0f 92       	push	r0
     5a0:	11 24       	eor	r1, r1
     5a2:	0b b6       	in	r0, 0x3b	; 59
     5a4:	0f 92       	push	r0
     5a6:	2f 93       	push	r18
     5a8:	3f 93       	push	r19
     5aa:	4f 93       	push	r20
     5ac:	5f 93       	push	r21
     5ae:	6f 93       	push	r22
     5b0:	7f 93       	push	r23
     5b2:	8f 93       	push	r24
     5b4:	9f 93       	push	r25
     5b6:	af 93       	push	r26
     5b8:	bf 93       	push	r27
     5ba:	ef 93       	push	r30
     5bc:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
     5be:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  uint8_t byte = UDRx;
     5c2:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
     5c6:	8c 71       	andi	r24, 0x1C	; 28
     5c8:	59 f5       	brne	.+86     	; 0x620 <__vector_36+0x88>
  {
    if (rxFifo.bytes == rxFifo.size)
     5ca:	e6 e5       	ldi	r30, 0x56	; 86
     5cc:	fa e0       	ldi	r31, 0x0A	; 10
     5ce:	46 81       	ldd	r20, Z+6	; 0x06
     5d0:	57 81       	ldd	r21, Z+7	; 0x07
     5d2:	84 81       	ldd	r24, Z+4	; 0x04
     5d4:	95 81       	ldd	r25, Z+5	; 0x05
     5d6:	48 17       	cp	r20, r24
     5d8:	59 07       	cpc	r21, r25
     5da:	11 f1       	breq	.+68     	; 0x620 <__vector_36+0x88>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
     5dc:	40 85       	ldd	r20, Z+8	; 0x08
     5de:	51 85       	ldd	r21, Z+9	; 0x09
     5e0:	82 81       	ldd	r24, Z+2	; 0x02
     5e2:	93 81       	ldd	r25, Z+3	; 0x03
     5e4:	bc 01       	movw	r22, r24
     5e6:	6f 5f       	subi	r22, 0xFF	; 255
     5e8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ea:	73 83       	std	Z+3, r23	; 0x03
     5ec:	62 83       	std	Z+2, r22	; 0x02
     5ee:	da 01       	movw	r26, r20
     5f0:	a8 0f       	add	r26, r24
     5f2:	b9 1f       	adc	r27, r25
     5f4:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
     5f6:	22 81       	ldd	r18, Z+2	; 0x02
     5f8:	33 81       	ldd	r19, Z+3	; 0x03
     5fa:	84 81       	ldd	r24, Z+4	; 0x04
     5fc:	95 81       	ldd	r25, Z+5	; 0x05
     5fe:	28 17       	cp	r18, r24
     600:	39 07       	cpc	r19, r25
     602:	21 f4       	brne	.+8      	; 0x60c <__vector_36+0x74>
      rxFifo.tail = 0;
     604:	10 92 59 0a 	sts	0x0A59, r1	; 0x800a59 <rxFifo+0x3>
     608:	10 92 58 0a 	sts	0x0A58, r1	; 0x800a58 <rxFifo+0x2>
    rxFifo.bytes++;
     60c:	e6 e5       	ldi	r30, 0x56	; 86
     60e:	fa e0       	ldi	r31, 0x0A	; 10
     610:	86 81       	ldd	r24, Z+6	; 0x06
     612:	97 81       	ldd	r25, Z+7	; 0x07
     614:	01 96       	adiw	r24, 0x01	; 1
     616:	97 83       	std	Z+7, r25	; 0x07
     618:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <newData>
  }

  PRAGMA(diag_default=Pa082);
}
     620:	ff 91       	pop	r31
     622:	ef 91       	pop	r30
     624:	bf 91       	pop	r27
     626:	af 91       	pop	r26
     628:	9f 91       	pop	r25
     62a:	8f 91       	pop	r24
     62c:	7f 91       	pop	r23
     62e:	6f 91       	pop	r22
     630:	5f 91       	pop	r21
     632:	4f 91       	pop	r20
     634:	3f 91       	pop	r19
     636:	2f 91       	pop	r18
     638:	0f 90       	pop	r0
     63a:	0b be       	out	0x3b, r0	; 59
     63c:	0f 90       	pop	r0
     63e:	0f be       	out	0x3f, r0	; 63
     640:	0f 90       	pop	r0
     642:	1f 90       	pop	r1
     644:	18 95       	reti

00000646 <HAL_UartTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
  if (txFifo.bytes && udrEmpty)
     646:	80 91 f7 0b 	lds	r24, 0x0BF7	; 0x800bf7 <txFifo+0x6>
     64a:	90 91 f8 0b 	lds	r25, 0x0BF8	; 0x800bf8 <txFifo+0x7>
     64e:	00 97       	sbiw	r24, 0x00	; 0
     650:	69 f1       	breq	.+90     	; 0x6ac <HAL_UartTaskHandler+0x66>
     652:	20 91 c4 08 	lds	r18, 0x08C4	; 0x8008c4 <udrEmpty>
     656:	22 23       	and	r18, r18
     658:	49 f1       	breq	.+82     	; 0x6ac <HAL_UartTaskHandler+0x66>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
     65a:	e1 ef       	ldi	r30, 0xF1	; 241
     65c:	fb e0       	ldi	r31, 0x0B	; 11
     65e:	60 85       	ldd	r22, Z+8	; 0x08
     660:	71 85       	ldd	r23, Z+9	; 0x09
     662:	20 81       	ld	r18, Z
     664:	31 81       	ldd	r19, Z+1	; 0x01
     666:	a9 01       	movw	r20, r18
     668:	4f 5f       	subi	r20, 0xFF	; 255
     66a:	5f 4f       	sbci	r21, 0xFF	; 255
     66c:	51 83       	std	Z+1, r21	; 0x01
     66e:	40 83       	st	Z, r20
     670:	db 01       	movw	r26, r22
     672:	a2 0f       	add	r26, r18
     674:	b3 1f       	adc	r27, r19
     676:	2c 91       	ld	r18, X
    if (txFifo.head == txFifo.size)
     678:	64 81       	ldd	r22, Z+4	; 0x04
     67a:	75 81       	ldd	r23, Z+5	; 0x05
     67c:	46 17       	cp	r20, r22
     67e:	57 07       	cpc	r21, r23
     680:	21 f4       	brne	.+8      	; 0x68a <HAL_UartTaskHandler+0x44>
      txFifo.head = 0;
     682:	10 92 f2 0b 	sts	0x0BF2, r1	; 0x800bf2 <txFifo+0x1>
     686:	10 92 f1 0b 	sts	0x0BF1, r1	; 0x800bf1 <txFifo>
    txFifo.bytes--;
     68a:	01 97       	sbiw	r24, 0x01	; 1
     68c:	90 93 f8 0b 	sts	0x0BF8, r25	; 0x800bf8 <txFifo+0x7>
     690:	80 93 f7 0b 	sts	0x0BF7, r24	; 0x800bf7 <txFifo+0x6>

    ATOMIC_SECTION_ENTER
     694:	9f b7       	in	r25, 0x3f	; 63
     696:	f8 94       	cli
      UDRx = byte;
     698:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
      UCSRxB |= (1 << UDRIE1);
     69c:	e9 ec       	ldi	r30, 0xC9	; 201
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	80 81       	ld	r24, Z
     6a2:	80 62       	ori	r24, 0x20	; 32
     6a4:	80 83       	st	Z, r24
      udrEmpty = false;
     6a6:	10 92 c4 08 	sts	0x08C4, r1	; 0x8008c4 <udrEmpty>
    ATOMIC_SECTION_LEAVE
     6aa:	9f bf       	out	0x3f, r25	; 63

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
     6ac:	2f b7       	in	r18, 0x3f	; 63
     6ae:	f8 94       	cli
      new = newData;
     6b0:	90 91 c3 08 	lds	r25, 0x08C3	; 0x8008c3 <newData>
      newData = false;
     6b4:	10 92 c3 08 	sts	0x08C3, r1	; 0x8008c3 <newData>
      bytes = rxFifo.bytes;
     6b8:	40 91 5c 0a 	lds	r20, 0x0A5C	; 0x800a5c <rxFifo+0x6>
     6bc:	50 91 5d 0a 	lds	r21, 0x0A5D	; 0x800a5d <rxFifo+0x7>
    ATOMIC_SECTION_LEAVE
     6c0:	2f bf       	out	0x3f, r18	; 63

    if (new)
     6c2:	99 23       	and	r25, r25
     6c4:	11 f0       	breq	.+4      	; 0x6ca <HAL_UartTaskHandler+0x84>
      HAL_UartBytesReceived(bytes);
     6c6:	ca 01       	movw	r24, r20
     6c8:	57 cd       	rjmp	.-1362   	; 0x178 <HAL_UartBytesReceived>
     6ca:	08 95       	ret

000006cc <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
     6cc:	ea ea       	ldi	r30, 0xAA	; 170
     6ce:	ff e1       	ldi	r31, 0x1F	; 31
     6d0:	14 82       	std	Z+4, r1	; 0x04
     6d2:	15 82       	std	Z+5, r1	; 0x05
     6d4:	11 82       	std	Z+1, r1	; 0x01
     6d6:	10 82       	st	Z, r1
     6d8:	17 a2       	std	Z+39, r1	; 0x27
     6da:	16 a2       	std	Z+38, r1	; 0x26
     6dc:	e0 eb       	ldi	r30, 0xB0	; 176
     6de:	ff e1       	ldi	r31, 0x1F	; 31
     6e0:	80 ed       	ldi	r24, 0xD0	; 208
     6e2:	9f e1       	ldi	r25, 0x1F	; 31
     6e4:	11 92       	st	Z+, r1
     6e6:	11 92       	st	Z+, r1
     6e8:	e8 17       	cp	r30, r24
     6ea:	f9 07       	cpc	r31, r25
     6ec:	d9 f7       	brne	.-10     	; 0x6e4 <NWK_Init+0x18>
     6ee:	42 d6       	rcall	.+3204   	; 0x1374 <nwkTxInit>
     6f0:	60 d3       	rcall	.+1728   	; 0xdb2 <nwkRxInit>
     6f2:	0d d1       	rcall	.+538    	; 0x90e <nwkFrameInit>
     6f4:	40 d0       	rcall	.+128    	; 0x776 <nwkDataReqInit>
     6f6:	92 c1       	rjmp	.+804    	; 0xa1c <nwkRouteInit>
     6f8:	08 95       	ret

000006fa <NWK_SetAddr>:
     6fa:	90 93 ab 1f 	sts	0x1FAB, r25	; 0x801fab <nwkIb+0x1>
     6fe:	80 93 aa 1f 	sts	0x1FAA, r24	; 0x801faa <nwkIb>
     702:	0c 94 be 0b 	jmp	0x177c	; 0x177c <PHY_SetShortAddr>
     706:	08 95       	ret

00000708 <NWK_SetPanId>:
     708:	90 93 ad 1f 	sts	0x1FAD, r25	; 0x801fad <nwkIb+0x3>
     70c:	80 93 ac 1f 	sts	0x1FAC, r24	; 0x801fac <nwkIb+0x2>
     710:	0c 94 ac 0b 	jmp	0x1758	; 0x1758 <PHY_SetPanId>
     714:	08 95       	ret

00000716 <NWK_OpenEndpoint>:
     716:	e8 2f       	mov	r30, r24
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	ee 0f       	add	r30, r30
     71c:	ff 1f       	adc	r31, r31
     71e:	e0 55       	subi	r30, 0x50	; 80
     720:	f0 4e       	sbci	r31, 0xE0	; 224
     722:	71 83       	std	Z+1, r23	; 0x01
     724:	60 83       	st	Z, r22
     726:	08 95       	ret

00000728 <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
     728:	8b d3       	rcall	.+1814   	; 0xe40 <nwkRxTaskHandler>
  nwkTxTaskHandler();
     72a:	20 d7       	rcall	.+3648   	; 0x156c <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
     72c:	4d c0       	rjmp	.+154    	; 0x7c8 <nwkDataReqTaskHandler>
     72e:	08 95       	ret

00000730 <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     730:	e0 91 fb 0b 	lds	r30, 0x0BFB	; 0x800bfb <nwkDataReqQueue>
     734:	f0 91 fc 0b 	lds	r31, 0x0BFC	; 0x800bfc <nwkDataReqQueue+0x1>
     738:	30 97       	sbiw	r30, 0x00	; 0
     73a:	d9 f0       	breq	.+54     	; 0x772 <nwkDataReqTxConf+0x42>
  {
    if (req->frame == frame)
     73c:	22 81       	ldd	r18, Z+2	; 0x02
     73e:	33 81       	ldd	r19, Z+3	; 0x03
     740:	82 17       	cp	r24, r18
     742:	93 07       	cpc	r25, r19
     744:	89 f4       	brne	.+34     	; 0x768 <nwkDataReqTxConf+0x38>
     746:	05 c0       	rjmp	.+10     	; 0x752 <nwkDataReqTxConf+0x22>
     748:	22 81       	ldd	r18, Z+2	; 0x02
     74a:	33 81       	ldd	r19, Z+3	; 0x03
     74c:	28 17       	cp	r18, r24
     74e:	39 07       	cpc	r19, r25
     750:	59 f4       	brne	.+22     	; 0x768 <nwkDataReqTxConf+0x38>
    {
      req->status = frame->tx.status;
     752:	dc 01       	movw	r26, r24
     754:	ad 57       	subi	r26, 0x7D	; 125
     756:	bf 4f       	sbci	r27, 0xFF	; 255
     758:	2c 91       	ld	r18, X
     75a:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
     75c:	13 96       	adiw	r26, 0x03	; 3
     75e:	2c 91       	ld	r18, X
     760:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
     762:	22 e0       	ldi	r18, 0x02	; 2
     764:	24 83       	std	Z+4, r18	; 0x04
      break;
     766:	05 c0       	rjmp	.+10     	; 0x772 <nwkDataReqTxConf+0x42>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     768:	01 90       	ld	r0, Z+
     76a:	f0 81       	ld	r31, Z
     76c:	e0 2d       	mov	r30, r0
     76e:	30 97       	sbiw	r30, 0x00	; 0
     770:	59 f7       	brne	.-42     	; 0x748 <nwkDataReqTxConf+0x18>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
     772:	11 c1       	rjmp	.+546    	; 0x996 <nwkFrameFree>
     774:	08 95       	ret

00000776 <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
     776:	10 92 fc 0b 	sts	0x0BFC, r1	; 0x800bfc <nwkDataReqQueue+0x1>
     77a:	10 92 fb 0b 	sts	0x0BFB, r1	; 0x800bfb <nwkDataReqQueue>
     77e:	08 95       	ret

00000780 <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     780:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
     782:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
     784:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
     786:	13 82       	std	Z+3, r1	; 0x03
     788:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
     78a:	aa ea       	ldi	r26, 0xAA	; 170
     78c:	bf e1       	ldi	r27, 0x1F	; 31
     78e:	96 96       	adiw	r26, 0x26	; 38
     790:	8d 91       	ld	r24, X+
     792:	9c 91       	ld	r25, X
     794:	97 97       	sbiw	r26, 0x27	; 39
     796:	01 96       	adiw	r24, 0x01	; 1
     798:	97 96       	adiw	r26, 0x27	; 39
     79a:	9c 93       	st	X, r25
     79c:	8e 93       	st	-X, r24
     79e:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
     7a0:	80 91 fb 0b 	lds	r24, 0x0BFB	; 0x800bfb <nwkDataReqQueue>
     7a4:	90 91 fc 0b 	lds	r25, 0x0BFC	; 0x800bfc <nwkDataReqQueue+0x1>
     7a8:	00 97       	sbiw	r24, 0x00	; 0
     7aa:	39 f4       	brne	.+14     	; 0x7ba <NWK_DataReq+0x3a>
  {
    req->next = NULL;
     7ac:	11 82       	std	Z+1, r1	; 0x01
     7ae:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
     7b0:	f0 93 fc 0b 	sts	0x0BFC, r31	; 0x800bfc <nwkDataReqQueue+0x1>
     7b4:	e0 93 fb 0b 	sts	0x0BFB, r30	; 0x800bfb <nwkDataReqQueue>
     7b8:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
     7ba:	91 83       	std	Z+1, r25	; 0x01
     7bc:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
     7be:	f0 93 fc 0b 	sts	0x0BFC, r31	; 0x800bfc <nwkDataReqQueue+0x1>
     7c2:	e0 93 fb 0b 	sts	0x0BFB, r30	; 0x800bfb <nwkDataReqQueue>
     7c6:	08 95       	ret

000007c8 <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     7d0:	e0 91 fb 0b 	lds	r30, 0x0BFB	; 0x800bfb <nwkDataReqQueue>
     7d4:	f0 91 fc 0b 	lds	r31, 0x0BFC	; 0x800bfc <nwkDataReqQueue+0x1>
     7d8:	30 97       	sbiw	r30, 0x00	; 0
     7da:	09 f4       	brne	.+2      	; 0x7de <nwkDataReqTaskHandler+0x16>
     7dc:	93 c0       	rjmp	.+294    	; 0x904 <nwkDataReqTaskHandler+0x13c>
     7de:	ef 01       	movw	r28, r30
  {
    switch (req->state)
     7e0:	8c 81       	ldd	r24, Y+4	; 0x04
     7e2:	88 23       	and	r24, r24
     7e4:	21 f0       	breq	.+8      	; 0x7ee <nwkDataReqTaskHandler+0x26>
     7e6:	82 30       	cpi	r24, 0x02	; 2
     7e8:	09 f4       	brne	.+2      	; 0x7ec <nwkDataReqTaskHandler+0x24>
     7ea:	66 c0       	rjmp	.+204    	; 0x8b8 <nwkDataReqTaskHandler+0xf0>
     7ec:	85 c0       	rjmp	.+266    	; 0x8f8 <nwkDataReqTaskHandler+0x130>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
     7ee:	9a d0       	rcall	.+308    	; 0x924 <nwkFrameAlloc>
     7f0:	8c 01       	movw	r16, r24
     7f2:	00 97       	sbiw	r24, 0x00	; 0
     7f4:	21 f4       	brne	.+8      	; 0x7fe <nwkDataReqTaskHandler+0x36>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
     7f6:	82 e0       	ldi	r24, 0x02	; 2
     7f8:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
     7fa:	8f 87       	std	Y+15, r24	; 0x0f
     7fc:	83 c0       	rjmp	.+262    	; 0x904 <nwkDataReqTaskHandler+0x13c>
    return;
  }

  req->frame = frame;
     7fe:	9b 83       	std	Y+3, r25	; 0x03
     800:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
     806:	f8 01       	movw	r30, r16
     808:	e9 57       	subi	r30, 0x79	; 121
     80a:	ff 4f       	sbci	r31, 0xFF	; 255
     80c:	88 e9       	ldi	r24, 0x98	; 152
     80e:	93 e0       	ldi	r25, 0x03	; 3
     810:	91 83       	std	Z+1, r25	; 0x01
     812:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
     814:	31 97       	sbiw	r30, 0x01	; 1
     816:	89 85       	ldd	r24, Y+9	; 0x09
     818:	82 fb       	bst	r24, 2
     81a:	88 27       	eor	r24, r24
     81c:	80 f9       	bld	r24, 0
     81e:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
     820:	99 85       	ldd	r25, Y+9	; 0x09
     822:	d8 01       	movw	r26, r16
     824:	1b 96       	adiw	r26, 0x0b	; 11
     826:	8c 91       	ld	r24, X
     828:	1b 97       	sbiw	r26, 0x0b	; 11
     82a:	90 fb       	bst	r25, 0
     82c:	80 f9       	bld	r24, 0
     82e:	1b 96       	adiw	r26, 0x0b	; 11
     830:	8c 93       	st	X, r24
     832:	1b 97       	sbiw	r26, 0x0b	; 11
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
     834:	99 85       	ldd	r25, Y+9	; 0x09
     836:	93 fb       	bst	r25, 3
     838:	99 27       	eor	r25, r25
     83a:	90 f9       	bld	r25, 0
     83c:	90 fb       	bst	r25, 0
     83e:	82 f9       	bld	r24, 2
     840:	1b 96       	adiw	r26, 0x0b	; 11
     842:	8c 93       	st	X, r24
     844:	1b 97       	sbiw	r26, 0x0b	; 11
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     846:	ea ea       	ldi	r30, 0xAA	; 170
     848:	ff e1       	ldi	r31, 0x1F	; 31
     84a:	84 81       	ldd	r24, Z+4	; 0x04
     84c:	8f 5f       	subi	r24, 0xFF	; 255
     84e:	84 83       	std	Z+4, r24	; 0x04
     850:	1c 96       	adiw	r26, 0x0c	; 12
     852:	8c 93       	st	X, r24
     854:	1c 97       	sbiw	r26, 0x0c	; 12
  frame->header.nwkSrcAddr = nwkIb.addr;
     856:	80 81       	ld	r24, Z
     858:	91 81       	ldd	r25, Z+1	; 0x01
     85a:	1e 96       	adiw	r26, 0x0e	; 14
     85c:	9c 93       	st	X, r25
     85e:	8e 93       	st	-X, r24
     860:	1d 97       	sbiw	r26, 0x0d	; 13
  frame->header.nwkDstAddr = req->dstAddr;
     862:	8d 81       	ldd	r24, Y+5	; 0x05
     864:	9e 81       	ldd	r25, Y+6	; 0x06
     866:	50 96       	adiw	r26, 0x10	; 16
     868:	9c 93       	st	X, r25
     86a:	8e 93       	st	-X, r24
     86c:	1f 97       	sbiw	r26, 0x0f	; 15
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
     86e:	88 85       	ldd	r24, Y+8	; 0x08
     870:	98 2f       	mov	r25, r24
     872:	9f 70       	andi	r25, 0x0F	; 15
     874:	51 96       	adiw	r26, 0x11	; 17
     876:	8c 91       	ld	r24, X
     878:	51 97       	sbiw	r26, 0x11	; 17
     87a:	80 7f       	andi	r24, 0xF0	; 240
     87c:	89 2b       	or	r24, r25
     87e:	51 96       	adiw	r26, 0x11	; 17
     880:	8c 93       	st	X, r24
     882:	51 97       	sbiw	r26, 0x11	; 17
  frame->header.nwkDstEndpoint = req->dstEndpoint;
     884:	9f 81       	ldd	r25, Y+7	; 0x07
     886:	92 95       	swap	r25
     888:	90 7f       	andi	r25, 0xF0	; 240
     88a:	8f 70       	andi	r24, 0x0F	; 15
     88c:	89 2b       	or	r24, r25
     88e:	51 96       	adiw	r26, 0x11	; 17
     890:	8c 93       	st	X, r24

  memcpy(frame->payload, req->data, req->size);
     892:	f8 01       	movw	r30, r16
     894:	ef 57       	subi	r30, 0x7F	; 127
     896:	ff 4f       	sbci	r31, 0xFF	; 255
     898:	4c 85       	ldd	r20, Y+12	; 0x0c
     89a:	50 e0       	ldi	r21, 0x00	; 0
     89c:	6a 85       	ldd	r22, Y+10	; 0x0a
     89e:	7b 85       	ldd	r23, Y+11	; 0x0b
     8a0:	80 81       	ld	r24, Z
     8a2:	91 81       	ldd	r25, Z+1	; 0x01
     8a4:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <memcpy>
  frame->size += req->size;
     8a8:	f8 01       	movw	r30, r16
     8aa:	91 81       	ldd	r25, Z+1	; 0x01
     8ac:	8c 85       	ldd	r24, Y+12	; 0x0c
     8ae:	89 0f       	add	r24, r25
     8b0:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
     8b2:	c8 01       	movw	r24, r16
     8b4:	82 d5       	rcall	.+2820   	; 0x13ba <nwkTxFrame>
     8b6:	26 c0       	rjmp	.+76     	; 0x904 <nwkDataReqTaskHandler+0x13c>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
     8b8:	ec 17       	cp	r30, r28
     8ba:	fd 07       	cpc	r31, r29
     8bc:	41 f4       	brne	.+16     	; 0x8ce <nwkDataReqTaskHandler+0x106>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
     8be:	80 81       	ld	r24, Z
     8c0:	91 81       	ldd	r25, Z+1	; 0x01
     8c2:	90 93 fc 0b 	sts	0x0BFC, r25	; 0x800bfc <nwkDataReqQueue+0x1>
     8c6:	80 93 fb 0b 	sts	0x0BFB, r24	; 0x800bfb <nwkDataReqQueue>
     8ca:	0a c0       	rjmp	.+20     	; 0x8e0 <nwkDataReqTaskHandler+0x118>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
     8cc:	fc 01       	movw	r30, r24
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
     8ce:	80 81       	ld	r24, Z
     8d0:	91 81       	ldd	r25, Z+1	; 0x01
     8d2:	8c 17       	cp	r24, r28
     8d4:	9d 07       	cpc	r25, r29
     8d6:	d1 f7       	brne	.-12     	; 0x8cc <nwkDataReqTaskHandler+0x104>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
     8d8:	88 81       	ld	r24, Y
     8da:	99 81       	ldd	r25, Y+1	; 0x01
     8dc:	91 83       	std	Z+1, r25	; 0x01
     8de:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
     8e0:	ea ea       	ldi	r30, 0xAA	; 170
     8e2:	ff e1       	ldi	r31, 0x1F	; 31
     8e4:	86 a1       	ldd	r24, Z+38	; 0x26
     8e6:	97 a1       	ldd	r25, Z+39	; 0x27
     8e8:	01 97       	sbiw	r24, 0x01	; 1
     8ea:	97 a3       	std	Z+39, r25	; 0x27
     8ec:	86 a3       	std	Z+38, r24	; 0x26
  req->confirm(req);
     8ee:	ed 85       	ldd	r30, Y+13	; 0x0d
     8f0:	fe 85       	ldd	r31, Y+14	; 0x0e
     8f2:	ce 01       	movw	r24, r28
     8f4:	19 95       	eicall
     8f6:	06 c0       	rjmp	.+12     	; 0x904 <nwkDataReqTaskHandler+0x13c>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     8f8:	09 90       	ld	r0, Y+
     8fa:	d8 81       	ld	r29, Y
     8fc:	c0 2d       	mov	r28, r0
     8fe:	20 97       	sbiw	r28, 0x00	; 0
     900:	09 f0       	breq	.+2      	; 0x904 <nwkDataReqTaskHandler+0x13c>
     902:	6e cf       	rjmp	.-292    	; 0x7e0 <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	1f 91       	pop	r17
     90a:	0f 91       	pop	r16
     90c:	08 95       	ret

0000090e <nwkFrameInit>:

/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
     90e:	ed ef       	ldi	r30, 0xFD	; 253
     910:	fb e0       	ldi	r31, 0x0B	; 11
     912:	8b e0       	ldi	r24, 0x0B	; 11
     914:	9c e1       	ldi	r25, 0x1C	; 28
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     916:	10 82       	st	Z, r1
     918:	e7 57       	subi	r30, 0x77	; 119
     91a:	ff 4f       	sbci	r31, 0xFF	; 255
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     91c:	e8 17       	cp	r30, r24
     91e:	f9 07       	cpc	r31, r25
     920:	d1 f7       	brne	.-12     	; 0x916 <nwkFrameInit+0x8>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
     922:	08 95       	ret

00000924 <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
     924:	80 91 fd 0b 	lds	r24, 0x0BFD	; 0x800bfd <nwkFrameFrames>
     928:	88 23       	and	r24, r24
     92a:	59 f0       	breq	.+22     	; 0x942 <nwkFrameAlloc+0x1e>
     92c:	e6 e8       	ldi	r30, 0x86	; 134
     92e:	fc e0       	ldi	r31, 0x0C	; 12
     930:	6b e0       	ldi	r22, 0x0B	; 11
     932:	7c e1       	ldi	r23, 0x1C	; 28
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	ac 01       	movw	r20, r24
     93a:	20 81       	ld	r18, Z
     93c:	21 11       	cpse	r18, r1
     93e:	22 c0       	rjmp	.+68     	; 0x984 <nwkFrameAlloc+0x60>
     940:	02 c0       	rjmp	.+4      	; 0x946 <nwkFrameAlloc+0x22>
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e0       	ldi	r21, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
     946:	69 e8       	ldi	r22, 0x89	; 137
     948:	64 9f       	mul	r22, r20
     94a:	90 01       	movw	r18, r0
     94c:	65 9f       	mul	r22, r21
     94e:	30 0d       	add	r19, r0
     950:	11 24       	eor	r1, r1
     952:	c9 01       	movw	r24, r18
     954:	83 50       	subi	r24, 0x03	; 3
     956:	94 4f       	sbci	r25, 0xF4	; 244
     958:	fc 01       	movw	r30, r24
     95a:	11 92       	st	Z+, r1
     95c:	6a 95       	dec	r22
     95e:	e9 f7       	brne	.-6      	; 0x95a <nwkFrameAlloc+0x36>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
     960:	40 e1       	ldi	r20, 0x10	; 16
     962:	fc 01       	movw	r30, r24
     964:	41 83       	std	Z+1, r20	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
     966:	ef 57       	subi	r30, 0x7F	; 127
     968:	ff 4f       	sbci	r31, 0xFF	; 255
     96a:	21 5f       	subi	r18, 0xF1	; 241
     96c:	33 4f       	sbci	r19, 0xF3	; 243
     96e:	31 83       	std	Z+1, r19	; 0x01
     970:	20 83       	st	Z, r18
      nwkIb.lock++;
     972:	ea ea       	ldi	r30, 0xAA	; 170
     974:	ff e1       	ldi	r31, 0x1F	; 31
     976:	26 a1       	ldd	r18, Z+38	; 0x26
     978:	37 a1       	ldd	r19, Z+39	; 0x27
     97a:	2f 5f       	subi	r18, 0xFF	; 255
     97c:	3f 4f       	sbci	r19, 0xFF	; 255
     97e:	37 a3       	std	Z+39, r19	; 0x27
     980:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
     982:	08 95       	ret
     984:	01 96       	adiw	r24, 0x01	; 1
     986:	e7 57       	subi	r30, 0x77	; 119
     988:	ff 4f       	sbci	r31, 0xFF	; 255
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     98a:	e6 17       	cp	r30, r22
     98c:	f7 07       	cpc	r31, r23
     98e:	a1 f6       	brne	.-88     	; 0x938 <nwkFrameAlloc+0x14>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	90 e0       	ldi	r25, 0x00	; 0
}
     994:	08 95       	ret

00000996 <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
     996:	fc 01       	movw	r30, r24
     998:	10 82       	st	Z, r1
  nwkIb.lock--;
     99a:	ea ea       	ldi	r30, 0xAA	; 170
     99c:	ff e1       	ldi	r31, 0x1F	; 31
     99e:	86 a1       	ldd	r24, Z+38	; 0x26
     9a0:	97 a1       	ldd	r25, Z+39	; 0x27
     9a2:	01 97       	sbiw	r24, 0x01	; 1
     9a4:	97 a3       	std	Z+39, r25	; 0x27
     9a6:	86 a3       	std	Z+38, r24	; 0x26
     9a8:	08 95       	ret

000009aa <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
     9aa:	00 97       	sbiw	r24, 0x00	; 0
     9ac:	41 f0       	breq	.+16     	; 0x9be <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
     9ae:	fc 01       	movw	r30, r24
     9b0:	e7 57       	subi	r30, 0x77	; 119
     9b2:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     9b4:	8c e1       	ldi	r24, 0x1C	; 28
     9b6:	eb 30       	cpi	r30, 0x0B	; 11
     9b8:	f8 07       	cpc	r31, r24
     9ba:	18 f0       	brcs	.+6      	; 0x9c2 <nwkFrameNext+0x18>
     9bc:	12 c0       	rjmp	.+36     	; 0x9e2 <nwkFrameNext+0x38>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
     9be:	ed ef       	ldi	r30, 0xFD	; 253
     9c0:	fb e0       	ldi	r31, 0x0B	; 11
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     9c2:	80 81       	ld	r24, Z
     9c4:	88 23       	and	r24, r24
     9c6:	21 f0       	breq	.+8      	; 0x9d0 <nwkFrameNext+0x26>
     9c8:	0f c0       	rjmp	.+30     	; 0x9e8 <nwkFrameNext+0x3e>
     9ca:	80 81       	ld	r24, Z
     9cc:	81 11       	cpse	r24, r1
     9ce:	0f c0       	rjmp	.+30     	; 0x9ee <nwkFrameNext+0x44>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     9d0:	e7 57       	subi	r30, 0x77	; 119
     9d2:	ff 4f       	sbci	r31, 0xFF	; 255
     9d4:	8c e1       	ldi	r24, 0x1C	; 28
     9d6:	eb 30       	cpi	r30, 0x0B	; 11
     9d8:	f8 07       	cpc	r31, r24
     9da:	b8 f3       	brcs	.-18     	; 0x9ca <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	08 95       	ret
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	08 95       	ret
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     9e8:	8e 2f       	mov	r24, r30
     9ea:	9f 2f       	mov	r25, r31
     9ec:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     9ee:	8e 2f       	mov	r24, r30
     9f0:	9f 2f       	mov	r25, r31
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
}
     9f2:	08 95       	ret

000009f4 <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
     9f4:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
     9f6:	dc 01       	movw	r26, r24
     9f8:	ad 57       	subi	r26, 0x7D	; 125
     9fa:	bf 4f       	sbci	r27, 0xFF	; 255
     9fc:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     9fe:	aa ea       	ldi	r26, 0xAA	; 170
     a00:	bf e1       	ldi	r27, 0x1F	; 31
     a02:	14 96       	adiw	r26, 0x04	; 4
     a04:	9c 91       	ld	r25, X
     a06:	14 97       	sbiw	r26, 0x04	; 4
     a08:	9f 5f       	subi	r25, 0xFF	; 255
     a0a:	14 96       	adiw	r26, 0x04	; 4
     a0c:	9c 93       	st	X, r25
     a0e:	14 97       	sbiw	r26, 0x04	; 4
     a10:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
     a12:	8d 91       	ld	r24, X+
     a14:	9c 91       	ld	r25, X
     a16:	96 87       	std	Z+14, r25	; 0x0e
     a18:	85 87       	std	Z+13, r24	; 0x0d
     a1a:	08 95       	ret

00000a1c <nwkRouteInit>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
     a1c:	ac e0       	ldi	r26, 0x0C	; 12
     a1e:	bc e1       	ldi	r27, 0x1C	; 28
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	4f ef       	ldi	r20, 0xFF	; 255
     a26:	5f ef       	ldi	r21, 0xFF	; 255
     a28:	11 96       	adiw	r26, 0x01	; 1
     a2a:	5c 93       	st	X, r21
     a2c:	4e 93       	st	-X, r20
     a2e:	fc 01       	movw	r30, r24
     a30:	ee 0f       	add	r30, r30
     a32:	ff 1f       	adc	r31, r31
     a34:	ee 0f       	add	r30, r30
     a36:	ff 1f       	adc	r31, r31
     a38:	ee 0f       	add	r30, r30
     a3a:	ff 1f       	adc	r31, r31
     a3c:	e8 1b       	sub	r30, r24
     a3e:	f9 0b       	sbc	r31, r25
     a40:	e5 5f       	subi	r30, 0xF5	; 245
     a42:	f3 4e       	sbci	r31, 0xE3	; 227
     a44:	20 81       	ld	r18, Z
     a46:	2e 7f       	andi	r18, 0xFE	; 254
     a48:	20 83       	st	Z, r18
     a4a:	14 96       	adiw	r26, 0x04	; 4
     a4c:	1c 92       	st	X, r1
     a4e:	14 97       	sbiw	r26, 0x04	; 4
     a50:	01 96       	adiw	r24, 0x01	; 1
     a52:	17 96       	adiw	r26, 0x07	; 7
     a54:	84 36       	cpi	r24, 0x64	; 100
     a56:	91 05       	cpc	r25, r1
     a58:	39 f7       	brne	.-50     	; 0xa28 <nwkRouteInit+0xc>
     a5a:	08 95       	ret

00000a5c <NWK_RouteFindEntry>:
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	ec e0       	ldi	r30, 0x0C	; 12
     a66:	fc e1       	ldi	r31, 0x1C	; 28
     a68:	20 e0       	ldi	r18, 0x00	; 0
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	06 2f       	mov	r16, r22
     a6e:	10 e0       	ldi	r17, 0x00	; 0
     a70:	40 81       	ld	r20, Z
     a72:	51 81       	ldd	r21, Z+1	; 0x01
     a74:	48 17       	cp	r20, r24
     a76:	59 07       	cpc	r21, r25
     a78:	b1 f4       	brne	.+44     	; 0xaa6 <NWK_RouteFindEntry+0x4a>
     a7a:	d9 01       	movw	r26, r18
     a7c:	aa 0f       	add	r26, r26
     a7e:	bb 1f       	adc	r27, r27
     a80:	aa 0f       	add	r26, r26
     a82:	bb 1f       	adc	r27, r27
     a84:	aa 0f       	add	r26, r26
     a86:	bb 1f       	adc	r27, r27
     a88:	a2 1b       	sub	r26, r18
     a8a:	b3 0b       	sbc	r27, r19
     a8c:	a5 5f       	subi	r26, 0xF5	; 245
     a8e:	b3 4e       	sbci	r27, 0xE3	; 227
     a90:	4c 91       	ld	r20, X
     a92:	46 95       	lsr	r20
     a94:	41 70       	andi	r20, 0x01	; 1
     a96:	c4 2f       	mov	r28, r20
     a98:	40 e0       	ldi	r20, 0x00	; 0
     a9a:	d4 2f       	mov	r29, r20
     a9c:	c0 17       	cp	r28, r16
     a9e:	d1 07       	cpc	r29, r17
     aa0:	11 f4       	brne	.+4      	; 0xaa6 <NWK_RouteFindEntry+0x4a>
     aa2:	cd 01       	movw	r24, r26
     aa4:	08 c0       	rjmp	.+16     	; 0xab6 <NWK_RouteFindEntry+0x5a>
     aa6:	2f 5f       	subi	r18, 0xFF	; 255
     aa8:	3f 4f       	sbci	r19, 0xFF	; 255
     aaa:	37 96       	adiw	r30, 0x07	; 7
     aac:	24 36       	cpi	r18, 0x64	; 100
     aae:	31 05       	cpc	r19, r1
     ab0:	f9 f6       	brne	.-66     	; 0xa70 <NWK_RouteFindEntry+0x14>
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	08 95       	ret

00000ac0 <NWK_RouteNewEntry>:
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	eb e0       	ldi	r30, 0x0B	; 11
     ac6:	fc e1       	ldi	r31, 0x1C	; 28
     ac8:	80 81       	ld	r24, Z
     aca:	80 fd       	sbrc	r24, 0
     acc:	0d c0       	rjmp	.+26     	; 0xae8 <NWK_RouteNewEntry+0x28>
     ace:	85 81       	ldd	r24, Z+5	; 0x05
     ad0:	88 23       	and	r24, r24
     ad2:	81 f0       	breq	.+32     	; 0xaf4 <NWK_RouteNewEntry+0x34>
     ad4:	10 97       	sbiw	r26, 0x00	; 0
     ad6:	39 f0       	breq	.+14     	; 0xae6 <NWK_RouteNewEntry+0x26>
     ad8:	15 96       	adiw	r26, 0x05	; 5
     ada:	9c 91       	ld	r25, X
     adc:	15 97       	sbiw	r26, 0x05	; 5
     ade:	89 17       	cp	r24, r25
     ae0:	18 f4       	brcc	.+6      	; 0xae8 <NWK_RouteNewEntry+0x28>
     ae2:	df 01       	movw	r26, r30
     ae4:	01 c0       	rjmp	.+2      	; 0xae8 <NWK_RouteNewEntry+0x28>
     ae6:	df 01       	movw	r26, r30
     ae8:	37 96       	adiw	r30, 0x07	; 7
     aea:	8e e1       	ldi	r24, 0x1E	; 30
     aec:	e7 3c       	cpi	r30, 0xC7	; 199
     aee:	f8 07       	cpc	r31, r24
     af0:	59 f7       	brne	.-42     	; 0xac8 <NWK_RouteNewEntry+0x8>
     af2:	fd 01       	movw	r30, r26
     af4:	80 81       	ld	r24, Z
     af6:	8d 70       	andi	r24, 0x0D	; 13
     af8:	80 63       	ori	r24, 0x30	; 48
     afa:	80 83       	st	Z, r24
     afc:	80 e8       	ldi	r24, 0x80	; 128
     afe:	85 83       	std	Z+5, r24	; 0x05
     b00:	cf 01       	movw	r24, r30
     b02:	08 95       	ret

00000b04 <NWK_RouteFreeEntry>:
     b04:	fc 01       	movw	r30, r24
     b06:	80 81       	ld	r24, Z
     b08:	80 fd       	sbrc	r24, 0
     b0a:	05 c0       	rjmp	.+10     	; 0xb16 <NWK_RouteFreeEntry+0x12>
     b0c:	8f ef       	ldi	r24, 0xFF	; 255
     b0e:	9f ef       	ldi	r25, 0xFF	; 255
     b10:	92 83       	std	Z+2, r25	; 0x02
     b12:	81 83       	std	Z+1, r24	; 0x01
     b14:	15 82       	std	Z+5, r1	; 0x05
     b16:	08 95       	ret

00000b18 <NWK_RouteNextHop>:
     b18:	a1 df       	rcall	.-190    	; 0xa5c <NWK_RouteFindEntry>
     b1a:	00 97       	sbiw	r24, 0x00	; 0
     b1c:	21 f0       	breq	.+8      	; 0xb26 <NWK_RouteNextHop+0xe>
     b1e:	fc 01       	movw	r30, r24
     b20:	83 81       	ldd	r24, Z+3	; 0x03
     b22:	94 81       	ldd	r25, Z+4	; 0x04
     b24:	08 95       	ret
     b26:	8f ef       	ldi	r24, 0xFF	; 255
     b28:	9f ef       	ldi	r25, 0xFF	; 255
     b2a:	08 95       	ret

00000b2c <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
     b2c:	97 df       	rcall	.-210    	; 0xa5c <NWK_RouteFindEntry>
  if (entry)
     b2e:	00 97       	sbiw	r24, 0x00	; 0
    NWK_RouteFreeEntry(entry);
     b30:	09 f0       	breq	.+2      	; 0xb34 <nwkRouteRemove+0x8>
     b32:	e8 cf       	rjmp	.-48     	; 0xb04 <NWK_RouteFreeEntry>
     b34:	08 95       	ret

00000b36 <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
     b40:	01 85       	ldd	r16, Z+9	; 0x09
     b42:	12 85       	ldd	r17, Z+10	; 0x0a
     b44:	11 23       	and	r17, r17
     b46:	2c f4       	brge	.+10     	; 0xb52 <nwkRouteFrameReceived+0x1c>
     b48:	85 85       	ldd	r24, Z+13	; 0x0d
     b4a:	96 85       	ldd	r25, Z+14	; 0x0e
     b4c:	08 17       	cp	r16, r24
     b4e:	19 07       	cpc	r17, r25
     b50:	e1 f5       	brne	.+120    	; 0xbca <nwkRouteFrameReceived+0x94>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     b52:	85 81       	ldd	r24, Z+5	; 0x05
     b54:	96 81       	ldd	r25, Z+6	; 0x06
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	c1 f1       	breq	.+112    	; 0xbca <nwkRouteFrameReceived+0x94>
     b5a:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	85 85       	ldd	r24, Z+13	; 0x0d
     b60:	96 85       	ldd	r25, Z+14	; 0x0e
     b62:	7c df       	rcall	.-264    	; 0xa5c <NWK_RouteFindEntry>
     b64:	fc 01       	movw	r30, r24

  if (entry)
     b66:	89 2b       	or	r24, r25
     b68:	a1 f0       	breq	.+40     	; 0xb92 <nwkRouteFrameReceived+0x5c>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
     b6a:	8f 81       	ldd	r24, Y+7	; 0x07
     b6c:	98 85       	ldd	r25, Y+8	; 0x08
     b6e:	01 96       	adiw	r24, 0x01	; 1
     b70:	f9 f4       	brne	.+62     	; 0xbb0 <nwkRouteFrameReceived+0x7a>
     b72:	20 91 aa 1f 	lds	r18, 0x1FAA	; 0x801faa <nwkIb>
     b76:	30 91 ab 1f 	lds	r19, 0x1FAB	; 0x801fab <nwkIb+0x1>
     b7a:	8f 85       	ldd	r24, Y+15	; 0x0f
     b7c:	98 89       	ldd	r25, Y+16	; 0x10
     b7e:	28 17       	cp	r18, r24
     b80:	39 07       	cpc	r19, r25
     b82:	b1 f4       	brne	.+44     	; 0xbb0 <nwkRouteFrameReceived+0x7a>
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    {
      entry->nextHopAddr = header->macSrcAddr;
     b84:	14 83       	std	Z+4, r17	; 0x04
     b86:	03 83       	std	Z+3, r16	; 0x03
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
     b88:	80 81       	ld	r24, Z
     b8a:	8f 70       	andi	r24, 0x0F	; 15
     b8c:	80 63       	ori	r24, 0x30	; 48
     b8e:	80 83       	st	Z, r24
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
     b90:	0a c0       	rjmp	.+20     	; 0xba6 <nwkRouteFrameReceived+0x70>
     b92:	96 df       	rcall	.-212    	; 0xac0 <NWK_RouteNewEntry>
     b94:	fc 01       	movw	r30, r24

    entry->dstAddr = header->nwkSrcAddr;
     b96:	8d 85       	ldd	r24, Y+13	; 0x0d
     b98:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9a:	92 83       	std	Z+2, r25	; 0x02
     b9c:	81 83       	std	Z+1, r24	; 0x01
    entry->nextHopAddr = header->macSrcAddr;
     b9e:	89 85       	ldd	r24, Y+9	; 0x09
     ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ba2:	94 83       	std	Z+4, r25	; 0x04
     ba4:	83 83       	std	Z+3, r24	; 0x03
  }

  entry->lqi = frame->rx.lqi;
     ba6:	cd 57       	subi	r28, 0x7D	; 125
     ba8:	df 4f       	sbci	r29, 0xFF	; 255
     baa:	88 81       	ld	r24, Y
     bac:	86 83       	std	Z+6, r24	; 0x06
     bae:	0d c0       	rjmp	.+26     	; 0xbca <nwkRouteFrameReceived+0x94>
  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
     bb0:	83 81       	ldd	r24, Z+3	; 0x03
     bb2:	94 81       	ldd	r25, Z+4	; 0x04
     bb4:	08 17       	cp	r16, r24
     bb6:	19 07       	cpc	r17, r25
     bb8:	b1 f3       	breq	.-20     	; 0xba6 <nwkRouteFrameReceived+0x70>
     bba:	96 81       	ldd	r25, Z+6	; 0x06
     bbc:	de 01       	movw	r26, r28
     bbe:	ad 57       	subi	r26, 0x7D	; 125
     bc0:	bf 4f       	sbci	r27, 0xFF	; 255
     bc2:	8c 91       	ld	r24, X
     bc4:	98 17       	cp	r25, r24
     bc6:	f0 f2       	brcs	.-68     	; 0xb84 <nwkRouteFrameReceived+0x4e>
     bc8:	ee cf       	rjmp	.-36     	; 0xba6 <nwkRouteFrameReceived+0x70>

  entry->lqi = frame->rx.lqi;
#else
  (void)frame;
#endif
}
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	1f 91       	pop	r17
     bd0:	0f 91       	pop	r16
     bd2:	08 95       	ret

00000bd4 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	fc 01       	movw	r30, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
     bda:	87 85       	ldd	r24, Z+15	; 0x0f
     bdc:	90 89       	ldd	r25, Z+16	; 0x10
     bde:	8f 3f       	cpi	r24, 0xFF	; 255
     be0:	2f ef       	ldi	r18, 0xFF	; 255
     be2:	92 07       	cpc	r25, r18
     be4:	d9 f1       	breq	.+118    	; 0xc5c <nwkRouteFrameSent+0x88>
     be6:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
     be8:	63 85       	ldd	r22, Z+11	; 0x0b
     bea:	63 fb       	bst	r22, 3
     bec:	66 27       	eor	r22, r22
     bee:	60 f9       	bld	r22, 0
     bf0:	35 df       	rcall	.-406    	; 0xa5c <NWK_RouteFindEntry>
     bf2:	dc 01       	movw	r26, r24

  if (NULL == entry || entry->fixed)
     bf4:	89 2b       	or	r24, r25
     bf6:	91 f1       	breq	.+100    	; 0xc5c <nwkRouteFrameSent+0x88>
     bf8:	8c 91       	ld	r24, X
     bfa:	80 fd       	sbrc	r24, 0
     bfc:	2f c0       	rjmp	.+94     	; 0xc5c <nwkRouteFrameSent+0x88>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
     bfe:	fe 01       	movw	r30, r28
     c00:	ed 57       	subi	r30, 0x7D	; 125
     c02:	ff 4f       	sbci	r31, 0xFF	; 255
     c04:	80 81       	ld	r24, Z
     c06:	81 11       	cpse	r24, r1
     c08:	19 c0       	rjmp	.+50     	; 0xc3c <nwkRouteFrameSent+0x68>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
     c0a:	8c 91       	ld	r24, X
     c0c:	8f 70       	andi	r24, 0x0F	; 15
     c0e:	80 63       	ori	r24, 0x30	; 48
     c10:	8c 93       	st	X, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
     c12:	15 96       	adiw	r26, 0x05	; 5
     c14:	8c 91       	ld	r24, X
     c16:	15 97       	sbiw	r26, 0x05	; 5
     c18:	8f 5f       	subi	r24, 0xFF	; 255
     c1a:	15 96       	adiw	r26, 0x05	; 5
     c1c:	8c 93       	st	X, r24
     c1e:	8f 3f       	cpi	r24, 0xFF	; 255
     c20:	e9 f4       	brne	.+58     	; 0xc5c <nwkRouteFrameSent+0x88>
     c22:	e0 e1       	ldi	r30, 0x10	; 16
     c24:	fc e1       	ldi	r31, 0x1C	; 28
     c26:	2c ec       	ldi	r18, 0xCC	; 204
     c28:	3e e1       	ldi	r19, 0x1E	; 30
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
     c2a:	80 81       	ld	r24, Z
     c2c:	86 95       	lsr	r24
     c2e:	8f 5f       	subi	r24, 0xFF	; 255
     c30:	80 83       	st	Z, r24
     c32:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
     c34:	e2 17       	cp	r30, r18
     c36:	f3 07       	cpc	r31, r19
     c38:	c1 f7       	brne	.-16     	; 0xc2a <nwkRouteFrameSent+0x56>
     c3a:	10 c0       	rjmp	.+32     	; 0xc5c <nwkRouteFrameSent+0x88>
    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
      nwkRouteNormalizeRanks();
  }
  else
  {
    if (0 == --entry->score)
     c3c:	9c 91       	ld	r25, X
     c3e:	89 2f       	mov	r24, r25
     c40:	82 95       	swap	r24
     c42:	8f 70       	andi	r24, 0x0F	; 15
     c44:	81 5f       	subi	r24, 0xF1	; 241
     c46:	8f 70       	andi	r24, 0x0F	; 15
     c48:	28 2f       	mov	r18, r24
     c4a:	22 95       	swap	r18
     c4c:	20 7f       	andi	r18, 0xF0	; 240
     c4e:	9f 70       	andi	r25, 0x0F	; 15
     c50:	92 2b       	or	r25, r18
     c52:	9c 93       	st	X, r25
     c54:	81 11       	cpse	r24, r1
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <nwkRouteFrameSent+0x88>
      NWK_RouteFreeEntry(entry);
     c58:	cd 01       	movw	r24, r26
     c5a:	54 df       	rcall	.-344    	; 0xb04 <NWK_RouteFreeEntry>
  }
}
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	08 95       	ret

00000c62 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
     c68:	87 85       	ldd	r24, Z+15	; 0x0f
     c6a:	90 89       	ldd	r25, Z+16	; 0x10
     c6c:	8f 3f       	cpi	r24, 0xFF	; 255
     c6e:	2f ef       	ldi	r18, 0xFF	; 255
     c70:	92 07       	cpc	r25, r18
     c72:	29 f4       	brne	.+10     	; 0xc7e <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
     c74:	8f ef       	ldi	r24, 0xFF	; 255
     c76:	9f ef       	ldi	r25, 0xFF	; 255
     c78:	90 87       	std	Z+8, r25	; 0x08
     c7a:	87 83       	std	Z+7, r24	; 0x07
     c7c:	0e c0       	rjmp	.+28     	; 0xc9a <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
     c7e:	23 85       	ldd	r18, Z+11	; 0x0b
     c80:	22 ff       	sbrs	r18, 2
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
     c84:	90 87       	std	Z+8, r25	; 0x08
     c86:	87 83       	std	Z+7, r24	; 0x07
     c88:	08 c0       	rjmp	.+16     	; 0xc9a <nwkRoutePrepareTx+0x38>
     c8a:	ef 01       	movw	r28, r30
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
     c8c:	63 85       	ldd	r22, Z+11	; 0x0b
     c8e:	63 fb       	bst	r22, 3
     c90:	66 27       	eor	r22, r22
     c92:	60 f9       	bld	r22, 0
     c94:	41 df       	rcall	.-382    	; 0xb18 <NWK_RouteNextHop>
     c96:	98 87       	std	Y+8, r25	; 0x08
     c98:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	08 95       	ret

00000ca0 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
     ca0:	af 92       	push	r10
     ca2:	bf 92       	push	r11
     ca4:	cf 92       	push	r12
     ca6:	df 92       	push	r13
     ca8:	ef 92       	push	r14
     caa:	ff 92       	push	r15
     cac:	1f 93       	push	r17
     cae:	cf 93       	push	r28
     cb0:	df 93       	push	r29
     cb2:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
     cb4:	1b 85       	ldd	r17, Y+11	; 0x0b
     cb6:	13 fb       	bst	r17, 3
     cb8:	11 27       	eor	r17, r17
     cba:	10 f9       	bld	r17, 0
     cbc:	cf 84       	ldd	r12, Y+15	; 0x0f
     cbe:	d8 88       	ldd	r13, Y+16	; 0x10
     cc0:	61 2f       	mov	r22, r17
     cc2:	c6 01       	movw	r24, r12
     cc4:	29 df       	rcall	.-430    	; 0xb18 <NWK_RouteNextHop>
     cc6:	01 96       	adiw	r24, 0x01	; 1
     cc8:	59 f0       	breq	.+22     	; 0xce0 <nwkRouteFrame+0x40>
  {
    frame->tx.confirm = NULL;
     cca:	fe 01       	movw	r30, r28
     ccc:	e9 57       	subi	r30, 0x79	; 121
     cce:	ff 4f       	sbci	r31, 0xFF	; 255
     cd0:	11 82       	std	Z+1, r1	; 0x01
     cd2:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
     cd4:	31 97       	sbiw	r30, 0x01	; 1
     cd6:	82 e0       	ldi	r24, 0x02	; 2
     cd8:	80 83       	st	Z, r24
    nwkTxFrame(frame);
     cda:	ce 01       	movw	r24, r28
     cdc:	6e d3       	rcall	.+1756   	; 0x13ba <nwkTxFrame>
     cde:	22 c0       	rjmp	.+68     	; 0xd24 <nwkRouteFrame+0x84>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
     ce0:	ad 84       	ldd	r10, Y+13	; 0x0d
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst, uint8_t multicast)
{
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
     ce2:	be 84       	ldd	r11, Y+14	; 0x0e
     ce4:	1f de       	rcall	.-962    	; 0x924 <nwkFrameAlloc>
     ce6:	7c 01       	movw	r14, r24
     ce8:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(frame);
     cea:	d1 f0       	breq	.+52     	; 0xd20 <nwkRouteFrame+0x80>
     cec:	83 de       	rcall	.-762    	; 0x9f4 <nwkFrameCommandInit>

  frame->size += sizeof(NwkCommandRouteError_t);
     cee:	f7 01       	movw	r30, r14
     cf0:	81 81       	ldd	r24, Z+1	; 0x01
     cf2:	8a 5f       	subi	r24, 0xFA	; 250
     cf4:	81 83       	std	Z+1, r24	; 0x01
  frame->tx.confirm = NULL;
     cf6:	e9 57       	subi	r30, 0x79	; 121
     cf8:	ff 4f       	sbci	r31, 0xFF	; 255
     cfa:	11 82       	std	Z+1, r1	; 0x01
     cfc:	10 82       	st	Z, r1

  frame->header.nwkDstAddr = src;
     cfe:	f7 01       	movw	r30, r14
     d00:	b0 8a       	std	Z+16, r11	; 0x10
     d02:	a7 86       	std	Z+15, r10	; 0x0f

  command = (NwkCommandRouteError_t *)frame->payload;
     d04:	ef 57       	subi	r30, 0x7F	; 127
     d06:	ff 4f       	sbci	r31, 0xFF	; 255
     d08:	01 90       	ld	r0, Z+
     d0a:	f0 81       	ld	r31, Z
     d0c:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ROUTE_ERROR;
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	80 83       	st	Z, r24
  command->srcAddr = src;
     d12:	b2 82       	std	Z+2, r11	; 0x02
     d14:	a1 82       	std	Z+1, r10	; 0x01
  command->dstAddr = dst;
     d16:	d4 82       	std	Z+4, r13	; 0x04
  command->multicast = multicast;

  nwkTxFrame(frame);
     d18:	c3 82       	std	Z+3, r12	; 0x03
     d1a:	15 83       	std	Z+5, r17	; 0x05
     d1c:	c7 01       	movw	r24, r14
    nwkTxFrame(frame);
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    nwkFrameFree(frame);
     d1e:	4d d3       	rcall	.+1690   	; 0x13ba <nwkTxFrame>
     d20:	ce 01       	movw	r24, r28
     d22:	39 de       	rcall	.-910    	; 0x996 <nwkFrameFree>
  }
}
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	1f 91       	pop	r17
     d2a:	ff 90       	pop	r15
     d2c:	ef 90       	pop	r14
     d2e:	df 90       	pop	r13
     d30:	cf 90       	pop	r12
     d32:	bf 90       	pop	r11
     d34:	af 90       	pop	r10
     d36:	08 95       	ret

00000d38 <nwkRouteErrorReceived>:
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
     d38:	fc 01       	movw	r30, r24
     d3a:	21 85       	ldd	r18, Z+9	; 0x09
     d3c:	26 30       	cpi	r18, 0x06	; 6
     d3e:	49 f4       	brne	.+18     	; 0xd52 <nwkRouteErrorReceived+0x1a>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
     d40:	07 80       	ldd	r0, Z+7	; 0x07
     d42:	f0 85       	ldd	r31, Z+8	; 0x08
     d44:	e0 2d       	mov	r30, r0

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
     d46:	65 81       	ldd	r22, Z+5	; 0x05
     d48:	83 81       	ldd	r24, Z+3	; 0x03
     d4a:	94 81       	ldd	r25, Z+4	; 0x04
     d4c:	ef de       	rcall	.-546    	; 0xb2c <nwkRouteRemove>

  return true;
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
     d52:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
     d54:	08 95       	ret

00000d56 <nwkRxServiceDataInd>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
     d56:	dc 01       	movw	r26, r24
     d58:	19 96       	adiw	r26, 0x09	; 9
     d5a:	2c 91       	ld	r18, X
     d5c:	19 97       	sbiw	r26, 0x09	; 9
     d5e:	22 23       	and	r18, r18
     d60:	71 f0       	breq	.+28     	; 0xd7e <nwkRxServiceDataInd+0x28>
     d62:	17 96       	adiw	r26, 0x07	; 7
     d64:	ed 91       	ld	r30, X+
     d66:	fc 91       	ld	r31, X
     d68:	18 97       	sbiw	r26, 0x08	; 8
     d6a:	20 81       	ld	r18, Z
     d6c:	22 23       	and	r18, r18
     d6e:	19 f0       	breq	.+6      	; 0xd76 <nwkRxServiceDataInd+0x20>
     d70:	21 30       	cpi	r18, 0x01	; 1
     d72:	19 f0       	breq	.+6      	; 0xd7a <nwkRxServiceDataInd+0x24>
     d74:	06 c0       	rjmp	.+12     	; 0xd82 <nwkRxServiceDataInd+0x2c>
     d76:	b2 c3       	rjmp	.+1892   	; 0x14dc <nwkTxAckReceived>
     d78:	08 95       	ret
     d7a:	de cf       	rjmp	.-68     	; 0xd38 <nwkRouteErrorReceived>
     d7c:	08 95       	ret
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	08 95       	ret
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	08 95       	ret

00000d86 <nwkRxDuplicateRejectionTimerHandler>:
     d86:	bc 01       	movw	r22, r24
     d88:	e9 ed       	ldi	r30, 0xD9	; 217
     d8a:	fe e1       	ldi	r31, 0x1E	; 30
     d8c:	2b e0       	ldi	r18, 0x0B	; 11
     d8e:	3f e1       	ldi	r19, 0x1F	; 31
     d90:	40 e0       	ldi	r20, 0x00	; 0
     d92:	51 e0       	ldi	r21, 0x01	; 1
     d94:	90 81       	ld	r25, Z
     d96:	99 23       	and	r25, r25
     d98:	19 f0       	breq	.+6      	; 0xda0 <nwkRxDuplicateRejectionTimerHandler+0x1a>
     d9a:	91 50       	subi	r25, 0x01	; 1
     d9c:	90 83       	st	Z, r25
     d9e:	45 2f       	mov	r20, r21
     da0:	35 96       	adiw	r30, 0x05	; 5
     da2:	e2 17       	cp	r30, r18
     da4:	f3 07       	cpc	r31, r19
     da6:	b1 f7       	brne	.-20     	; 0xd94 <nwkRxDuplicateRejectionTimerHandler+0xe>
     da8:	44 23       	and	r20, r20
     daa:	11 f0       	breq	.+4      	; 0xdb0 <nwkRxDuplicateRejectionTimerHandler+0x2a>
     dac:	cb 01       	movw	r24, r22
     dae:	30 c6       	rjmp	.+3168   	; 0x1a10 <SYS_TimerStart>
     db0:	08 95       	ret

00000db2 <nwkRxInit>:
     db2:	e9 ed       	ldi	r30, 0xD9	; 217
     db4:	fe e1       	ldi	r31, 0x1E	; 30
     db6:	8b e0       	ldi	r24, 0x0B	; 11
     db8:	9f e1       	ldi	r25, 0x1F	; 31
     dba:	10 82       	st	Z, r1
     dbc:	35 96       	adiw	r30, 0x05	; 5
     dbe:	e8 17       	cp	r30, r24
     dc0:	f9 07       	cpc	r31, r25
     dc2:	d9 f7       	brne	.-10     	; 0xdba <nwkRxInit+0x8>
     dc4:	e7 ec       	ldi	r30, 0xC7	; 199
     dc6:	fe e1       	ldi	r31, 0x1E	; 30
     dc8:	84 e6       	ldi	r24, 0x64	; 100
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	a0 e0       	ldi	r26, 0x00	; 0
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	86 83       	std	Z+6, r24	; 0x06
     dd2:	97 83       	std	Z+7, r25	; 0x07
     dd4:	a0 87       	std	Z+8, r26	; 0x08
     dd6:	b1 87       	std	Z+9, r27	; 0x09
     dd8:	12 86       	std	Z+10, r1	; 0x0a
     dda:	83 ec       	ldi	r24, 0xC3	; 195
     ddc:	96 e0       	ldi	r25, 0x06	; 6
     dde:	94 87       	std	Z+12, r25	; 0x0c
     de0:	83 87       	std	Z+11, r24	; 0x0b
     de2:	6b ea       	ldi	r22, 0xAB	; 171
     de4:	76 e0       	ldi	r23, 0x06	; 6
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	96 cc       	rjmp	.-1748   	; 0x716 <NWK_OpenEndpoint>
     dea:	08 95       	ret

00000dec <PHY_DataInd>:
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	dc 01       	movw	r26, r24
     df2:	ed 91       	ld	r30, X+
     df4:	fc 91       	ld	r31, X
     df6:	11 97       	sbiw	r26, 0x01	; 1
     df8:	21 81       	ldd	r18, Z+1	; 0x01
     dfa:	28 38       	cpi	r18, 0x88	; 136
     dfc:	f1 f4       	brne	.+60     	; 0xe3a <PHY_DataInd+0x4e>
     dfe:	20 81       	ld	r18, Z
     e00:	2f 7d       	andi	r18, 0xDF	; 223
     e02:	21 34       	cpi	r18, 0x41	; 65
     e04:	d1 f4       	brne	.+52     	; 0xe3a <PHY_DataInd+0x4e>
     e06:	12 96       	adiw	r26, 0x02	; 2
     e08:	2c 91       	ld	r18, X
     e0a:	20 31       	cpi	r18, 0x10	; 16
     e0c:	b0 f0       	brcs	.+44     	; 0xe3a <PHY_DataInd+0x4e>
     e0e:	ec 01       	movw	r28, r24
     e10:	89 dd       	rcall	.-1262   	; 0x924 <nwkFrameAlloc>
     e12:	00 97       	sbiw	r24, 0x00	; 0
     e14:	91 f0       	breq	.+36     	; 0xe3a <PHY_DataInd+0x4e>
     e16:	20 e2       	ldi	r18, 0x20	; 32
     e18:	fc 01       	movw	r30, r24
     e1a:	20 83       	st	Z, r18
     e1c:	2a 81       	ldd	r18, Y+2	; 0x02
     e1e:	21 83       	std	Z+1, r18	; 0x01
     e20:	2b 81       	ldd	r18, Y+3	; 0x03
     e22:	ed 57       	subi	r30, 0x7D	; 125
     e24:	ff 4f       	sbci	r31, 0xFF	; 255
     e26:	20 83       	st	Z, r18
     e28:	2c 81       	ldd	r18, Y+4	; 0x04
     e2a:	31 96       	adiw	r30, 0x01	; 1
     e2c:	20 83       	st	Z, r18
     e2e:	4a 81       	ldd	r20, Y+2	; 0x02
     e30:	50 e0       	ldi	r21, 0x00	; 0
     e32:	68 81       	ld	r22, Y
     e34:	79 81       	ldd	r23, Y+1	; 0x01
     e36:	02 96       	adiw	r24, 0x02	; 2
     e38:	d8 d6       	rcall	.+3504   	; 0x1bea <memcpy>
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	08 95       	ret

00000e40 <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
     e40:	2f 92       	push	r2
     e42:	3f 92       	push	r3
     e44:	4f 92       	push	r4
     e46:	5f 92       	push	r5
     e48:	6f 92       	push	r6
     e4a:	7f 92       	push	r7
     e4c:	8f 92       	push	r8
     e4e:	9f 92       	push	r9
     e50:	af 92       	push	r10
     e52:	bf 92       	push	r11
     e54:	cf 92       	push	r12
     e56:	df 92       	push	r13
     e58:	ef 92       	push	r14
     e5a:	ff 92       	push	r15
     e5c:	0f 93       	push	r16
     e5e:	1f 93       	push	r17
     e60:	cf 93       	push	r28
     e62:	df 93       	push	r29
     e64:	cd b7       	in	r28, 0x3d	; 61
     e66:	de b7       	in	r29, 0x3e	; 62
     e68:	2c 97       	sbiw	r28, 0x0c	; 12
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	f8 94       	cli
     e6e:	de bf       	out	0x3e, r29	; 62
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
     e74:	00 e0       	ldi	r16, 0x00	; 0
     e76:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
     e78:	0f 2e       	mov	r0, r31
     e7a:	f4 e2       	ldi	r31, 0x24	; 36
     e7c:	bf 2e       	mov	r11, r31
     e7e:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
     e80:	0f 2e       	mov	r0, r31
     e82:	fa ea       	ldi	r31, 0xAA	; 170
     e84:	ef 2e       	mov	r14, r31
     e86:	ff e1       	ldi	r31, 0x1F	; 31
     e88:	ff 2e       	mov	r15, r31
     e8a:	f0 2d       	mov	r31, r0
    ack = false;

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
      nwkIb.addr == frame->header.nwkDstAddr &&
      0 == frame->header.nwkFcf.multicast)
    ack = true;
     e8c:	55 24       	eor	r5, r5
     e8e:	53 94       	inc	r5
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
     e90:	68 94       	set
     e92:	aa 24       	eor	r10, r10
     e94:	a4 f8       	bld	r10, 4
  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
     e96:	68 94       	set
     e98:	77 24       	eor	r7, r7
     e9a:	73 f8       	bld	r7, 3

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
     e9c:	68 94       	set
     e9e:	66 24       	eor	r6, r6
     ea0:	62 f8       	bld	r6, 2
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
     ea2:	31 2c       	mov	r3, r1
     ea4:	21 2c       	mov	r2, r1
    return true;

  freeEntry->src = header->nwkSrcAddr;
  freeEntry->seq = header->nwkSeq;
  freeEntry->mask = 1;
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
     ea6:	0f 2e       	mov	r0, r31
     ea8:	ff e1       	ldi	r31, 0x1F	; 31
     eaa:	4f 2e       	mov	r4, r31
     eac:	f0 2d       	mov	r31, r0
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
     eae:	cc 24       	eor	r12, r12
     eb0:	c3 94       	inc	r12
     eb2:	d1 2c       	mov	r13, r1
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
     eb4:	da c1       	rjmp	.+948    	; 0x126a <nwkRxTaskHandler+0x42a>
  {
    switch (frame->state)
     eb6:	d8 01       	movw	r26, r16
     eb8:	8c 91       	ld	r24, X
     eba:	82 32       	cpi	r24, 0x22	; 34
     ebc:	09 f4       	brne	.+2      	; 0xec0 <nwkRxTaskHandler+0x80>
     ebe:	05 c1       	rjmp	.+522    	; 0x10ca <nwkRxTaskHandler+0x28a>
     ec0:	18 f4       	brcc	.+6      	; 0xec8 <nwkRxTaskHandler+0x88>
     ec2:	80 32       	cpi	r24, 0x20	; 32
     ec4:	41 f0       	breq	.+16     	; 0xed6 <nwkRxTaskHandler+0x96>
     ec6:	d1 c1       	rjmp	.+930    	; 0x126a <nwkRxTaskHandler+0x42a>
     ec8:	83 32       	cpi	r24, 0x23	; 35
     eca:	09 f4       	brne	.+2      	; 0xece <nwkRxTaskHandler+0x8e>
     ecc:	c9 c1       	rjmp	.+914    	; 0x1260 <nwkRxTaskHandler+0x420>
     ece:	84 32       	cpi	r24, 0x24	; 36
     ed0:	09 f4       	brne	.+2      	; 0xed4 <nwkRxTaskHandler+0x94>
     ed2:	c9 c1       	rjmp	.+914    	; 0x1266 <nwkRxTaskHandler+0x426>
     ed4:	ca c1       	rjmp	.+916    	; 0x126a <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
     ed6:	f8 01       	movw	r30, r16
     ed8:	b0 82       	st	Z, r11

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
     eda:	83 85       	ldd	r24, Z+11	; 0x0b

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
     edc:	98 2f       	mov	r25, r24
     ede:	9a 70       	andi	r25, 0x0A	; 10
     ee0:	09 f0       	breq	.+2      	; 0xee4 <nwkRxTaskHandler+0xa4>
     ee2:	c3 c1       	rjmp	.+902    	; 0x126a <nwkRxTaskHandler+0x42a>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     ee4:	25 81       	ldd	r18, Z+5	; 0x05
     ee6:	36 81       	ldd	r19, Z+6	; 0x06
     ee8:	2f 3f       	cpi	r18, 0xFF	; 255
     eea:	3f 4f       	sbci	r19, 0xFF	; 255
     eec:	91 f4       	brne	.+36     	; 0xf12 <nwkRxTaskHandler+0xd2>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
     eee:	d8 01       	movw	r26, r16
     ef0:	1f 96       	adiw	r26, 0x0f	; 15
     ef2:	8d 91       	ld	r24, X+
     ef4:	9c 91       	ld	r25, X
     ef6:	50 97       	sbiw	r26, 0x10	; 16
     ef8:	f7 01       	movw	r30, r14
     efa:	20 81       	ld	r18, Z
     efc:	31 81       	ldd	r19, Z+1	; 0x01
     efe:	28 17       	cp	r18, r24
     f00:	39 07       	cpc	r19, r25
     f02:	19 f0       	breq	.+6      	; 0xf0a <nwkRxTaskHandler+0xca>
     f04:	01 96       	adiw	r24, 0x01	; 1
     f06:	09 f0       	breq	.+2      	; 0xf0a <nwkRxTaskHandler+0xca>
     f08:	b0 c1       	rjmp	.+864    	; 0x126a <nwkRxTaskHandler+0x42a>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
     f0a:	e2 e2       	ldi	r30, 0x22	; 34
     f0c:	d8 01       	movw	r26, r16
     f0e:	ec 93       	st	X, r30
     f10:	ac c1       	rjmp	.+856    	; 0x126a <nwkRxTaskHandler+0x42a>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
     f12:	d8 01       	movw	r26, r16
     f14:	1f 96       	adiw	r26, 0x0f	; 15
     f16:	2d 91       	ld	r18, X+
     f18:	3c 91       	ld	r19, X
     f1a:	50 97       	sbiw	r26, 0x10	; 16
     f1c:	2f 3f       	cpi	r18, 0xFF	; 255
     f1e:	3f 4f       	sbci	r19, 0xFF	; 255
     f20:	11 f4       	brne	.+4      	; 0xf26 <nwkRxTaskHandler+0xe6>
     f22:	80 fd       	sbrc	r24, 0
     f24:	a2 c1       	rjmp	.+836    	; 0x126a <nwkRxTaskHandler+0x42a>
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
     f26:	f7 01       	movw	r30, r14
     f28:	20 81       	ld	r18, Z
     f2a:	31 81       	ldd	r19, Z+1	; 0x01
     f2c:	d8 01       	movw	r26, r16
     f2e:	1d 96       	adiw	r26, 0x0d	; 13
     f30:	8d 91       	ld	r24, X+
     f32:	9c 91       	ld	r25, X
     f34:	1e 97       	sbiw	r26, 0x0e	; 14
     f36:	28 17       	cp	r18, r24
     f38:	39 07       	cpc	r19, r25
     f3a:	09 f4       	brne	.+2      	; 0xf3e <nwkRxTaskHandler+0xfe>
     f3c:	96 c1       	rjmp	.+812    	; 0x126a <nwkRxTaskHandler+0x42a>
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
     f3e:	c8 01       	movw	r24, r16
     f40:	fa dd       	rcall	.-1036   	; 0xb36 <nwkRouteFrameReceived>
     f42:	e5 ed       	ldi	r30, 0xD5	; 213
     f44:	fe e1       	ldi	r31, 0x1E	; 30
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	90 e0       	ldi	r25, 0x00	; 0
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
     f4a:	83 2c       	mov	r8, r3
     f4c:	92 2c       	mov	r9, r2

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
     f4e:	9c 01       	movw	r18, r24

    if (entry->ttl && header->nwkSrcAddr == entry->src)
     f50:	44 81       	ldd	r20, Z+4	; 0x04
     f52:	44 23       	and	r20, r20
     f54:	09 f4       	brne	.+2      	; 0xf58 <nwkRxTaskHandler+0x118>
     f56:	74 c0       	rjmp	.+232    	; 0x1040 <nwkRxTaskHandler+0x200>
     f58:	d8 01       	movw	r26, r16
     f5a:	1d 96       	adiw	r26, 0x0d	; 13
     f5c:	6d 91       	ld	r22, X+
     f5e:	7c 91       	ld	r23, X
     f60:	1e 97       	sbiw	r26, 0x0e	; 14
     f62:	40 81       	ld	r20, Z
     f64:	51 81       	ldd	r21, Z+1	; 0x01
     f66:	64 17       	cp	r22, r20
     f68:	75 07       	cpc	r23, r21
     f6a:	09 f0       	breq	.+2      	; 0xf6e <nwkRxTaskHandler+0x12e>
     f6c:	6a c0       	rjmp	.+212    	; 0x1042 <nwkRxTaskHandler+0x202>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
     f6e:	1c 96       	adiw	r26, 0x0c	; 12
     f70:	8c 91       	ld	r24, X
     f72:	1c 97       	sbiw	r26, 0x0c	; 12
     f74:	f9 01       	movw	r30, r18
     f76:	ee 0f       	add	r30, r30
     f78:	ff 1f       	adc	r31, r31
     f7a:	ee 0f       	add	r30, r30
     f7c:	ff 1f       	adc	r31, r31
     f7e:	e2 0f       	add	r30, r18
     f80:	f3 1f       	adc	r31, r19
     f82:	eb 52       	subi	r30, 0x2B	; 43
     f84:	f1 4e       	sbci	r31, 0xE1	; 225
     f86:	92 81       	ldd	r25, Z+2	; 0x02
     f88:	98 1b       	sub	r25, r24

      if (diff < 8)
     f8a:	98 30       	cpi	r25, 0x08	; 8
     f8c:	08 f0       	brcs	.+2      	; 0xf90 <nwkRxTaskHandler+0x150>
     f8e:	3e c0       	rjmp	.+124    	; 0x100c <nwkRxTaskHandler+0x1cc>
      {
        if (entry->mask & (1 << diff))
     f90:	f9 01       	movw	r30, r18
     f92:	ee 0f       	add	r30, r30
     f94:	ff 1f       	adc	r31, r31
     f96:	ee 0f       	add	r30, r30
     f98:	ff 1f       	adc	r31, r31
     f9a:	e2 0f       	add	r30, r18
     f9c:	f3 1f       	adc	r31, r19
     f9e:	eb 52       	subi	r30, 0x2B	; 43
     fa0:	f1 4e       	sbci	r31, 0xE1	; 225
     fa2:	83 81       	ldd	r24, Z+3	; 0x03
     fa4:	48 2f       	mov	r20, r24
     fa6:	50 e0       	ldi	r21, 0x00	; 0
     fa8:	09 2e       	mov	r0, r25
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <nwkRxTaskHandler+0x170>
     fac:	55 95       	asr	r21
     fae:	47 95       	ror	r20
     fb0:	0a 94       	dec	r0
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <nwkRxTaskHandler+0x16c>
     fb4:	40 ff       	sbrs	r20, 0
     fb6:	17 c0       	rjmp	.+46     	; 0xfe6 <nwkRxTaskHandler+0x1a6>
        {
        #ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
     fb8:	f7 01       	movw	r30, r14
     fba:	20 81       	ld	r18, Z
     fbc:	31 81       	ldd	r19, Z+1	; 0x01
     fbe:	17 96       	adiw	r26, 0x07	; 7
     fc0:	8d 91       	ld	r24, X+
     fc2:	9c 91       	ld	r25, X
     fc4:	18 97       	sbiw	r26, 0x08	; 8
     fc6:	28 17       	cp	r18, r24
     fc8:	39 07       	cpc	r19, r25
     fca:	09 f0       	breq	.+2      	; 0xfce <nwkRxTaskHandler+0x18e>
     fcc:	4e c1       	rjmp	.+668    	; 0x126a <nwkRxTaskHandler+0x42a>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
     fce:	1b 96       	adiw	r26, 0x0b	; 11
     fd0:	6c 91       	ld	r22, X
     fd2:	1b 97       	sbiw	r26, 0x0b	; 11
     fd4:	63 fb       	bst	r22, 3
     fd6:	66 27       	eor	r22, r22
     fd8:	60 f9       	bld	r22, 0
     fda:	1f 96       	adiw	r26, 0x0f	; 15
     fdc:	8d 91       	ld	r24, X+
     fde:	9c 91       	ld	r25, X
     fe0:	50 97       	sbiw	r26, 0x10	; 16
     fe2:	a4 dd       	rcall	.-1208   	; 0xb2c <nwkRouteRemove>
     fe4:	42 c1       	rjmp	.+644    	; 0x126a <nwkRxTaskHandler+0x42a>
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
     fe6:	f9 01       	movw	r30, r18
     fe8:	ee 0f       	add	r30, r30
     fea:	ff 1f       	adc	r31, r31
     fec:	ee 0f       	add	r30, r30
     fee:	ff 1f       	adc	r31, r31
     ff0:	2e 0f       	add	r18, r30
     ff2:	3f 1f       	adc	r19, r31
     ff4:	f9 01       	movw	r30, r18
     ff6:	eb 52       	subi	r30, 0x2B	; 43
     ff8:	f1 4e       	sbci	r31, 0xE1	; 225
     ffa:	96 01       	movw	r18, r12
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <nwkRxTaskHandler+0x1c2>
     ffe:	22 0f       	add	r18, r18
    1000:	33 1f       	adc	r19, r19
    1002:	9a 95       	dec	r25
    1004:	e2 f7       	brpl	.-8      	; 0xffe <nwkRxTaskHandler+0x1be>
    1006:	82 2b       	or	r24, r18
    1008:	83 83       	std	Z+3, r24	; 0x03
    100a:	36 c1       	rjmp	.+620    	; 0x1278 <nwkRxTaskHandler+0x438>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
    100c:	f9 01       	movw	r30, r18
    100e:	ee 0f       	add	r30, r30
    1010:	ff 1f       	adc	r31, r31
    1012:	ee 0f       	add	r30, r30
    1014:	ff 1f       	adc	r31, r31
    1016:	2e 0f       	add	r18, r30
    1018:	3f 1f       	adc	r19, r31
    101a:	f9 01       	movw	r30, r18
    101c:	eb 52       	subi	r30, 0x2B	; 43
    101e:	f1 4e       	sbci	r31, 0xE1	; 225
    1020:	82 83       	std	Z+2, r24	; 0x02
        entry->mask = (entry->mask << shift) | 1;
    1022:	83 81       	ldd	r24, Z+3	; 0x03
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	91 95       	neg	r25
    102a:	a9 01       	movw	r20, r18
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <nwkRxTaskHandler+0x1f2>
    102e:	44 0f       	add	r20, r20
    1030:	55 1f       	adc	r21, r21
    1032:	9a 95       	dec	r25
    1034:	e2 f7       	brpl	.-8      	; 0x102e <nwkRxTaskHandler+0x1ee>
    1036:	ca 01       	movw	r24, r20
    1038:	81 60       	ori	r24, 0x01	; 1
    103a:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
    103c:	44 82       	std	Z+4, r4	; 0x04
    103e:	1c c1       	rjmp	.+568    	; 0x1278 <nwkRxTaskHandler+0x438>
        return false;
      }
    }

    if (0 == entry->ttl)
      freeEntry = entry;
    1040:	4f 01       	movw	r8, r30
    1042:	01 96       	adiw	r24, 0x01	; 1
    1044:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1046:	8a 30       	cpi	r24, 0x0A	; 10
    1048:	91 05       	cpc	r25, r1
    104a:	09 f0       	breq	.+2      	; 0x104e <nwkRxTaskHandler+0x20e>
    104c:	80 cf       	rjmp	.-256    	; 0xf4e <nwkRxTaskHandler+0x10e>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
    104e:	81 14       	cp	r8, r1
    1050:	91 04       	cpc	r9, r1
    1052:	09 f4       	brne	.+2      	; 0x1056 <nwkRxTaskHandler+0x216>
    1054:	0a c1       	rjmp	.+532    	; 0x126a <nwkRxTaskHandler+0x42a>
    return true;

  freeEntry->src = header->nwkSrcAddr;
    1056:	d8 01       	movw	r26, r16
    1058:	1d 96       	adiw	r26, 0x0d	; 13
    105a:	8d 91       	ld	r24, X+
    105c:	9c 91       	ld	r25, X
    105e:	1e 97       	sbiw	r26, 0x0e	; 14
    1060:	f4 01       	movw	r30, r8
    1062:	91 83       	std	Z+1, r25	; 0x01
    1064:	80 83       	st	Z, r24
  freeEntry->seq = header->nwkSeq;
    1066:	1c 96       	adiw	r26, 0x0c	; 12
    1068:	8c 91       	ld	r24, X
    106a:	82 83       	std	Z+2, r24	; 0x02
  freeEntry->mask = 1;
    106c:	53 82       	std	Z+3, r5	; 0x03
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    106e:	44 82       	std	Z+4, r4	; 0x04

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    1070:	87 ec       	ldi	r24, 0xC7	; 199
    1072:	9e e1       	ldi	r25, 0x1E	; 30
    1074:	cd d4       	rcall	.+2458   	; 0x1a10 <SYS_TimerStart>
    1076:	00 c1       	rjmp	.+512    	; 0x1278 <nwkRxTaskHandler+0x438>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    1078:	d7 01       	movw	r26, r14
    107a:	2d 91       	ld	r18, X+
    107c:	3c 91       	ld	r19, X
    107e:	f8 01       	movw	r30, r16
    1080:	87 85       	ldd	r24, Z+15	; 0x0f
    1082:	90 89       	ldd	r25, Z+16	; 0x10
    1084:	28 17       	cp	r18, r24
    1086:	39 07       	cpc	r19, r25
    1088:	81 f0       	breq	.+32     	; 0x10aa <nwkRxTaskHandler+0x26a>
    108a:	43 85       	ldd	r20, Z+11	; 0x0b
    108c:	42 fd       	sbrc	r20, 2
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
    108e:	0b c0       	rjmp	.+22     	; 0x10a6 <nwkRxTaskHandler+0x266>
    1090:	c8 01       	movw	r24, r16
    1092:	e1 d1       	rcall	.+962    	; 0x1456 <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    1094:	d7 01       	movw	r26, r14
    1096:	2d 91       	ld	r18, X+
    1098:	3c 91       	ld	r19, X
    109a:	f8 01       	movw	r30, r16
    109c:	87 85       	ldd	r24, Z+15	; 0x0f
    109e:	90 89       	ldd	r25, Z+16	; 0x10
    10a0:	28 17       	cp	r18, r24
    10a2:	39 07       	cpc	r19, r25
    10a4:	11 f0       	breq	.+4      	; 0x10aa <nwkRxTaskHandler+0x26a>
    10a6:	01 96       	adiw	r24, 0x01	; 1
    10a8:	21 f4       	brne	.+8      	; 0x10b2 <nwkRxTaskHandler+0x272>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    10aa:	e2 e2       	ldi	r30, 0x22	; 34
    10ac:	d8 01       	movw	r26, r16
    10ae:	ec 93       	st	X, r30
    10b0:	dc c0       	rjmp	.+440    	; 0x126a <nwkRxTaskHandler+0x42a>
    }

  #ifdef NWK_ENABLE_ROUTING
    else if (nwkIb.addr == header->macDstAddr)
    10b2:	d8 01       	movw	r26, r16
    10b4:	17 96       	adiw	r26, 0x07	; 7
    10b6:	8d 91       	ld	r24, X+
    10b8:	9c 91       	ld	r25, X
    10ba:	18 97       	sbiw	r26, 0x08	; 8
    10bc:	82 17       	cp	r24, r18
    10be:	93 07       	cpc	r25, r19
    10c0:	09 f0       	breq	.+2      	; 0x10c4 <nwkRxTaskHandler+0x284>
    10c2:	d3 c0       	rjmp	.+422    	; 0x126a <nwkRxTaskHandler+0x42a>
    {
      frame->state = NWK_RX_STATE_ROUTE;
    10c4:	e3 e2       	ldi	r30, 0x23	; 35
    10c6:	ec 93       	st	X, r30
    10c8:	d0 c0       	rjmp	.+416    	; 0x126a <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
    10ca:	10 92 d4 1e 	sts	0x1ED4, r1	; 0x801ed4 <nwkRxAckControl>
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    10ce:	d8 01       	movw	r26, r16
    10d0:	51 96       	adiw	r26, 0x11	; 17
    10d2:	8c 91       	ld	r24, X
    10d4:	51 97       	sbiw	r26, 0x11	; 17
    10d6:	82 95       	swap	r24
    10d8:	8f 70       	andi	r24, 0x0F	; 15
    10da:	e8 2f       	mov	r30, r24
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	ee 0f       	add	r30, r30
    10e0:	ff 1f       	adc	r31, r31
    10e2:	e0 55       	subi	r30, 0x50	; 80
    10e4:	f0 4e       	sbci	r31, 0xE0	; 224
    10e6:	01 90       	ld	r0, Z+
    10e8:	f0 81       	ld	r31, Z
    10ea:	e0 2d       	mov	r30, r0
    10ec:	30 97       	sbiw	r30, 0x00	; 0
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <nwkRxTaskHandler+0x2b2>
    10f0:	60 c0       	rjmp	.+192    	; 0x11b2 <nwkRxTaskHandler+0x372>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
    10f2:	1d 96       	adiw	r26, 0x0d	; 13
    10f4:	2d 91       	ld	r18, X+
    10f6:	3c 91       	ld	r19, X
    10f8:	1e 97       	sbiw	r26, 0x0e	; 14
    10fa:	3a 83       	std	Y+2, r19	; 0x02
    10fc:	29 83       	std	Y+1, r18	; 0x01
  ind.dstAddr = header->nwkDstAddr;
    10fe:	1f 96       	adiw	r26, 0x0f	; 15
    1100:	4d 91       	ld	r20, X+
    1102:	5c 91       	ld	r21, X
    1104:	50 97       	sbiw	r26, 0x10	; 16
    1106:	5c 83       	std	Y+4, r21	; 0x04
    1108:	4b 83       	std	Y+3, r20	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
    110a:	51 96       	adiw	r26, 0x11	; 17
    110c:	9c 91       	ld	r25, X
    110e:	51 97       	sbiw	r26, 0x11	; 17
    1110:	9f 70       	andi	r25, 0x0F	; 15
    1112:	9d 83       	std	Y+5, r25	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
    1114:	8e 83       	std	Y+6, r24	; 0x06
  ind.data = frame->payload;
    1116:	af 57       	subi	r26, 0x7F	; 127
    1118:	bf 4f       	sbci	r27, 0xFF	; 255
    111a:	8d 91       	ld	r24, X+
    111c:	9c 91       	ld	r25, X
    111e:	99 87       	std	Y+9, r25	; 0x09
    1120:	88 87       	std	Y+8, r24	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
    1122:	b8 01       	movw	r22, r16
    1124:	6e 5f       	subi	r22, 0xFE	; 254
    1126:	7f 4f       	sbci	r23, 0xFF	; 255
  ind.size = nwkFramePayloadSize(frame);
    1128:	86 1b       	sub	r24, r22
    112a:	97 0b       	sbc	r25, r23
    112c:	d8 01       	movw	r26, r16
    112e:	11 96       	adiw	r26, 0x01	; 1
    1130:	9c 91       	ld	r25, X
    1132:	11 97       	sbiw	r26, 0x01	; 1
    1134:	98 1b       	sub	r25, r24
    1136:	9a 87       	std	Y+10, r25	; 0x0a
  ind.lqi = frame->rx.lqi;
    1138:	ad 57       	subi	r26, 0x7D	; 125
    113a:	bf 4f       	sbci	r27, 0xFF	; 255
    113c:	8c 91       	ld	r24, X
    113e:	8b 87       	std	Y+11, r24	; 0x0b
  ind.rssi = frame->rx.rssi;
    1140:	11 96       	adiw	r26, 0x01	; 1
    1142:	8c 91       	ld	r24, X
    1144:	8c 87       	std	Y+12, r24	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    1146:	d8 01       	movw	r26, r16
    1148:	1b 96       	adiw	r26, 0x0b	; 11
    114a:	9c 91       	ld	r25, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    114c:	69 2f       	mov	r22, r25
    114e:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    1150:	92 fd       	sbrc	r25, 2
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <nwkRxTaskHandler+0x318>
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	01 c0       	rjmp	.+2      	; 0x115a <nwkRxTaskHandler+0x31a>
    1158:	80 e2       	ldi	r24, 0x20	; 32
    115a:	86 2b       	or	r24, r22
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    115c:	93 fd       	sbrc	r25, 3
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <nwkRxTaskHandler+0x324>
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	01 c0       	rjmp	.+2      	; 0x1166 <nwkRxTaskHandler+0x326>
    1164:	90 e4       	ldi	r25, 0x40	; 64
    1166:	89 2b       	or	r24, r25
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    1168:	4f 3f       	cpi	r20, 0xFF	; 255
    116a:	5f 4f       	sbci	r21, 0xFF	; 255
    116c:	11 f0       	breq	.+4      	; 0x1172 <nwkRxTaskHandler+0x332>
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	01 c0       	rjmp	.+2      	; 0x1174 <nwkRxTaskHandler+0x334>
    1172:	96 2d       	mov	r25, r6
    1174:	89 2b       	or	r24, r25
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    1176:	d8 01       	movw	r26, r16
    1178:	19 96       	adiw	r26, 0x09	; 9
    117a:	4d 91       	ld	r20, X+
    117c:	5c 91       	ld	r21, X
    117e:	1a 97       	sbiw	r26, 0x0a	; 10
    1180:	24 17       	cp	r18, r20
    1182:	35 07       	cpc	r19, r21
    1184:	11 f0       	breq	.+4      	; 0x118a <nwkRxTaskHandler+0x34a>
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	01 c0       	rjmp	.+2      	; 0x118c <nwkRxTaskHandler+0x34c>
    118a:	97 2d       	mov	r25, r7
    118c:	89 2b       	or	r24, r25
    118e:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    1190:	d8 01       	movw	r26, r16
    1192:	15 96       	adiw	r26, 0x05	; 5
    1194:	2d 91       	ld	r18, X+
    1196:	3c 91       	ld	r19, X
    1198:	16 97       	sbiw	r26, 0x06	; 6
    119a:	2f 3f       	cpi	r18, 0xFF	; 255
    119c:	3f 4f       	sbci	r19, 0xFF	; 255
    119e:	11 f0       	breq	.+4      	; 0x11a4 <nwkRxTaskHandler+0x364>
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	01 c0       	rjmp	.+2      	; 0x11a6 <nwkRxTaskHandler+0x366>
    11a4:	9a 2d       	mov	r25, r10
    11a6:	89 2b       	or	r24, r25
    11a8:	8f 83       	std	Y+7, r24	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    11aa:	ce 01       	movw	r24, r28
    11ac:	01 96       	adiw	r24, 0x01	; 1
    11ae:	19 95       	eicall
    11b0:	01 c0       	rjmp	.+2      	; 0x11b4 <nwkRxTaskHandler+0x374>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
    11b2:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
    11b4:	f8 01       	movw	r30, r16
    11b6:	93 85       	ldd	r25, Z+11	; 0x0b
    11b8:	90 ff       	sbrs	r25, 0
    ack = false;
    11ba:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    11bc:	d8 01       	movw	r26, r16
    11be:	17 96       	adiw	r26, 0x07	; 7
    11c0:	2d 91       	ld	r18, X+
    11c2:	3c 91       	ld	r19, X
    11c4:	18 97       	sbiw	r26, 0x08	; 8
    11c6:	2f 3f       	cpi	r18, 0xFF	; 255
    11c8:	3f 4f       	sbci	r19, 0xFF	; 255
    11ca:	69 f4       	brne	.+26     	; 0x11e6 <nwkRxTaskHandler+0x3a6>
    11cc:	f7 01       	movw	r30, r14
    11ce:	40 81       	ld	r20, Z
    11d0:	51 81       	ldd	r21, Z+1	; 0x01
    11d2:	d8 01       	movw	r26, r16
    11d4:	1f 96       	adiw	r26, 0x0f	; 15
    11d6:	2d 91       	ld	r18, X+
    11d8:	3c 91       	ld	r19, X
    11da:	50 97       	sbiw	r26, 0x10	; 16
    11dc:	42 17       	cp	r20, r18
    11de:	53 07       	cpc	r21, r19
    11e0:	11 f4       	brne	.+4      	; 0x11e6 <nwkRxTaskHandler+0x3a6>
      nwkIb.addr == frame->header.nwkDstAddr &&
    11e2:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    11e4:	85 2d       	mov	r24, r5

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    11e6:	f8 01       	movw	r30, r16
    11e8:	25 81       	ldd	r18, Z+5	; 0x05
    11ea:	36 81       	ldd	r19, Z+6	; 0x06
    11ec:	2f 3f       	cpi	r18, 0xFF	; 255
    11ee:	3f 4f       	sbci	r19, 0xFF	; 255
    11f0:	a1 f1       	breq	.+104    	; 0x125a <nwkRxTaskHandler+0x41a>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    11f2:	d7 01       	movw	r26, r14
    11f4:	2d 91       	ld	r18, X+
    11f6:	3c 91       	ld	r19, X
    11f8:	2f 3f       	cpi	r18, 0xFF	; 255
    11fa:	3f 4f       	sbci	r19, 0xFF	; 255
    ack = false;

  if (ack)
    11fc:	71 f1       	breq	.+92     	; 0x125a <nwkRxTaskHandler+0x41a>
    11fe:	88 23       	and	r24, r24
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
    1200:	61 f1       	breq	.+88     	; 0x125a <nwkRxTaskHandler+0x41a>
    1202:	90 db       	rcall	.-2272   	; 0x924 <nwkFrameAlloc>
    1204:	4c 01       	movw	r8, r24
    1206:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(ack);
    1208:	41 f1       	breq	.+80     	; 0x125a <nwkRxTaskHandler+0x41a>
    120a:	f4 db       	rcall	.-2072   	; 0x9f4 <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
    120c:	f4 01       	movw	r30, r8
    120e:	81 81       	ldd	r24, Z+1	; 0x01
    1210:	8d 5f       	subi	r24, 0xFD	; 253
    1212:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
    1214:	e9 57       	subi	r30, 0x79	; 121
    1216:	ff 4f       	sbci	r31, 0xFF	; 255
    1218:	11 82       	std	Z+1, r1	; 0x01
    121a:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    121c:	d8 01       	movw	r26, r16
    121e:	1b 96       	adiw	r26, 0x0b	; 11
    1220:	8c 91       	ld	r24, X
    1222:	1b 97       	sbiw	r26, 0x0b	; 11
    1224:	86 95       	lsr	r24
    1226:	81 70       	andi	r24, 0x01	; 1
    1228:	f4 01       	movw	r30, r8
    122a:	93 85       	ldd	r25, Z+11	; 0x0b
    122c:	80 fb       	bst	r24, 0
    122e:	91 f9       	bld	r25, 1
    1230:	93 87       	std	Z+11, r25	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    1232:	1d 96       	adiw	r26, 0x0d	; 13
    1234:	8d 91       	ld	r24, X+
    1236:	9c 91       	ld	r25, X
    1238:	1e 97       	sbiw	r26, 0x0e	; 14
    123a:	90 8b       	std	Z+16, r25	; 0x10
    123c:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
    123e:	ef 57       	subi	r30, 0x7F	; 127
    1240:	ff 4f       	sbci	r31, 0xFF	; 255
    1242:	01 90       	ld	r0, Z+
    1244:	f0 81       	ld	r31, Z
    1246:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
    1248:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
    124a:	80 91 d4 1e 	lds	r24, 0x1ED4	; 0x801ed4 <nwkRxAckControl>
  command->seq = frame->header.nwkSeq;
    124e:	82 83       	std	Z+2, r24	; 0x02
    1250:	1c 96       	adiw	r26, 0x0c	; 12
    1252:	8c 91       	ld	r24, X

  nwkTxFrame(ack);
    1254:	81 83       	std	Z+1, r24	; 0x01
    1256:	c4 01       	movw	r24, r8
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    1258:	b0 d0       	rcall	.+352    	; 0x13ba <nwkTxFrame>
    125a:	d8 01       	movw	r26, r16
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    125c:	bc 92       	st	X, r11
    125e:	05 c0       	rjmp	.+10     	; 0x126a <nwkRxTaskHandler+0x42a>
    1260:	c8 01       	movw	r24, r16
      } break;
    1262:	1e dd       	rcall	.-1476   	; 0xca0 <nwkRouteFrame>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    1264:	02 c0       	rjmp	.+4      	; 0x126a <nwkRxTaskHandler+0x42a>
    1266:	c8 01       	movw	r24, r16
    1268:	96 db       	rcall	.-2260   	; 0x996 <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    126a:	c8 01       	movw	r24, r16
    126c:	9e db       	rcall	.-2244   	; 0x9aa <nwkFrameNext>
    126e:	8c 01       	movw	r16, r24
    1270:	89 2b       	or	r24, r25
    1272:	09 f0       	breq	.+2      	; 0x1276 <nwkRxTaskHandler+0x436>
    1274:	20 ce       	rjmp	.-960    	; 0xeb6 <nwkRxTaskHandler+0x76>
    1276:	07 c0       	rjmp	.+14     	; 0x1286 <nwkRxTaskHandler+0x446>
    1278:	f8 01       	movw	r30, r16
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    127a:	87 81       	ldd	r24, Z+7	; 0x07
    127c:	90 85       	ldd	r25, Z+8	; 0x08
    127e:	01 96       	adiw	r24, 0x01	; 1
    1280:	09 f0       	breq	.+2      	; 0x1284 <nwkRxTaskHandler+0x444>
    1282:	08 cf       	rjmp	.-496    	; 0x1094 <nwkRxTaskHandler+0x254>
    1284:	f9 ce       	rjmp	.-526    	; 0x1078 <nwkRxTaskHandler+0x238>
    1286:	2c 96       	adiw	r28, 0x0c	; 12
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	f8 94       	cli
    128c:	de bf       	out	0x3e, r29	; 62
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	cd bf       	out	0x3d, r28	; 61
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	1f 91       	pop	r17
    1298:	0f 91       	pop	r16
    129a:	ff 90       	pop	r15
    129c:	ef 90       	pop	r14
    129e:	df 90       	pop	r13
    12a0:	cf 90       	pop	r12
    12a2:	bf 90       	pop	r11
    12a4:	af 90       	pop	r10
    12a6:	9f 90       	pop	r9
    12a8:	8f 90       	pop	r8
    12aa:	7f 90       	pop	r7
    12ac:	6f 90       	pop	r6
    12ae:	5f 90       	pop	r5
    12b0:	4f 90       	pop	r4
    12b2:	3f 90       	pop	r3
    12b4:	2f 90       	pop	r2
    12b6:	08 95       	ret

000012b8 <nwkTxDelayTimerHandler>:
    12b8:	ef 92       	push	r14
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
  frame->tx.status = status;
    12ba:	ff 92       	push	r15
    12bc:	0f 93       	push	r16
    12be:	1f 93       	push	r17
    12c0:	cf 93       	push	r28
    12c2:	7c 01       	movw	r14, r24
    12c4:	10 e0       	ldi	r17, 0x00	; 0
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	01 e0       	ldi	r16, 0x01	; 1
    12cc:	c3 e1       	ldi	r28, 0x13	; 19
    12ce:	13 c0       	rjmp	.+38     	; 0x12f6 <nwkTxDelayTimerHandler+0x3e>
    12d0:	fc 01       	movw	r30, r24
    12d2:	20 81       	ld	r18, Z
    12d4:	21 31       	cpi	r18, 0x11	; 17
    12d6:	79 f4       	brne	.+30     	; 0x12f6 <nwkTxDelayTimerHandler+0x3e>
    12d8:	ec 57       	subi	r30, 0x7C	; 124
    12da:	ff 4f       	sbci	r31, 0xFF	; 255
    12dc:	20 81       	ld	r18, Z
    12de:	31 81       	ldd	r19, Z+1	; 0x01
    12e0:	21 50       	subi	r18, 0x01	; 1
    12e2:	31 09       	sbc	r19, r1
    12e4:	31 83       	std	Z+1, r19	; 0x01
    12e6:	20 83       	st	Z, r18
    12e8:	23 2b       	or	r18, r19
    12ea:	21 f4       	brne	.+8      	; 0x12f4 <nwkTxDelayTimerHandler+0x3c>
    12ec:	fc 01       	movw	r30, r24
    12ee:	c0 83       	st	Z, r28
    12f0:	10 2f       	mov	r17, r16
    12f2:	01 c0       	rjmp	.+2      	; 0x12f6 <nwkTxDelayTimerHandler+0x3e>
    12f4:	10 2f       	mov	r17, r16
    12f6:	59 db       	rcall	.-2382   	; 0x9aa <nwkFrameNext>
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	51 f7       	brne	.-44     	; 0x12d0 <nwkTxDelayTimerHandler+0x18>
    12fc:	11 23       	and	r17, r17
    12fe:	11 f0       	breq	.+4      	; 0x1304 <nwkTxDelayTimerHandler+0x4c>
    1300:	c7 01       	movw	r24, r14
    1302:	86 d3       	rcall	.+1804   	; 0x1a10 <SYS_TimerStart>
    1304:	cf 91       	pop	r28
    1306:	1f 91       	pop	r17
    1308:	0f 91       	pop	r16
    130a:	ff 90       	pop	r15
    130c:	ef 90       	pop	r14
    130e:	08 95       	ret

00001310 <nwkTxAckWaitTimerHandler>:
    1310:	ef 92       	push	r14
    1312:	ff 92       	push	r15
    1314:	0f 93       	push	r16
    1316:	1f 93       	push	r17
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	7c 01       	movw	r14, r24
    131e:	10 e0       	ldi	r17, 0x00	; 0
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	01 e0       	ldi	r16, 0x01	; 1
    1326:	d7 e1       	ldi	r29, 0x17	; 23
    1328:	c0 e1       	ldi	r28, 0x10	; 16
    132a:	16 c0       	rjmp	.+44     	; 0x1358 <nwkTxAckWaitTimerHandler+0x48>
    132c:	fc 01       	movw	r30, r24
    132e:	20 81       	ld	r18, Z
    1330:	26 31       	cpi	r18, 0x16	; 22
    1332:	91 f4       	brne	.+36     	; 0x1358 <nwkTxAckWaitTimerHandler+0x48>
    1334:	ec 57       	subi	r30, 0x7C	; 124
    1336:	ff 4f       	sbci	r31, 0xFF	; 255
    1338:	20 81       	ld	r18, Z
    133a:	31 81       	ldd	r19, Z+1	; 0x01
    133c:	21 50       	subi	r18, 0x01	; 1
    133e:	31 09       	sbc	r19, r1
    1340:	31 83       	std	Z+1, r19	; 0x01
    1342:	20 83       	st	Z, r18
    1344:	23 2b       	or	r18, r19
    1346:	39 f4       	brne	.+14     	; 0x1356 <nwkTxAckWaitTimerHandler+0x46>
    1348:	fc 01       	movw	r30, r24
    134a:	d0 83       	st	Z, r29
    134c:	ed 57       	subi	r30, 0x7D	; 125
    134e:	ff 4f       	sbci	r31, 0xFF	; 255
    1350:	c0 83       	st	Z, r28
    1352:	10 2f       	mov	r17, r16
    1354:	01 c0       	rjmp	.+2      	; 0x1358 <nwkTxAckWaitTimerHandler+0x48>
    1356:	10 2f       	mov	r17, r16
    1358:	28 db       	rcall	.-2480   	; 0x9aa <nwkFrameNext>
    135a:	00 97       	sbiw	r24, 0x00	; 0
    135c:	39 f7       	brne	.-50     	; 0x132c <nwkTxAckWaitTimerHandler+0x1c>
    135e:	11 23       	and	r17, r17
    1360:	11 f0       	breq	.+4      	; 0x1366 <nwkTxAckWaitTimerHandler+0x56>
    1362:	c7 01       	movw	r24, r14
    1364:	55 d3       	rcall	.+1706   	; 0x1a10 <SYS_TimerStart>
    1366:	df 91       	pop	r29
    1368:	cf 91       	pop	r28
    136a:	1f 91       	pop	r17
    136c:	0f 91       	pop	r16
    136e:	ff 90       	pop	r15
    1370:	ef 90       	pop	r14
    1372:	08 95       	ret

00001374 <nwkTxInit>:
    1374:	10 92 22 1f 	sts	0x1F22, r1	; 0x801f22 <nwkTxPhyActiveFrame+0x1>
    1378:	10 92 21 1f 	sts	0x1F21, r1	; 0x801f21 <nwkTxPhyActiveFrame>
    137c:	e4 e1       	ldi	r30, 0x14	; 20
    137e:	ff e1       	ldi	r31, 0x1F	; 31
    1380:	82 e3       	ldi	r24, 0x32	; 50
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	a0 e0       	ldi	r26, 0x00	; 0
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	86 83       	std	Z+6, r24	; 0x06
    138a:	97 83       	std	Z+7, r25	; 0x07
    138c:	a0 87       	std	Z+8, r26	; 0x08
    138e:	b1 87       	std	Z+9, r27	; 0x09
    1390:	12 86       	std	Z+10, r1	; 0x0a
    1392:	88 e8       	ldi	r24, 0x88	; 136
    1394:	99 e0       	ldi	r25, 0x09	; 9
    1396:	94 87       	std	Z+12, r25	; 0x0c
    1398:	83 87       	std	Z+11, r24	; 0x0b
    139a:	e7 e0       	ldi	r30, 0x07	; 7
    139c:	ff e1       	ldi	r31, 0x1F	; 31
    139e:	8a e0       	ldi	r24, 0x0A	; 10
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	a0 e0       	ldi	r26, 0x00	; 0
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	86 83       	std	Z+6, r24	; 0x06
    13a8:	97 83       	std	Z+7, r25	; 0x07
    13aa:	a0 87       	std	Z+8, r26	; 0x08
    13ac:	b1 87       	std	Z+9, r27	; 0x09
    13ae:	12 86       	std	Z+10, r1	; 0x0a
    13b0:	8c e5       	ldi	r24, 0x5C	; 92
    13b2:	99 e0       	ldi	r25, 0x09	; 9
    13b4:	94 87       	std	Z+12, r25	; 0x0c
    13b6:	83 87       	std	Z+11, r24	; 0x0b
    13b8:	08 95       	ret

000013ba <nwkTxFrame>:
    13ba:	cf 93       	push	r28
    13bc:	df 93       	push	r29
    13be:	ec 01       	movw	r28, r24
    13c0:	fc 01       	movw	r30, r24
    13c2:	ea 57       	subi	r30, 0x7A	; 122
    13c4:	ff 4f       	sbci	r31, 0xFF	; 255
    13c6:	80 81       	ld	r24, Z
    13c8:	81 ff       	sbrs	r24, 1
    13ca:	03 c0       	rjmp	.+6      	; 0x13d2 <nwkTxFrame+0x18>
    13cc:	92 e1       	ldi	r25, 0x12	; 18
    13ce:	98 83       	st	Y, r25
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <nwkTxFrame+0x1c>
    13d2:	92 e1       	ldi	r25, 0x12	; 18
    13d4:	98 83       	st	Y, r25
    13d6:	fe 01       	movw	r30, r28
    13d8:	ed 57       	subi	r30, 0x7D	; 125
    13da:	ff 4f       	sbci	r31, 0xFF	; 255
    13dc:	10 82       	st	Z, r1
    13de:	80 ff       	sbrs	r24, 0
    13e0:	05 c0       	rjmp	.+10     	; 0x13ec <nwkTxFrame+0x32>
    13e2:	2f ef       	ldi	r18, 0xFF	; 255
    13e4:	3f ef       	ldi	r19, 0xFF	; 255
    13e6:	3e 83       	std	Y+6, r19	; 0x06
    13e8:	2d 83       	std	Y+5, r18	; 0x05
    13ea:	06 c0       	rjmp	.+12     	; 0x13f8 <nwkTxFrame+0x3e>
    13ec:	20 91 ac 1f 	lds	r18, 0x1FAC	; 0x801fac <nwkIb+0x2>
    13f0:	30 91 ad 1f 	lds	r19, 0x1FAD	; 0x801fad <nwkIb+0x3>
    13f4:	3e 83       	std	Y+6, r19	; 0x06
    13f6:	2d 83       	std	Y+5, r18	; 0x05
    13f8:	85 70       	andi	r24, 0x05	; 5
    13fa:	19 f4       	brne	.+6      	; 0x1402 <nwkTxFrame+0x48>
    13fc:	ce 01       	movw	r24, r28
    13fe:	31 dc       	rcall	.-1950   	; 0xc62 <nwkRoutePrepareTx>
    1400:	04 c0       	rjmp	.+8      	; 0x140a <nwkTxFrame+0x50>
    1402:	8f 85       	ldd	r24, Y+15	; 0x0f
    1404:	98 89       	ldd	r25, Y+16	; 0x10
    1406:	98 87       	std	Y+8, r25	; 0x08
    1408:	8f 83       	std	Y+7, r24	; 0x07
    140a:	ea ea       	ldi	r30, 0xAA	; 170
    140c:	ff e1       	ldi	r31, 0x1F	; 31
    140e:	80 81       	ld	r24, Z
    1410:	91 81       	ldd	r25, Z+1	; 0x01
    1412:	9a 87       	std	Y+10, r25	; 0x0a
    1414:	89 87       	std	Y+9, r24	; 0x09
    1416:	85 81       	ldd	r24, Z+5	; 0x05
    1418:	8f 5f       	subi	r24, 0xFF	; 255
    141a:	85 83       	std	Z+5, r24	; 0x05
    141c:	8c 83       	std	Y+4, r24	; 0x04
    141e:	8f 81       	ldd	r24, Y+7	; 0x07
    1420:	98 85       	ldd	r25, Y+8	; 0x08
    1422:	01 96       	adiw	r24, 0x01	; 1
    1424:	69 f4       	brne	.+26     	; 0x1440 <nwkTxFrame+0x86>
    1426:	81 e4       	ldi	r24, 0x41	; 65
    1428:	98 e8       	ldi	r25, 0x88	; 136
    142a:	9b 83       	std	Y+3, r25	; 0x03
    142c:	8a 83       	std	Y+2, r24	; 0x02
    142e:	cf d3       	rcall	.+1950   	; 0x1bce <rand>
    1430:	cc 57       	subi	r28, 0x7C	; 124
    1432:	df 4f       	sbci	r29, 0xFF	; 255
    1434:	87 70       	andi	r24, 0x07	; 7
    1436:	99 27       	eor	r25, r25
    1438:	01 96       	adiw	r24, 0x01	; 1
    143a:	99 83       	std	Y+1, r25	; 0x01
    143c:	88 83       	st	Y, r24
    143e:	08 c0       	rjmp	.+16     	; 0x1450 <nwkTxFrame+0x96>
    1440:	81 e6       	ldi	r24, 0x61	; 97
    1442:	98 e8       	ldi	r25, 0x88	; 136
    1444:	9b 83       	std	Y+3, r25	; 0x03
    1446:	8a 83       	std	Y+2, r24	; 0x02
    1448:	cc 57       	subi	r28, 0x7C	; 124
    144a:	df 4f       	sbci	r29, 0xFF	; 255
    144c:	19 82       	std	Y+1, r1	; 0x01
    144e:	18 82       	st	Y, r1
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	08 95       	ret

00001456 <nwkTxBroadcastFrame>:
    1456:	0f 93       	push	r16
    1458:	1f 93       	push	r17
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
    145e:	8c 01       	movw	r16, r24
    1460:	61 da       	rcall	.-2878   	; 0x924 <nwkFrameAlloc>
    1462:	ec 01       	movw	r28, r24
    1464:	89 2b       	or	r24, r25
    1466:	a9 f1       	breq	.+106    	; 0x14d2 <nwkTxBroadcastFrame+0x7c>
    1468:	82 e1       	ldi	r24, 0x12	; 18
    146a:	88 83       	st	Y, r24
    146c:	f8 01       	movw	r30, r16
    146e:	81 81       	ldd	r24, Z+1	; 0x01
    1470:	89 83       	std	Y+1, r24	; 0x01
    1472:	fe 01       	movw	r30, r28
    1474:	ed 57       	subi	r30, 0x7D	; 125
    1476:	ff 4f       	sbci	r31, 0xFF	; 255
    1478:	10 82       	st	Z, r1
    147a:	a9 d3       	rcall	.+1874   	; 0x1bce <rand>
    147c:	fe 01       	movw	r30, r28
    147e:	ec 57       	subi	r30, 0x7C	; 124
    1480:	ff 4f       	sbci	r31, 0xFF	; 255
    1482:	87 70       	andi	r24, 0x07	; 7
    1484:	99 27       	eor	r25, r25
    1486:	01 96       	adiw	r24, 0x01	; 1
    1488:	91 83       	std	Z+1, r25	; 0x01
    148a:	80 83       	st	Z, r24
    148c:	33 96       	adiw	r30, 0x03	; 3
    148e:	11 82       	std	Z+1, r1	; 0x01
    1490:	10 82       	st	Z, r1
    1492:	f8 01       	movw	r30, r16
    1494:	41 81       	ldd	r20, Z+1	; 0x01
    1496:	50 e0       	ldi	r21, 0x00	; 0
    1498:	b8 01       	movw	r22, r16
    149a:	6e 5f       	subi	r22, 0xFE	; 254
    149c:	7f 4f       	sbci	r23, 0xFF	; 255
    149e:	ce 01       	movw	r24, r28
    14a0:	02 96       	adiw	r24, 0x02	; 2
    14a2:	a3 d3       	rcall	.+1862   	; 0x1bea <memcpy>
    14a4:	81 e4       	ldi	r24, 0x41	; 65
    14a6:	98 e8       	ldi	r25, 0x88	; 136
    14a8:	9b 83       	std	Y+3, r25	; 0x03
    14aa:	8a 83       	std	Y+2, r24	; 0x02
    14ac:	8f ef       	ldi	r24, 0xFF	; 255
    14ae:	9f ef       	ldi	r25, 0xFF	; 255
    14b0:	98 87       	std	Y+8, r25	; 0x08
    14b2:	8f 83       	std	Y+7, r24	; 0x07
    14b4:	f8 01       	movw	r30, r16
    14b6:	85 81       	ldd	r24, Z+5	; 0x05
    14b8:	96 81       	ldd	r25, Z+6	; 0x06
    14ba:	9e 83       	std	Y+6, r25	; 0x06
    14bc:	8d 83       	std	Y+5, r24	; 0x05
    14be:	ea ea       	ldi	r30, 0xAA	; 170
    14c0:	ff e1       	ldi	r31, 0x1F	; 31
    14c2:	80 81       	ld	r24, Z
    14c4:	91 81       	ldd	r25, Z+1	; 0x01
    14c6:	9a 87       	std	Y+10, r25	; 0x0a
    14c8:	89 87       	std	Y+9, r24	; 0x09
    14ca:	85 81       	ldd	r24, Z+5	; 0x05
    14cc:	8f 5f       	subi	r24, 0xFF	; 255
    14ce:	85 83       	std	Z+5, r24	; 0x05
    14d0:	8c 83       	std	Y+4, r24	; 0x04
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	1f 91       	pop	r17
    14d8:	0f 91       	pop	r16
    14da:	08 95       	ret

000014dc <nwkTxAckReceived>:
    14dc:	cf 93       	push	r28
    14de:	df 93       	push	r29
    14e0:	fc 01       	movw	r30, r24
    14e2:	21 85       	ldd	r18, Z+9	; 0x09
    14e4:	23 30       	cpi	r18, 0x03	; 3
    14e6:	d9 f4       	brne	.+54     	; 0x151e <nwkTxAckReceived+0x42>
    14e8:	10 c0       	rjmp	.+32     	; 0x150a <nwkTxAckReceived+0x2e>
    14ea:	fc 01       	movw	r30, r24
    14ec:	20 81       	ld	r18, Z
    14ee:	26 31       	cpi	r18, 0x16	; 22
    14f0:	89 f4       	brne	.+34     	; 0x1514 <nwkTxAckReceived+0x38>
    14f2:	34 85       	ldd	r19, Z+12	; 0x0c
    14f4:	29 81       	ldd	r18, Y+1	; 0x01
    14f6:	32 13       	cpse	r19, r18
    14f8:	0d c0       	rjmp	.+26     	; 0x1514 <nwkTxAckReceived+0x38>
    14fa:	27 e1       	ldi	r18, 0x17	; 23
    14fc:	20 83       	st	Z, r18
    14fe:	2a 81       	ldd	r18, Y+2	; 0x02
    1500:	ea 57       	subi	r30, 0x7A	; 122
    1502:	ff 4f       	sbci	r31, 0xFF	; 255
    1504:	20 83       	st	Z, r18
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	0b c0       	rjmp	.+22     	; 0x1520 <nwkTxAckReceived+0x44>
    150a:	fc 01       	movw	r30, r24
    150c:	c7 81       	ldd	r28, Z+7	; 0x07
    150e:	d0 85       	ldd	r29, Z+8	; 0x08
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	4a da       	rcall	.-2924   	; 0x9aa <nwkFrameNext>
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	41 f7       	brne	.-48     	; 0x14ea <nwkTxAckReceived+0xe>
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	01 c0       	rjmp	.+2      	; 0x1520 <nwkTxAckReceived+0x44>
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	df 91       	pop	r29
    1522:	cf 91       	pop	r28
    1524:	08 95       	ret

00001526 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    1526:	e0 91 21 1f 	lds	r30, 0x1F21	; 0x801f21 <nwkTxPhyActiveFrame>
    152a:	f0 91 22 1f 	lds	r31, 0x1F22	; 0x801f22 <nwkTxPhyActiveFrame+0x1>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    152e:	81 30       	cpi	r24, 0x01	; 1
    1530:	21 f0       	breq	.+8      	; 0x153a <PHY_DataConf+0x14>
    1532:	48 f0       	brcs	.+18     	; 0x1546 <PHY_DataConf+0x20>
    1534:	82 30       	cpi	r24, 0x02	; 2
    1536:	19 f0       	breq	.+6      	; 0x153e <PHY_DataConf+0x18>
    1538:	04 c0       	rjmp	.+8      	; 0x1542 <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    153a:	80 e2       	ldi	r24, 0x20	; 32
    153c:	05 c0       	rjmp	.+10     	; 0x1548 <PHY_DataConf+0x22>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    153e:	81 e2       	ldi	r24, 0x21	; 33
    1540:	03 c0       	rjmp	.+6      	; 0x1548 <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	01 c0       	rjmp	.+2      	; 0x1548 <PHY_DataConf+0x22>
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    1546:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    1548:	df 01       	movw	r26, r30
    154a:	ad 57       	subi	r26, 0x7D	; 125
    154c:	bf 4f       	sbci	r27, 0xFF	; 255
    154e:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    1550:	85 e1       	ldi	r24, 0x15	; 21
    1552:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    1554:	10 92 22 1f 	sts	0x1F22, r1	; 0x801f22 <nwkTxPhyActiveFrame+0x1>
    1558:	10 92 21 1f 	sts	0x1F21, r1	; 0x801f21 <nwkTxPhyActiveFrame>
  nwkIb.lock--;
    155c:	ea ea       	ldi	r30, 0xAA	; 170
    155e:	ff e1       	ldi	r31, 0x1F	; 31
    1560:	86 a1       	ldd	r24, Z+38	; 0x26
    1562:	97 a1       	ldd	r25, Z+39	; 0x27
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	97 a3       	std	Z+39, r25	; 0x27
    1568:	86 a3       	std	Z+38, r24	; 0x26
    156a:	08 95       	ret

0000156c <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    156c:	9f 92       	push	r9
    156e:	af 92       	push	r10
    1570:	bf 92       	push	r11
    1572:	cf 92       	push	r12
    1574:	df 92       	push	r13
    1576:	ef 92       	push	r14
    1578:	ff 92       	push	r15
    157a:	0f 93       	push	r16
    157c:	1f 93       	push	r17
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    1582:	c0 e0       	ldi	r28, 0x00	; 0
    1584:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    1586:	0f 2e       	mov	r0, r31
    1588:	f4 e1       	ldi	r31, 0x14	; 20
    158a:	af 2e       	mov	r10, r31
    158c:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    158e:	0a ea       	ldi	r16, 0xAA	; 170
    1590:	1f e1       	ldi	r17, 0x1F	; 31
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    1592:	0f 2e       	mov	r0, r31
    1594:	f7 e1       	ldi	r31, 0x17	; 23
    1596:	df 2e       	mov	r13, r31
    1598:	f0 2d       	mov	r31, r0
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    159a:	0f 2e       	mov	r0, r31
    159c:	f6 e1       	ldi	r31, 0x16	; 22
    159e:	9f 2e       	mov	r9, r31
    15a0:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    15a2:	0f 2e       	mov	r0, r31
    15a4:	f9 e2       	ldi	r31, 0x29	; 41
    15a6:	ef 2e       	mov	r14, r31
    15a8:	f1 2c       	mov	r15, r1
    15aa:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    15ac:	0f 2e       	mov	r0, r31
    15ae:	f3 e1       	ldi	r31, 0x13	; 19
    15b0:	cf 2e       	mov	r12, r31
    15b2:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    15b4:	0f 2e       	mov	r0, r31
    15b6:	f1 e1       	ldi	r31, 0x11	; 17
    15b8:	bf 2e       	mov	r11, r31
    15ba:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    15bc:	60 c0       	rjmp	.+192    	; 0x167e <nwkTxTaskHandler+0x112>
  {
    switch (frame->state)
    15be:	88 81       	ld	r24, Y
    15c0:	83 31       	cpi	r24, 0x13	; 19
    15c2:	c1 f0       	breq	.+48     	; 0x15f4 <nwkTxTaskHandler+0x88>
    15c4:	18 f4       	brcc	.+6      	; 0x15cc <nwkTxTaskHandler+0x60>
    15c6:	82 31       	cpi	r24, 0x12	; 18
    15c8:	39 f0       	breq	.+14     	; 0x15d8 <nwkTxTaskHandler+0x6c>
    15ca:	59 c0       	rjmp	.+178    	; 0x167e <nwkTxTaskHandler+0x112>
    15cc:	85 31       	cpi	r24, 0x15	; 21
    15ce:	49 f1       	breq	.+82     	; 0x1622 <nwkTxTaskHandler+0xb6>
    15d0:	87 31       	cpi	r24, 0x17	; 23
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <nwkTxTaskHandler+0x6a>
    15d4:	45 c0       	rjmp	.+138    	; 0x1660 <nwkTxTaskHandler+0xf4>
    15d6:	53 c0       	rjmp	.+166    	; 0x167e <nwkTxTaskHandler+0x112>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    15d8:	fe 01       	movw	r30, r28
    15da:	ec 57       	subi	r30, 0x7C	; 124
    15dc:	ff 4f       	sbci	r31, 0xFF	; 255
    15de:	80 81       	ld	r24, Z
    15e0:	91 81       	ldd	r25, Z+1	; 0x01
    15e2:	89 2b       	or	r24, r25
    15e4:	29 f0       	breq	.+10     	; 0x15f0 <nwkTxTaskHandler+0x84>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    15e6:	b8 82       	st	Y, r11
          SYS_TimerStart(&nwkTxDelayTimer);
    15e8:	87 e0       	ldi	r24, 0x07	; 7
    15ea:	9f e1       	ldi	r25, 0x1F	; 31
    15ec:	11 d2       	rcall	.+1058   	; 0x1a10 <SYS_TimerStart>
    15ee:	47 c0       	rjmp	.+142    	; 0x167e <nwkTxTaskHandler+0x112>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    15f0:	c8 82       	st	Y, r12
    15f2:	45 c0       	rjmp	.+138    	; 0x167e <nwkTxTaskHandler+0x112>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    15f4:	80 91 21 1f 	lds	r24, 0x1F21	; 0x801f21 <nwkTxPhyActiveFrame>
    15f8:	90 91 22 1f 	lds	r25, 0x1F22	; 0x801f22 <nwkTxPhyActiveFrame+0x1>
    15fc:	89 2b       	or	r24, r25
    15fe:	09 f0       	breq	.+2      	; 0x1602 <nwkTxTaskHandler+0x96>
    1600:	3e c0       	rjmp	.+124    	; 0x167e <nwkTxTaskHandler+0x112>
        {
          nwkTxPhyActiveFrame = frame;
    1602:	d0 93 22 1f 	sts	0x1F22, r29	; 0x801f22 <nwkTxPhyActiveFrame+0x1>
    1606:	c0 93 21 1f 	sts	0x1F21, r28	; 0x801f21 <nwkTxPhyActiveFrame>
          frame->state = NWK_TX_STATE_WAIT_CONF;
    160a:	a8 82       	st	Y, r10
          PHY_DataReq(frame->data, frame->size);
    160c:	69 81       	ldd	r22, Y+1	; 0x01
    160e:	ce 01       	movw	r24, r28
    1610:	02 96       	adiw	r24, 0x02	; 2
    1612:	cb d0       	rcall	.+406    	; 0x17aa <PHY_DataReq>
          nwkIb.lock++;
    1614:	f8 01       	movw	r30, r16
    1616:	86 a1       	ldd	r24, Z+38	; 0x26
    1618:	97 a1       	ldd	r25, Z+39	; 0x27
    161a:	01 96       	adiw	r24, 0x01	; 1
    161c:	97 a3       	std	Z+39, r25	; 0x27
    161e:	86 a3       	std	Z+38, r24	; 0x26
    1620:	2e c0       	rjmp	.+92     	; 0x167e <nwkTxTaskHandler+0x112>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    1622:	fe 01       	movw	r30, r28
    1624:	ed 57       	subi	r30, 0x7D	; 125
    1626:	ff 4f       	sbci	r31, 0xFF	; 255
    1628:	80 81       	ld	r24, Z
    162a:	81 11       	cpse	r24, r1
    162c:	17 c0       	rjmp	.+46     	; 0x165c <nwkTxTaskHandler+0xf0>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    162e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1630:	3e 85       	ldd	r19, Y+14	; 0x0e
    1632:	f8 01       	movw	r30, r16
    1634:	80 81       	ld	r24, Z
    1636:	91 81       	ldd	r25, Z+1	; 0x01
    1638:	28 17       	cp	r18, r24
    163a:	39 07       	cpc	r19, r25
    163c:	69 f4       	brne	.+26     	; 0x1658 <nwkTxTaskHandler+0xec>
    163e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1640:	80 ff       	sbrs	r24, 0
    1642:	0a c0       	rjmp	.+20     	; 0x1658 <nwkTxTaskHandler+0xec>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    1644:	98 82       	st	Y, r9
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    1646:	fe 01       	movw	r30, r28
    1648:	ec 57       	subi	r30, 0x7C	; 124
    164a:	ff 4f       	sbci	r31, 0xFF	; 255
    164c:	f1 82       	std	Z+1, r15	; 0x01
    164e:	e0 82       	st	Z, r14
            SYS_TimerStart(&nwkTxAckWaitTimer);
    1650:	84 e1       	ldi	r24, 0x14	; 20
    1652:	9f e1       	ldi	r25, 0x1F	; 31
    1654:	dd d1       	rcall	.+954    	; 0x1a10 <SYS_TimerStart>
    1656:	13 c0       	rjmp	.+38     	; 0x167e <nwkTxTaskHandler+0x112>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    1658:	d8 82       	st	Y, r13
    165a:	11 c0       	rjmp	.+34     	; 0x167e <nwkTxTaskHandler+0x112>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    165c:	d8 82       	st	Y, r13
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    165e:	0f c0       	rjmp	.+30     	; 0x167e <nwkTxTaskHandler+0x112>
    1660:	ce 01       	movw	r24, r28
    1662:	b8 da       	rcall	.-2704   	; 0xbd4 <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    1664:	fe 01       	movw	r30, r28
    1666:	e9 57       	subi	r30, 0x79	; 121
    1668:	ff 4f       	sbci	r31, 0xFF	; 255
    166a:	01 90       	ld	r0, Z+
    166c:	f0 81       	ld	r31, Z
    166e:	e0 2d       	mov	r30, r0
    1670:	30 97       	sbiw	r30, 0x00	; 0
          nwkFrameFree(frame);
    1672:	19 f4       	brne	.+6      	; 0x167a <nwkTxTaskHandler+0x10e>
    1674:	ce 01       	movw	r24, r28
    1676:	8f d9       	rcall	.-3298   	; 0x996 <nwkFrameFree>
        else
          frame->tx.confirm(frame);
    1678:	02 c0       	rjmp	.+4      	; 0x167e <nwkTxTaskHandler+0x112>
    167a:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    167c:	19 95       	eicall
    167e:	ce 01       	movw	r24, r28
    1680:	94 d9       	rcall	.-3288   	; 0x9aa <nwkFrameNext>
    1682:	ec 01       	movw	r28, r24
    1684:	89 2b       	or	r24, r25
    1686:	09 f0       	breq	.+2      	; 0x168a <nwkTxTaskHandler+0x11e>
    1688:	9a cf       	rjmp	.-204    	; 0x15be <nwkTxTaskHandler+0x52>

      default:
        break;
    };
  }
}
    168a:	df 91       	pop	r29
    168c:	cf 91       	pop	r28
    168e:	1f 91       	pop	r17
    1690:	0f 91       	pop	r16
    1692:	ff 90       	pop	r15
    1694:	ef 90       	pop	r14
    1696:	df 90       	pop	r13
    1698:	cf 90       	pop	r12
    169a:	bf 90       	pop	r11
    169c:	af 90       	pop	r10
    169e:	9f 90       	pop	r9
    16a0:	08 95       	ret

000016a2 <phySetChannel>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    16a2:	80 91 23 1f 	lds	r24, 0x1F23	; 0x801f23 <phyBand>
    16a6:	98 2f       	mov	r25, r24
    16a8:	9f 70       	andi	r25, 0x0F	; 15
    16aa:	e4 e5       	ldi	r30, 0x54	; 84
    16ac:	f1 e0       	ldi	r31, 0x01	; 1
    16ae:	80 81       	ld	r24, Z
    16b0:	80 7f       	andi	r24, 0xF0	; 240
    16b2:	89 2b       	or	r24, r25
    16b4:	80 83       	st	Z, r24
    16b6:	80 91 23 1f 	lds	r24, 0x1F23	; 0x801f23 <phyBand>
    16ba:	88 23       	and	r24, r24
    16bc:	29 f0       	breq	.+10     	; 0x16c8 <phySetChannel+0x26>
    16be:	80 91 24 1f 	lds	r24, 0x1F24	; 0x801f24 <phyChannel>
    16c2:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7c0153>
    16c6:	08 95       	ret
    16c8:	80 91 24 1f 	lds	r24, 0x1F24	; 0x801f24 <phyChannel>
    16cc:	98 2f       	mov	r25, r24
    16ce:	9f 71       	andi	r25, 0x1F	; 31
    16d0:	e8 e4       	ldi	r30, 0x48	; 72
    16d2:	f1 e0       	ldi	r31, 0x01	; 1
    16d4:	80 81       	ld	r24, Z
    16d6:	80 7e       	andi	r24, 0xE0	; 224
    16d8:	89 2b       	or	r24, r25
    16da:	80 83       	st	Z, r24
    16dc:	08 95       	ret

000016de <phyTrxSetState>:
    16de:	93 e0       	ldi	r25, 0x03	; 3
    16e0:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    16e4:	e1 e4       	ldi	r30, 0x41	; 65
    16e6:	f1 e0       	ldi	r31, 0x01	; 1
    16e8:	90 81       	ld	r25, Z
    16ea:	9f 71       	andi	r25, 0x1F	; 31
    16ec:	98 30       	cpi	r25, 0x08	; 8
    16ee:	e1 f7       	brne	.-8      	; 0x16e8 <phyTrxSetState+0xa>
    16f0:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    16f4:	e1 e4       	ldi	r30, 0x41	; 65
    16f6:	f1 e0       	ldi	r31, 0x01	; 1
    16f8:	90 81       	ld	r25, Z
    16fa:	9f 71       	andi	r25, 0x1F	; 31
    16fc:	89 13       	cpse	r24, r25
    16fe:	fc cf       	rjmp	.-8      	; 0x16f8 <phyTrxSetState+0x1a>
    1700:	08 95       	ret

00001702 <phySetRxState>:
    1702:	88 e0       	ldi	r24, 0x08	; 8
    1704:	ec df       	rcall	.-40     	; 0x16de <phyTrxSetState>
    1706:	8f ef       	ldi	r24, 0xFF	; 255
    1708:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    170c:	80 91 25 1f 	lds	r24, 0x1F25	; 0x801f25 <phyRxState>
    1710:	88 23       	and	r24, r24
    1712:	11 f0       	breq	.+4      	; 0x1718 <phySetRxState+0x16>
    1714:	86 e1       	ldi	r24, 0x16	; 22
    1716:	e3 cf       	rjmp	.-58     	; 0x16de <phyTrxSetState>
    1718:	08 95       	ret

0000171a <PHY_Init>:
    171a:	e9 e3       	ldi	r30, 0x39	; 57
    171c:	f1 e0       	ldi	r31, 0x01	; 1
    171e:	80 81       	ld	r24, Z
    1720:	81 60       	ori	r24, 0x01	; 1
    1722:	80 83       	st	Z, r24
    1724:	10 92 25 1f 	sts	0x1F25, r1	; 0x801f25 <phyRxState>
    1728:	10 92 23 1f 	sts	0x1F23, r1	; 0x801f23 <phyBand>
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	80 93 a6 1f 	sts	0x1FA6, r24	; 0x801fa6 <phyState>
    1732:	88 e0       	ldi	r24, 0x08	; 8
    1734:	d4 df       	rcall	.-88     	; 0x16de <phyTrxSetState>
    1736:	8b ee       	ldi	r24, 0xEB	; 235
    1738:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x7c0156>
    173c:	ec e4       	ldi	r30, 0x4C	; 76
    173e:	f1 e0       	ldi	r31, 0x01	; 1
    1740:	80 81       	ld	r24, Z
    1742:	80 68       	ori	r24, 0x80	; 128
    1744:	80 83       	st	Z, r24
    1746:	08 95       	ret

00001748 <PHY_SetRxState>:
    1748:	80 93 25 1f 	sts	0x1F25, r24	; 0x801f25 <phyRxState>
    174c:	da cf       	rjmp	.-76     	; 0x1702 <phySetRxState>
    174e:	08 95       	ret

00001750 <PHY_SetChannel>:
    1750:	80 93 24 1f 	sts	0x1F24, r24	; 0x801f24 <phyChannel>
    1754:	a6 cf       	rjmp	.-180    	; 0x16a2 <phySetChannel>
    1756:	08 95       	ret

00001758 <PHY_SetPanId>:
    1758:	cf 93       	push	r28
    175a:	df 93       	push	r29
    175c:	1f 92       	push	r1
    175e:	1f 92       	push	r1
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
    1764:	9a 83       	std	Y+2, r25	; 0x02
    1766:	89 83       	std	Y+1, r24	; 0x01
    1768:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
    176c:	8a 81       	ldd	r24, Y+2	; 0x02
    176e:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	df 91       	pop	r29
    1778:	cf 91       	pop	r28
    177a:	08 95       	ret

0000177c <PHY_SetShortAddr>:
    177c:	cf 93       	push	r28
    177e:	df 93       	push	r29
    1780:	1f 92       	push	r1
    1782:	1f 92       	push	r1
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
    1788:	9a 83       	std	Y+2, r25	; 0x02
    178a:	89 83       	std	Y+1, r24	; 0x01
    178c:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
    1796:	99 81       	ldd	r25, Y+1	; 0x01
    1798:	8a 81       	ldd	r24, Y+2	; 0x02
    179a:	89 0f       	add	r24, r25
    179c:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	df 91       	pop	r29
    17a6:	cf 91       	pop	r28
    17a8:	08 95       	ret

000017aa <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    17aa:	1f 93       	push	r17
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	18 2f       	mov	r17, r24
    17b2:	d9 2f       	mov	r29, r25
    17b4:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    17b6:	89 e1       	ldi	r24, 0x19	; 25
    17b8:	92 df       	rcall	.-220    	; 0x16de <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    17ba:	8f ef       	ldi	r24, 0xFF	; 255
    17bc:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    17c0:	82 e0       	ldi	r24, 0x02	; 2
    17c2:	8c 0f       	add	r24, r28
    17c4:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x7c0180>
  for (uint8_t i = 0; i < size; i++)
    17c8:	cc 23       	and	r28, r28
    17ca:	71 f0       	breq	.+28     	; 0x17e8 <PHY_DataReq+0x3e>
    17cc:	a1 2f       	mov	r26, r17
    17ce:	bd 2f       	mov	r27, r29
    17d0:	c1 50       	subi	r28, 0x01	; 1
    17d2:	6c 2f       	mov	r22, r28
    17d4:	70 e0       	ldi	r23, 0x00	; 0
    17d6:	6e 57       	subi	r22, 0x7E	; 126
    17d8:	7e 4f       	sbci	r23, 0xFE	; 254
    17da:	e1 e8       	ldi	r30, 0x81	; 129
    17dc:	f1 e0       	ldi	r31, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    17de:	8d 91       	ld	r24, X+
    17e0:	81 93       	st	Z+, r24
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    17e2:	e6 17       	cp	r30, r22
    17e4:	f7 07       	cpc	r31, r23
    17e6:	d9 f7       	brne	.-10     	; 0x17de <PHY_DataReq+0x34>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    17e8:	83 e0       	ldi	r24, 0x03	; 3
    17ea:	80 93 a6 1f 	sts	0x1FA6, r24	; 0x801fa6 <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    17ee:	82 e0       	ldi	r24, 0x02	; 2
    17f0:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
}
    17f4:	df 91       	pop	r29
    17f6:	cf 91       	pop	r28
    17f8:	1f 91       	pop	r17
    17fa:	08 95       	ret

000017fc <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    17fc:	1f 93       	push	r17
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
    1802:	00 d0       	rcall	.+0      	; 0x1804 <PHY_TaskHandler+0x8>
    1804:	1f 92       	push	r1
    1806:	1f 92       	push	r1
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    180c:	80 91 a6 1f 	lds	r24, 0x1FA6	; 0x801fa6 <phyState>
    1810:	82 30       	cpi	r24, 0x02	; 2
    1812:	09 f4       	brne	.+2      	; 0x1816 <PHY_TaskHandler+0x1a>
    1814:	65 c0       	rjmp	.+202    	; 0x18e0 <PHY_TaskHandler+0xe4>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    1816:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    181a:	83 ff       	sbrs	r24, 3
    181c:	3e c0       	rjmp	.+124    	; 0x189a <PHY_TaskHandler+0x9e>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    181e:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7c017b>

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    1822:	6a 2f       	mov	r22, r26
    1824:	70 e0       	ldi	r23, 0x00	; 0
    1826:	ab 01       	movw	r20, r22
    1828:	4f 5f       	subi	r20, 0xFF	; 255
    182a:	5f 4f       	sbci	r21, 0xFF	; 255
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	20 e0       	ldi	r18, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    1832:	fc 01       	movw	r30, r24
    1834:	e0 58       	subi	r30, 0x80	; 128
    1836:	fe 4f       	sbci	r31, 0xFE	; 254
    1838:	30 81       	ld	r19, Z
    183a:	fc 01       	movw	r30, r24
    183c:	ea 5d       	subi	r30, 0xDA	; 218
    183e:	f0 4e       	sbci	r31, 0xE0	; 224
    1840:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    1842:	2f 5f       	subi	r18, 0xFF	; 255
    1844:	82 2f       	mov	r24, r18
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	84 17       	cp	r24, r20
    184a:	95 07       	cpc	r25, r21
    184c:	94 f3       	brlt	.-28     	; 0x1832 <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    184e:	86 e2       	ldi	r24, 0x26	; 38
    1850:	9f e1       	ldi	r25, 0x1F	; 31
    1852:	9a 83       	std	Y+2, r25	; 0x02
    1854:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    1856:	a2 50       	subi	r26, 0x02	; 2
    1858:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    185a:	fb 01       	movw	r30, r22
    185c:	ea 5d       	subi	r30, 0xDA	; 218
    185e:	f0 4e       	sbci	r31, 0xE0	; 224
    1860:	80 81       	ld	r24, Z
    1862:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    1864:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7c0147>
    1868:	8a 55       	subi	r24, 0x5A	; 90
    186a:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    186c:	ce 01       	movw	r24, r28
    186e:	01 96       	adiw	r24, 0x01	; 1
    1870:	bd da       	rcall	.-2694   	; 0xdec <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    1872:	e1 e4       	ldi	r30, 0x41	; 65
    1874:	f1 e0       	ldi	r31, 0x01	; 1
    1876:	80 81       	ld	r24, Z
    1878:	8f 71       	andi	r24, 0x1F	; 31
    187a:	86 31       	cpi	r24, 0x16	; 22
    187c:	e1 f7       	brne	.-8      	; 0x1876 <PHY_TaskHandler+0x7a>

    IRQ_STATUS_REG_s.rxEnd = 1;
    187e:	ef e4       	ldi	r30, 0x4F	; 79
    1880:	f1 e0       	ldi	r31, 0x01	; 1
    1882:	80 81       	ld	r24, Z
    1884:	88 60       	ori	r24, 0x08	; 8
    1886:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    1888:	ec e4       	ldi	r30, 0x4C	; 76
    188a:	f1 e0       	ldi	r31, 0x01	; 1
    188c:	80 81       	ld	r24, Z
    188e:	8f 77       	andi	r24, 0x7F	; 127
    1890:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    1892:	80 81       	ld	r24, Z
    1894:	80 68       	ori	r24, 0x80	; 128
    1896:	80 83       	st	Z, r24
    1898:	23 c0       	rjmp	.+70     	; 0x18e0 <PHY_TaskHandler+0xe4>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    189a:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    189e:	86 ff       	sbrs	r24, 6
    18a0:	1f c0       	rjmp	.+62     	; 0x18e0 <PHY_TaskHandler+0xe4>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    18a2:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    18a6:	8f 71       	andi	r24, 0x1F	; 31
    18a8:	89 31       	cpi	r24, 0x19	; 25
    18aa:	a9 f4       	brne	.+42     	; 0x18d6 <PHY_TaskHandler+0xda>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    18ac:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    18b0:	12 95       	swap	r17
    18b2:	16 95       	lsr	r17
    18b4:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    18b6:	49 f0       	breq	.+18     	; 0x18ca <PHY_TaskHandler+0xce>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    18b8:	13 30       	cpi	r17, 0x03	; 3
    18ba:	21 f0       	breq	.+8      	; 0x18c4 <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    18bc:	15 30       	cpi	r17, 0x05	; 5
    18be:	21 f0       	breq	.+8      	; 0x18c8 <PHY_TaskHandler+0xcc>
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    18c0:	13 e0       	ldi	r17, 0x03	; 3
    18c2:	03 c0       	rjmp	.+6      	; 0x18ca <PHY_TaskHandler+0xce>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    18c4:	11 e0       	ldi	r17, 0x01	; 1
    18c6:	01 c0       	rjmp	.+2      	; 0x18ca <PHY_TaskHandler+0xce>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    18c8:	12 e0       	ldi	r17, 0x02	; 2
    18ca:	1b df       	rcall	.-458    	; 0x1702 <phySetRxState>
      phyState = PHY_STATE_IDLE;
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	80 93 a6 1f 	sts	0x1FA6, r24	; 0x801fa6 <phyState>

      PHY_DataConf(status);
    18d2:	81 2f       	mov	r24, r17
    18d4:	28 de       	rcall	.-944    	; 0x1526 <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    18d6:	ef e4       	ldi	r30, 0x4F	; 79
    18d8:	f1 e0       	ldi	r31, 0x01	; 1
    18da:	80 81       	ld	r24, Z
    18dc:	80 64       	ori	r24, 0x40	; 64
    18de:	80 83       	st	Z, r24
  }
}
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	df 91       	pop	r29
    18ec:	cf 91       	pop	r28
    18ee:	1f 91       	pop	r17
    18f0:	08 95       	ret

000018f2 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    18f2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <HAL_Init>
  SYS_TimerInit();
    18f6:	6d d0       	rcall	.+218    	; 0x19d2 <SYS_TimerInit>
  PHY_Init();
    18f8:	10 df       	rcall	.-480    	; 0x171a <PHY_Init>
    18fa:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <NWK_Init>
  NWK_Init();
    18fe:	08 95       	ret

00001900 <SYS_TaskHandler>:
    1900:	7d df       	rcall	.-262    	; 0x17fc <PHY_TaskHandler>
/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
  NWK_TaskHandler();
    1902:	0e 94 94 03 	call	0x728	; 0x728 <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    1906:	8f c0       	rjmp	.+286    	; 0x1a26 <SYS_TimerTaskHandler>
    1908:	08 95       	ret

0000190a <placeTimer>:

      break;
    }
    prev = t;
  }
}
    190a:	0f 93       	push	r16
    190c:	1f 93       	push	r17
    190e:	cf 93       	push	r28
    1910:	df 93       	push	r29
    1912:	ec 01       	movw	r28, r24
    1914:	80 91 a7 1f 	lds	r24, 0x1FA7	; 0x801fa7 <timers>
    1918:	90 91 a8 1f 	lds	r25, 0x1FA8	; 0x801fa8 <timers+0x1>
    191c:	00 97       	sbiw	r24, 0x00	; 0
    191e:	09 f4       	brne	.+2      	; 0x1922 <placeTimer+0x18>
    1920:	45 c0       	rjmp	.+138    	; 0x19ac <placeTimer+0xa2>
    1922:	4e 81       	ldd	r20, Y+6	; 0x06
    1924:	5f 81       	ldd	r21, Y+7	; 0x07
    1926:	68 85       	ldd	r22, Y+8	; 0x08
    1928:	79 85       	ldd	r23, Y+9	; 0x09
    192a:	fc 01       	movw	r30, r24
    192c:	02 81       	ldd	r16, Z+2	; 0x02
    192e:	13 81       	ldd	r17, Z+3	; 0x03
    1930:	24 81       	ldd	r18, Z+4	; 0x04
    1932:	35 81       	ldd	r19, Z+5	; 0x05
    1934:	40 17       	cp	r20, r16
    1936:	51 07       	cpc	r21, r17
    1938:	62 07       	cpc	r22, r18
    193a:	73 07       	cpc	r23, r19
    193c:	60 f0       	brcs	.+24     	; 0x1956 <placeTimer+0x4c>
    193e:	dc 01       	movw	r26, r24
    1940:	17 c0       	rjmp	.+46     	; 0x1970 <placeTimer+0x66>
    1942:	02 81       	ldd	r16, Z+2	; 0x02
    1944:	13 81       	ldd	r17, Z+3	; 0x03
    1946:	24 81       	ldd	r18, Z+4	; 0x04
    1948:	35 81       	ldd	r19, Z+5	; 0x05
    194a:	40 17       	cp	r20, r16
    194c:	51 07       	cpc	r21, r17
    194e:	62 07       	cpc	r22, r18
    1950:	73 07       	cpc	r23, r19
    1952:	68 f4       	brcc	.+26     	; 0x196e <placeTimer+0x64>
    1954:	03 c0       	rjmp	.+6      	; 0x195c <placeTimer+0x52>
    1956:	fc 01       	movw	r30, r24
    1958:	a0 e0       	ldi	r26, 0x00	; 0
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	04 1b       	sub	r16, r20
    195e:	15 0b       	sbc	r17, r21
    1960:	26 0b       	sbc	r18, r22
    1962:	37 0b       	sbc	r19, r23
    1964:	02 83       	std	Z+2, r16	; 0x02
    1966:	13 83       	std	Z+3, r17	; 0x03
    1968:	24 83       	std	Z+4, r18	; 0x04
    196a:	35 83       	std	Z+5, r19	; 0x05
    196c:	0a c0       	rjmp	.+20     	; 0x1982 <placeTimer+0x78>
    196e:	df 01       	movw	r26, r30
    1970:	40 1b       	sub	r20, r16
    1972:	51 0b       	sbc	r21, r17
    1974:	62 0b       	sbc	r22, r18
    1976:	73 0b       	sbc	r23, r19
    1978:	ed 91       	ld	r30, X+
    197a:	fc 91       	ld	r31, X
    197c:	11 97       	sbiw	r26, 0x01	; 1
    197e:	30 97       	sbiw	r30, 0x00	; 0
    1980:	01 f7       	brne	.-64     	; 0x1942 <placeTimer+0x38>
    1982:	4a 83       	std	Y+2, r20	; 0x02
    1984:	5b 83       	std	Y+3, r21	; 0x03
    1986:	6c 83       	std	Y+4, r22	; 0x04
    1988:	7d 83       	std	Y+5, r23	; 0x05
    198a:	10 97       	sbiw	r26, 0x00	; 0
    198c:	41 f0       	breq	.+16     	; 0x199e <placeTimer+0x94>
    198e:	8d 91       	ld	r24, X+
    1990:	9c 91       	ld	r25, X
    1992:	11 97       	sbiw	r26, 0x01	; 1
    1994:	99 83       	std	Y+1, r25	; 0x01
    1996:	88 83       	st	Y, r24
    1998:	cd 93       	st	X+, r28
    199a:	dc 93       	st	X, r29
    199c:	15 c0       	rjmp	.+42     	; 0x19c8 <placeTimer+0xbe>
    199e:	99 83       	std	Y+1, r25	; 0x01
    19a0:	88 83       	st	Y, r24
    19a2:	d0 93 a8 1f 	sts	0x1FA8, r29	; 0x801fa8 <timers+0x1>
    19a6:	c0 93 a7 1f 	sts	0x1FA7, r28	; 0x801fa7 <timers>
    19aa:	0e c0       	rjmp	.+28     	; 0x19c8 <placeTimer+0xbe>
    19ac:	19 82       	std	Y+1, r1	; 0x01
    19ae:	18 82       	st	Y, r1
    19b0:	8e 81       	ldd	r24, Y+6	; 0x06
    19b2:	9f 81       	ldd	r25, Y+7	; 0x07
    19b4:	a8 85       	ldd	r26, Y+8	; 0x08
    19b6:	b9 85       	ldd	r27, Y+9	; 0x09
    19b8:	8a 83       	std	Y+2, r24	; 0x02
    19ba:	9b 83       	std	Y+3, r25	; 0x03
    19bc:	ac 83       	std	Y+4, r26	; 0x04
    19be:	bd 83       	std	Y+5, r27	; 0x05
    19c0:	d0 93 a8 1f 	sts	0x1FA8, r29	; 0x801fa8 <timers+0x1>
    19c4:	c0 93 a7 1f 	sts	0x1FA7, r28	; 0x801fa7 <timers>
    19c8:	df 91       	pop	r29
    19ca:	cf 91       	pop	r28
    19cc:	1f 91       	pop	r17
    19ce:	0f 91       	pop	r16
    19d0:	08 95       	ret

000019d2 <SYS_TimerInit>:
    19d2:	10 92 a8 1f 	sts	0x1FA8, r1	; 0x801fa8 <timers+0x1>
    19d6:	10 92 a7 1f 	sts	0x1FA7, r1	; 0x801fa7 <timers>
    19da:	08 95       	ret

000019dc <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    19dc:	e0 91 a7 1f 	lds	r30, 0x1FA7	; 0x801fa7 <timers>
    19e0:	f0 91 a8 1f 	lds	r31, 0x1FA8	; 0x801fa8 <timers+0x1>
    19e4:	30 97       	sbiw	r30, 0x00	; 0
    19e6:	71 f0       	breq	.+28     	; 0x1a04 <SYS_TimerStarted+0x28>
    if (t == timer)
    19e8:	e8 17       	cp	r30, r24
    19ea:	f9 07       	cpc	r31, r25
    19ec:	21 f4       	brne	.+8      	; 0x19f6 <SYS_TimerStarted+0x1a>
    19ee:	0c c0       	rjmp	.+24     	; 0x1a08 <SYS_TimerStarted+0x2c>
    19f0:	8e 17       	cp	r24, r30
    19f2:	9f 07       	cpc	r25, r31
    19f4:	59 f0       	breq	.+22     	; 0x1a0c <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    19f6:	01 90       	ld	r0, Z+
    19f8:	f0 81       	ld	r31, Z
    19fa:	e0 2d       	mov	r30, r0
    19fc:	30 97       	sbiw	r30, 0x00	; 0
    19fe:	c1 f7       	brne	.-16     	; 0x19f0 <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	08 95       	ret
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	08 95       	ret
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    1a0e:	08 95       	ret

00001a10 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    1a10:	cf 93       	push	r28
    1a12:	df 93       	push	r29
    1a14:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    1a16:	e2 df       	rcall	.-60     	; 0x19dc <SYS_TimerStarted>
    1a18:	81 11       	cpse	r24, r1
    1a1a:	02 c0       	rjmp	.+4      	; 0x1a20 <SYS_TimerStart+0x10>
    placeTimer(timer);
    1a1c:	ce 01       	movw	r24, r28
    1a1e:	75 df       	rcall	.-278    	; 0x190a <placeTimer>
}
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	08 95       	ret

00001a26 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    1a26:	cf 92       	push	r12
    1a28:	df 92       	push	r13
    1a2a:	ef 92       	push	r14
    1a2c:	ff 92       	push	r15
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    1a32:	80 91 a9 1f 	lds	r24, 0x1FA9	; 0x801fa9 <halTimerIrqCount>
    1a36:	88 23       	and	r24, r24
    1a38:	09 f4       	brne	.+2      	; 0x1a3c <SYS_TimerTaskHandler+0x16>
    1a3a:	59 c0       	rjmp	.+178    	; 0x1aee <SYS_TimerTaskHandler+0xc8>
    return;

  ATOMIC_SECTION_ENTER
    1a3c:	8f b7       	in	r24, 0x3f	; 63
    1a3e:	f8 94       	cli
    cnt = halTimerIrqCount;
    1a40:	c0 90 a9 1f 	lds	r12, 0x1FA9	; 0x801fa9 <halTimerIrqCount>
    halTimerIrqCount = 0;
    1a44:	10 92 a9 1f 	sts	0x1FA9, r1	; 0x801fa9 <halTimerIrqCount>
  ATOMIC_SECTION_LEAVE
    1a48:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
    1a4a:	d1 2c       	mov	r13, r1
    1a4c:	e1 2c       	mov	r14, r1
    1a4e:	f1 2c       	mov	r15, r1
    1a50:	cc 0c       	add	r12, r12
    1a52:	dd 1c       	adc	r13, r13
    1a54:	ee 1c       	adc	r14, r14
    1a56:	ff 1c       	adc	r15, r15
    1a58:	d7 01       	movw	r26, r14
    1a5a:	c6 01       	movw	r24, r12
    1a5c:	88 0f       	add	r24, r24
    1a5e:	99 1f       	adc	r25, r25
    1a60:	aa 1f       	adc	r26, r26
    1a62:	bb 1f       	adc	r27, r27
    1a64:	88 0f       	add	r24, r24
    1a66:	99 1f       	adc	r25, r25
    1a68:	aa 1f       	adc	r26, r26
    1a6a:	bb 1f       	adc	r27, r27
    1a6c:	c8 0e       	add	r12, r24
    1a6e:	d9 1e       	adc	r13, r25
    1a70:	ea 1e       	adc	r14, r26
    1a72:	fb 1e       	adc	r15, r27

  while (timers && (timers->timeout <= elapsed))
    1a74:	c0 91 a7 1f 	lds	r28, 0x1FA7	; 0x801fa7 <timers>
    1a78:	d0 91 a8 1f 	lds	r29, 0x1FA8	; 0x801fa8 <timers+0x1>
    1a7c:	20 97       	sbiw	r28, 0x00	; 0
    1a7e:	b9 f1       	breq	.+110    	; 0x1aee <SYS_TimerTaskHandler+0xc8>
    1a80:	8a 81       	ldd	r24, Y+2	; 0x02
    1a82:	9b 81       	ldd	r25, Y+3	; 0x03
    1a84:	ac 81       	ldd	r26, Y+4	; 0x04
    1a86:	bd 81       	ldd	r27, Y+5	; 0x05
    1a88:	c8 16       	cp	r12, r24
    1a8a:	d9 06       	cpc	r13, r25
    1a8c:	ea 06       	cpc	r14, r26
    1a8e:	fb 06       	cpc	r15, r27
    1a90:	10 f1       	brcs	.+68     	; 0x1ad6 <SYS_TimerTaskHandler+0xb0>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    1a92:	c8 1a       	sub	r12, r24
    1a94:	d9 0a       	sbc	r13, r25
    1a96:	ea 0a       	sbc	r14, r26
    1a98:	fb 0a       	sbc	r15, r27
    timers = timers->next;
    1a9a:	88 81       	ld	r24, Y
    1a9c:	99 81       	ldd	r25, Y+1	; 0x01
    1a9e:	90 93 a8 1f 	sts	0x1FA8, r25	; 0x801fa8 <timers+0x1>
    1aa2:	80 93 a7 1f 	sts	0x1FA7, r24	; 0x801fa7 <timers>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    1aa6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1aa8:	81 30       	cpi	r24, 0x01	; 1
    1aaa:	11 f4       	brne	.+4      	; 0x1ab0 <SYS_TimerTaskHandler+0x8a>
      placeTimer(timer);
    1aac:	ce 01       	movw	r24, r28
    1aae:	2d df       	rcall	.-422    	; 0x190a <placeTimer>
    timer->handler(timer);
    1ab0:	eb 85       	ldd	r30, Y+11	; 0x0b
    1ab2:	fc 85       	ldd	r31, Y+12	; 0x0c
    1ab4:	ce 01       	movw	r24, r28
    1ab6:	19 95       	eicall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    1ab8:	c0 91 a7 1f 	lds	r28, 0x1FA7	; 0x801fa7 <timers>
    1abc:	d0 91 a8 1f 	lds	r29, 0x1FA8	; 0x801fa8 <timers+0x1>
    1ac0:	20 97       	sbiw	r28, 0x00	; 0
    1ac2:	a9 f0       	breq	.+42     	; 0x1aee <SYS_TimerTaskHandler+0xc8>
    1ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac8:	ac 81       	ldd	r26, Y+4	; 0x04
    1aca:	bd 81       	ldd	r27, Y+5	; 0x05
    1acc:	c8 16       	cp	r12, r24
    1ace:	d9 06       	cpc	r13, r25
    1ad0:	ea 06       	cpc	r14, r26
    1ad2:	fb 06       	cpc	r15, r27
    1ad4:	f0 f6       	brcc	.-68     	; 0x1a92 <SYS_TimerTaskHandler+0x6c>
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    timers->timeout -= elapsed;
    1ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad8:	9b 81       	ldd	r25, Y+3	; 0x03
    1ada:	ac 81       	ldd	r26, Y+4	; 0x04
    1adc:	bd 81       	ldd	r27, Y+5	; 0x05
    1ade:	8c 19       	sub	r24, r12
    1ae0:	9d 09       	sbc	r25, r13
    1ae2:	ae 09       	sbc	r26, r14
    1ae4:	bf 09       	sbc	r27, r15
    1ae6:	8a 83       	std	Y+2, r24	; 0x02
    1ae8:	9b 83       	std	Y+3, r25	; 0x03
    1aea:	ac 83       	std	Y+4, r26	; 0x04
    1aec:	bd 83       	std	Y+5, r27	; 0x05
}
    1aee:	df 91       	pop	r29
    1af0:	cf 91       	pop	r28
    1af2:	ff 90       	pop	r15
    1af4:	ef 90       	pop	r14
    1af6:	df 90       	pop	r13
    1af8:	cf 90       	pop	r12
    1afa:	08 95       	ret

00001afc <__udivmodsi4>:
    1afc:	a1 e2       	ldi	r26, 0x21	; 33
    1afe:	1a 2e       	mov	r1, r26
    1b00:	aa 1b       	sub	r26, r26
    1b02:	bb 1b       	sub	r27, r27
    1b04:	fd 01       	movw	r30, r26
    1b06:	0d c0       	rjmp	.+26     	; 0x1b22 <__udivmodsi4_ep>

00001b08 <__udivmodsi4_loop>:
    1b08:	aa 1f       	adc	r26, r26
    1b0a:	bb 1f       	adc	r27, r27
    1b0c:	ee 1f       	adc	r30, r30
    1b0e:	ff 1f       	adc	r31, r31
    1b10:	a2 17       	cp	r26, r18
    1b12:	b3 07       	cpc	r27, r19
    1b14:	e4 07       	cpc	r30, r20
    1b16:	f5 07       	cpc	r31, r21
    1b18:	20 f0       	brcs	.+8      	; 0x1b22 <__udivmodsi4_ep>
    1b1a:	a2 1b       	sub	r26, r18
    1b1c:	b3 0b       	sbc	r27, r19
    1b1e:	e4 0b       	sbc	r30, r20
    1b20:	f5 0b       	sbc	r31, r21

00001b22 <__udivmodsi4_ep>:
    1b22:	66 1f       	adc	r22, r22
    1b24:	77 1f       	adc	r23, r23
    1b26:	88 1f       	adc	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	1a 94       	dec	r1
    1b2c:	69 f7       	brne	.-38     	; 0x1b08 <__udivmodsi4_loop>
    1b2e:	60 95       	com	r22
    1b30:	70 95       	com	r23
    1b32:	80 95       	com	r24
    1b34:	90 95       	com	r25
    1b36:	9b 01       	movw	r18, r22
    1b38:	ac 01       	movw	r20, r24
    1b3a:	bd 01       	movw	r22, r26
    1b3c:	cf 01       	movw	r24, r30
    1b3e:	08 95       	ret

00001b40 <do_rand>:
    1b40:	8f 92       	push	r8
    1b42:	9f 92       	push	r9
    1b44:	af 92       	push	r10
    1b46:	bf 92       	push	r11
    1b48:	cf 92       	push	r12
    1b4a:	df 92       	push	r13
    1b4c:	ef 92       	push	r14
    1b4e:	ff 92       	push	r15
    1b50:	cf 93       	push	r28
    1b52:	df 93       	push	r29
    1b54:	ec 01       	movw	r28, r24
    1b56:	68 81       	ld	r22, Y
    1b58:	79 81       	ldd	r23, Y+1	; 0x01
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b5e:	61 15       	cp	r22, r1
    1b60:	71 05       	cpc	r23, r1
    1b62:	81 05       	cpc	r24, r1
    1b64:	91 05       	cpc	r25, r1
    1b66:	21 f4       	brne	.+8      	; 0x1b70 <do_rand+0x30>
    1b68:	64 e2       	ldi	r22, 0x24	; 36
    1b6a:	79 ed       	ldi	r23, 0xD9	; 217
    1b6c:	8b e5       	ldi	r24, 0x5B	; 91
    1b6e:	97 e0       	ldi	r25, 0x07	; 7
    1b70:	2d e1       	ldi	r18, 0x1D	; 29
    1b72:	33 ef       	ldi	r19, 0xF3	; 243
    1b74:	41 e0       	ldi	r20, 0x01	; 1
    1b76:	50 e0       	ldi	r21, 0x00	; 0
    1b78:	41 d0       	rcall	.+130    	; 0x1bfc <__divmodsi4>
    1b7a:	49 01       	movw	r8, r18
    1b7c:	5a 01       	movw	r10, r20
    1b7e:	9b 01       	movw	r18, r22
    1b80:	ac 01       	movw	r20, r24
    1b82:	a7 ea       	ldi	r26, 0xA7	; 167
    1b84:	b1 e4       	ldi	r27, 0x41	; 65
    1b86:	56 d0       	rcall	.+172    	; 0x1c34 <__muluhisi3>
    1b88:	6b 01       	movw	r12, r22
    1b8a:	7c 01       	movw	r14, r24
    1b8c:	ac ee       	ldi	r26, 0xEC	; 236
    1b8e:	b4 ef       	ldi	r27, 0xF4	; 244
    1b90:	a5 01       	movw	r20, r10
    1b92:	94 01       	movw	r18, r8
    1b94:	5b d0       	rcall	.+182    	; 0x1c4c <__mulohisi3>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	8c 0d       	add	r24, r12
    1b9c:	9d 1d       	adc	r25, r13
    1b9e:	ae 1d       	adc	r26, r14
    1ba0:	bf 1d       	adc	r27, r15
    1ba2:	b7 ff       	sbrs	r27, 7
    1ba4:	03 c0       	rjmp	.+6      	; 0x1bac <do_rand+0x6c>
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
    1ba8:	a1 09       	sbc	r26, r1
    1baa:	b0 48       	sbci	r27, 0x80	; 128
    1bac:	88 83       	st	Y, r24
    1bae:	99 83       	std	Y+1, r25	; 0x01
    1bb0:	aa 83       	std	Y+2, r26	; 0x02
    1bb2:	bb 83       	std	Y+3, r27	; 0x03
    1bb4:	9f 77       	andi	r25, 0x7F	; 127
    1bb6:	df 91       	pop	r29
    1bb8:	cf 91       	pop	r28
    1bba:	ff 90       	pop	r15
    1bbc:	ef 90       	pop	r14
    1bbe:	df 90       	pop	r13
    1bc0:	cf 90       	pop	r12
    1bc2:	bf 90       	pop	r11
    1bc4:	af 90       	pop	r10
    1bc6:	9f 90       	pop	r9
    1bc8:	8f 90       	pop	r8
    1bca:	08 95       	ret

00001bcc <rand_r>:
    1bcc:	b9 cf       	rjmp	.-142    	; 0x1b40 <do_rand>

00001bce <rand>:
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	92 e0       	ldi	r25, 0x02	; 2
    1bd2:	b6 cf       	rjmp	.-148    	; 0x1b40 <do_rand>

00001bd4 <srand>:
    1bd4:	a0 e0       	ldi	r26, 0x00	; 0
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    1bdc:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1be0:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    1be4:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    1be8:	08 95       	ret

00001bea <memcpy>:
    1bea:	fb 01       	movw	r30, r22
    1bec:	dc 01       	movw	r26, r24
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <memcpy+0xa>
    1bf0:	01 90       	ld	r0, Z+
    1bf2:	0d 92       	st	X+, r0
    1bf4:	41 50       	subi	r20, 0x01	; 1
    1bf6:	50 40       	sbci	r21, 0x00	; 0
    1bf8:	d8 f7       	brcc	.-10     	; 0x1bf0 <memcpy+0x6>
    1bfa:	08 95       	ret

00001bfc <__divmodsi4>:
    1bfc:	05 2e       	mov	r0, r21
    1bfe:	97 fb       	bst	r25, 7
    1c00:	16 f4       	brtc	.+4      	; 0x1c06 <__divmodsi4+0xa>
    1c02:	00 94       	com	r0
    1c04:	0f d0       	rcall	.+30     	; 0x1c24 <__negsi2>
    1c06:	57 fd       	sbrc	r21, 7
    1c08:	05 d0       	rcall	.+10     	; 0x1c14 <__divmodsi4_neg2>
    1c0a:	78 df       	rcall	.-272    	; 0x1afc <__udivmodsi4>
    1c0c:	07 fc       	sbrc	r0, 7
    1c0e:	02 d0       	rcall	.+4      	; 0x1c14 <__divmodsi4_neg2>
    1c10:	46 f4       	brtc	.+16     	; 0x1c22 <__divmodsi4_exit>
    1c12:	08 c0       	rjmp	.+16     	; 0x1c24 <__negsi2>

00001c14 <__divmodsi4_neg2>:
    1c14:	50 95       	com	r21
    1c16:	40 95       	com	r20
    1c18:	30 95       	com	r19
    1c1a:	21 95       	neg	r18
    1c1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c1e:	4f 4f       	sbci	r20, 0xFF	; 255
    1c20:	5f 4f       	sbci	r21, 0xFF	; 255

00001c22 <__divmodsi4_exit>:
    1c22:	08 95       	ret

00001c24 <__negsi2>:
    1c24:	90 95       	com	r25
    1c26:	80 95       	com	r24
    1c28:	70 95       	com	r23
    1c2a:	61 95       	neg	r22
    1c2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c30:	9f 4f       	sbci	r25, 0xFF	; 255
    1c32:	08 95       	ret

00001c34 <__muluhisi3>:
    1c34:	0f d0       	rcall	.+30     	; 0x1c54 <__umulhisi3>
    1c36:	a5 9f       	mul	r26, r21
    1c38:	90 0d       	add	r25, r0
    1c3a:	b4 9f       	mul	r27, r20
    1c3c:	90 0d       	add	r25, r0
    1c3e:	a4 9f       	mul	r26, r20
    1c40:	80 0d       	add	r24, r0
    1c42:	91 1d       	adc	r25, r1
    1c44:	11 24       	eor	r1, r1
    1c46:	08 95       	ret

00001c48 <__mulshisi3>:
    1c48:	b7 ff       	sbrs	r27, 7
    1c4a:	f4 cf       	rjmp	.-24     	; 0x1c34 <__muluhisi3>

00001c4c <__mulohisi3>:
    1c4c:	f3 df       	rcall	.-26     	; 0x1c34 <__muluhisi3>
    1c4e:	82 1b       	sub	r24, r18
    1c50:	93 0b       	sbc	r25, r19
    1c52:	08 95       	ret

00001c54 <__umulhisi3>:
    1c54:	a2 9f       	mul	r26, r18
    1c56:	b0 01       	movw	r22, r0
    1c58:	b3 9f       	mul	r27, r19
    1c5a:	c0 01       	movw	r24, r0
    1c5c:	a3 9f       	mul	r26, r19
    1c5e:	70 0d       	add	r23, r0
    1c60:	81 1d       	adc	r24, r1
    1c62:	11 24       	eor	r1, r1
    1c64:	91 1d       	adc	r25, r1
    1c66:	b2 9f       	mul	r27, r18
    1c68:	70 0d       	add	r23, r0
    1c6a:	81 1d       	adc	r24, r1
    1c6c:	11 24       	eor	r1, r1
    1c6e:	91 1d       	adc	r25, r1
    1c70:	08 95       	ret

00001c72 <_exit>:
    1c72:	f8 94       	cli

00001c74 <__stop_program>:
    1c74:	ff cf       	rjmp	.-2      	; 0x1c74 <__stop_program>
