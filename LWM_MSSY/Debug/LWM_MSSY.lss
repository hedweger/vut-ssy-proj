
LWM_MSSY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800200  00001c9e  00001d32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001d90  00800242  00800242  00001d74  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d74  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001da4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000448  00000000  00000000  00001de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006526  00000000  00000000  0000222c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d26  00000000  00000000  00008752  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002740  00000000  00000000  0000b478  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a34  00000000  00000000  0000dbb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002003  00000000  00000000  0000e5ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000026b3  00000000  00000000  000105ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000488  00000000  00000000  00012ca2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
       2:	00 00       	nop
       4:	b7 c0       	rjmp	.+366    	; 0x174 <__bad_interrupt>
       6:	00 00       	nop
       8:	b5 c0       	rjmp	.+362    	; 0x174 <__bad_interrupt>
       a:	00 00       	nop
       c:	b3 c0       	rjmp	.+358    	; 0x174 <__bad_interrupt>
       e:	00 00       	nop
      10:	b1 c0       	rjmp	.+354    	; 0x174 <__bad_interrupt>
      12:	00 00       	nop
      14:	af c0       	rjmp	.+350    	; 0x174 <__bad_interrupt>
      16:	00 00       	nop
      18:	ad c0       	rjmp	.+346    	; 0x174 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ab c0       	rjmp	.+342    	; 0x174 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a9 c0       	rjmp	.+338    	; 0x174 <__bad_interrupt>
      22:	00 00       	nop
      24:	a7 c0       	rjmp	.+334    	; 0x174 <__bad_interrupt>
      26:	00 00       	nop
      28:	a5 c0       	rjmp	.+330    	; 0x174 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a3 c0       	rjmp	.+326    	; 0x174 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a1 c0       	rjmp	.+322    	; 0x174 <__bad_interrupt>
      32:	00 00       	nop
      34:	10 c2       	rjmp	.+1056   	; 0x456 <__vector_13>
      36:	00 00       	nop
      38:	9d c0       	rjmp	.+314    	; 0x174 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9b c0       	rjmp	.+310    	; 0x174 <__bad_interrupt>
      3e:	00 00       	nop
      40:	99 c0       	rjmp	.+306    	; 0x174 <__bad_interrupt>
      42:	00 00       	nop
      44:	97 c0       	rjmp	.+302    	; 0x174 <__bad_interrupt>
      46:	00 00       	nop
      48:	95 c0       	rjmp	.+298    	; 0x174 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	93 c0       	rjmp	.+294    	; 0x174 <__bad_interrupt>
      4e:	00 00       	nop
      50:	91 c0       	rjmp	.+290    	; 0x174 <__bad_interrupt>
      52:	00 00       	nop
      54:	8f c0       	rjmp	.+286    	; 0x174 <__bad_interrupt>
      56:	00 00       	nop
      58:	8d c0       	rjmp	.+282    	; 0x174 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8b c0       	rjmp	.+278    	; 0x174 <__bad_interrupt>
      5e:	00 00       	nop
      60:	89 c0       	rjmp	.+274    	; 0x174 <__bad_interrupt>
      62:	00 00       	nop
      64:	87 c0       	rjmp	.+270    	; 0x174 <__bad_interrupt>
      66:	00 00       	nop
      68:	85 c0       	rjmp	.+266    	; 0x174 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	83 c0       	rjmp	.+262    	; 0x174 <__bad_interrupt>
      6e:	00 00       	nop
      70:	81 c0       	rjmp	.+258    	; 0x174 <__bad_interrupt>
      72:	00 00       	nop
      74:	7f c0       	rjmp	.+254    	; 0x174 <__bad_interrupt>
      76:	00 00       	nop
      78:	7d c0       	rjmp	.+250    	; 0x174 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7b c0       	rjmp	.+246    	; 0x174 <__bad_interrupt>
      7e:	00 00       	nop
      80:	79 c0       	rjmp	.+242    	; 0x174 <__bad_interrupt>
      82:	00 00       	nop
      84:	77 c0       	rjmp	.+238    	; 0x174 <__bad_interrupt>
      86:	00 00       	nop
      88:	75 c0       	rjmp	.+234    	; 0x174 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	73 c0       	rjmp	.+230    	; 0x174 <__bad_interrupt>
      8e:	00 00       	nop
      90:	97 c2       	rjmp	.+1326   	; 0x5c0 <__vector_36>
      92:	00 00       	nop
      94:	79 c2       	rjmp	.+1266   	; 0x588 <__vector_37>
      96:	00 00       	nop
      98:	6d c0       	rjmp	.+218    	; 0x174 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6b c0       	rjmp	.+214    	; 0x174 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	69 c0       	rjmp	.+210    	; 0x174 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	67 c0       	rjmp	.+206    	; 0x174 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c5 c1       	rjmp	.+906    	; 0x434 <__vector_42>
      aa:	00 00       	nop
      ac:	63 c0       	rjmp	.+198    	; 0x174 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	61 c0       	rjmp	.+194    	; 0x174 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5f c0       	rjmp	.+190    	; 0x174 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5d c0       	rjmp	.+186    	; 0x174 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5b c0       	rjmp	.+182    	; 0x174 <__bad_interrupt>
      be:	00 00       	nop
      c0:	59 c0       	rjmp	.+178    	; 0x174 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	57 c0       	rjmp	.+174    	; 0x174 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	55 c0       	rjmp	.+170    	; 0x174 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	53 c0       	rjmp	.+166    	; 0x174 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	51 c0       	rjmp	.+162    	; 0x174 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4f c0       	rjmp	.+158    	; 0x174 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4d c0       	rjmp	.+154    	; 0x174 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4b c0       	rjmp	.+150    	; 0x174 <__bad_interrupt>
      de:	00 00       	nop
      e0:	49 c0       	rjmp	.+146    	; 0x174 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	47 c0       	rjmp	.+142    	; 0x174 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	45 c0       	rjmp	.+138    	; 0x174 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	43 c0       	rjmp	.+134    	; 0x174 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	41 c0       	rjmp	.+130    	; 0x174 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	3f c0       	rjmp	.+126    	; 0x174 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	3d c0       	rjmp	.+122    	; 0x174 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	3b c0       	rjmp	.+118    	; 0x174 <__bad_interrupt>
      fe:	00 00       	nop
     100:	39 c0       	rjmp	.+114    	; 0x174 <__bad_interrupt>
     102:	00 00       	nop
     104:	37 c0       	rjmp	.+110    	; 0x174 <__bad_interrupt>
     106:	00 00       	nop
     108:	35 c0       	rjmp	.+106    	; 0x174 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	33 c0       	rjmp	.+102    	; 0x174 <__bad_interrupt>
     10e:	00 00       	nop
     110:	31 c0       	rjmp	.+98     	; 0x174 <__bad_interrupt>
     112:	00 00       	nop
     114:	2f c0       	rjmp	.+94     	; 0x174 <__bad_interrupt>
     116:	00 00       	nop
     118:	2d c0       	rjmp	.+90     	; 0x174 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2b c0       	rjmp	.+86     	; 0x174 <__bad_interrupt>
     11e:	00 00       	nop
     120:	29 c0       	rjmp	.+82     	; 0x174 <__bad_interrupt>
     122:	00 00       	nop
     124:	27 c0       	rjmp	.+78     	; 0x174 <__bad_interrupt>
     126:	00 00       	nop
     128:	25 c0       	rjmp	.+74     	; 0x174 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	23 c0       	rjmp	.+70     	; 0x174 <__bad_interrupt>
     12e:	00 00       	nop
     130:	21 c0       	rjmp	.+66     	; 0x174 <__bad_interrupt>
	...

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf ef       	ldi	r28, 0xFF	; 255
     13a:	d1 e8       	ldi	r29, 0x81	; 129
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
     144:	12 e0       	ldi	r17, 0x02	; 2
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b2 e0       	ldi	r27, 0x02	; 2
     14a:	ee e9       	ldi	r30, 0x9E	; 158
     14c:	fc e1       	ldi	r31, 0x1C	; 28
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	0b bf       	out	0x3b, r16	; 59
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
     154:	07 90       	elpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	a2 34       	cpi	r26, 0x42	; 66
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
     15e:	2f e1       	ldi	r18, 0x1F	; 31
     160:	a2 e4       	ldi	r26, 0x42	; 66
     162:	b2 e0       	ldi	r27, 0x02	; 2
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	a2 3d       	cpi	r26, 0xD2	; 210
     16a:	b2 07       	cpc	r27, r18
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	26 d1       	rcall	.+588    	; 0x3bc <main>
     170:	0c 94 4d 0e 	jmp	0x1c9a	; 0x1c9a <_exit>

00000174 <__bad_interrupt>:
     174:	45 cf       	rjmp	.-374    	; 0x0 <__vectors>

00000176 <APP_dataConf>:
}

void APP_timerHandler(SYS_Timer_t *timer) {
  char test[] = "SYSLOG: timer is being reset";
  for (int i = 0; strlen(test); i++) {
    HAL_UartWriteByte(test[i]);
     176:	08 95       	ret

00000178 <HAL_UartBytesReceived>:
static uint8_t appMsgBuffer[NWK_MAX_PAYLOAD_SIZE - sizeof(AppMsg_t)];

static RouteTable_t routeTable[ROUTE_TABLE_SIZE];
static uint8_t routeTablePtr = 0;

void HAL_UartBytesReceived(uint16_t bytes) { HAL_UartWriteString(bytes); }
     178:	f9 c1       	rjmp	.+1010   	; 0x56c <HAL_UartWriteString>
     17a:	08 95       	ret

0000017c <APP_dataSend>:

void APP_dataSend(AppMsgType_t msgType, uint8_t addr) {
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	1f 92       	push	r1
     182:	cd b7       	in	r28, 0x3d	; 61
     184:	de b7       	in	r29, 0x3e	; 62
     186:	69 83       	std	Y+1, r22	; 0x01
  RouteTable_t route = routeTable[addr];
     188:	70 e0       	ldi	r23, 0x00	; 0
     18a:	fb 01       	movw	r30, r22
     18c:	ee 0f       	add	r30, r30
     18e:	ff 1f       	adc	r31, r31
     190:	e6 0f       	add	r30, r22
     192:	f7 1f       	adc	r31, r23
     194:	ee 0f       	add	r30, r30
     196:	ff 1f       	adc	r31, r31
     198:	ed 5b       	subi	r30, 0xBD	; 189
     19a:	fd 4f       	sbci	r31, 0xFD	; 253
     19c:	20 81       	ld	r18, Z
     19e:	31 81       	ldd	r19, Z+1	; 0x01
     1a0:	92 81       	ldd	r25, Z+2	; 0x02
  dataReq.data->msgType = msgType;
     1a2:	e0 eb       	ldi	r30, 0xB0	; 176
     1a4:	f8 e0       	ldi	r31, 0x08	; 8
     1a6:	a2 85       	ldd	r26, Z+10	; 0x0a
     1a8:	b3 85       	ldd	r27, Z+11	; 0x0b
     1aa:	8c 93       	st	X, r24
  dataReq.dstAddr = route.addr;
     1ac:	36 83       	std	Z+6, r19	; 0x06
     1ae:	25 83       	std	Z+5, r18	; 0x05
  dataReq.dstEndpoint = route.endpoint;
     1b0:	97 83       	std	Z+7, r25	; 0x07
  dataReq.srcEndpoint = route.endpoint;
     1b2:	90 87       	std	Z+8, r25	; 0x08
  switch (msgType) {
     1b4:	87 30       	cpi	r24, 0x07	; 7
     1b6:	59 f0       	breq	.+22     	; 0x1ce <APP_dataSend+0x52>
     1b8:	89 30       	cpi	r24, 0x09	; 9
     1ba:	89 f4       	brne	.+34     	; 0x1de <APP_dataSend+0x62>
	dataReq.dstAddr = route.addr;
	dataReq.dstEndpoint = route.endpoint;
	dataReq.srcEndpoint = route.endpoint;
    break;
  case OFFER:
    dataReq.data->data = &addr;
     1bc:	e0 91 ba 08 	lds	r30, 0x08BA	; 0x8008ba <dataReq+0xa>
     1c0:	f0 91 bb 08 	lds	r31, 0x08BB	; 0x8008bb <dataReq+0xb>
     1c4:	ce 01       	movw	r24, r28
     1c6:	01 96       	adiw	r24, 0x01	; 1
     1c8:	92 83       	std	Z+2, r25	; 0x02
     1ca:	81 83       	std	Z+1, r24	; 0x01
    break;
     1cc:	08 c0       	rjmp	.+16     	; 0x1de <APP_dataSend+0x62>
  case APPDATA:
    dataReq.data->data = &"data";
     1ce:	e0 91 ba 08 	lds	r30, 0x08BA	; 0x8008ba <dataReq+0xa>
     1d2:	f0 91 bb 08 	lds	r31, 0x08BB	; 0x8008bb <dataReq+0xb>
     1d6:	81 e2       	ldi	r24, 0x21	; 33
     1d8:	92 e0       	ldi	r25, 0x02	; 2
     1da:	92 83       	std	Z+2, r25	; 0x02
     1dc:	81 83       	std	Z+1, r24	; 0x01
    break;
  }
  dataReq.size = sizeof(dataReq.data);
     1de:	e0 eb       	ldi	r30, 0xB0	; 176
     1e0:	f8 e0       	ldi	r31, 0x08	; 8
     1e2:	82 e0       	ldi	r24, 0x02	; 2
     1e4:	84 87       	std	Z+12, r24	; 0x0c
  dataReq.options = NWK_OPT_ENABLE_SECURITY;
     1e6:	81 87       	std	Z+9, r24	; 0x09
  dataReq.confirm = APP_dataConf;
     1e8:	8b eb       	ldi	r24, 0xBB	; 187
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	96 87       	std	Z+14, r25	; 0x0e
     1ee:	85 87       	std	Z+13, r24	; 0x0d
  NWK_DataReq(&dataReq);
     1f0:	cf 01       	movw	r24, r30
     1f2:	da d2       	rcall	.+1460   	; 0x7a8 <NWK_DataReq>

  uartBufferPtr = 0;
  dataReqBusy = true;
}
     1f4:	0f 90       	pop	r0
     1f6:	df 91       	pop	r29
     1f8:	cf 91       	pop	r28
     1fa:	08 95       	ret

000001fc <APP_pushAddr>:
 * Should only be called when the server offers the config,
 * on accept from client, the in_use flag needs to be set,
 * otherwise the server will rewrite the entry on next pass.
 * The route table has 65535 entries
 */
uint16_t APP_pushAddr(uint8_t endpoint, uint8_t *data) {
     1fc:	cf 93       	push	r28
     1fe:	df 93       	push	r29
     200:	48 2f       	mov	r20, r24
  if (routeTable[routeTablePtr].in_use) {
     202:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <__data_end>
     206:	29 2f       	mov	r18, r25
     208:	30 e0       	ldi	r19, 0x00	; 0
     20a:	f9 01       	movw	r30, r18
     20c:	ee 0f       	add	r30, r30
     20e:	ff 1f       	adc	r31, r31
     210:	e2 0f       	add	r30, r18
     212:	f3 1f       	adc	r31, r19
     214:	ee 0f       	add	r30, r30
     216:	ff 1f       	adc	r31, r31
     218:	ed 5b       	subi	r30, 0xBD	; 189
     21a:	fd 4f       	sbci	r31, 0xFD	; 253
     21c:	85 81       	ldd	r24, Z+5	; 0x05
     21e:	88 23       	and	r24, r24
     220:	31 f0       	breq	.+12     	; 0x22e <APP_pushAddr+0x32>
     222:	84 2f       	mov	r24, r20
    routeTablePtr++;
     224:	9f 5f       	subi	r25, 0xFF	; 255
     226:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <__data_end>
    return APP_pushAddr(endpoint, data);
     22a:	e8 df       	rcall	.-48     	; 0x1fc <APP_pushAddr>
     22c:	1c c0       	rjmp	.+56     	; 0x266 <APP_pushAddr+0x6a>
  }

  routeTable[routeTablePtr].addr = routeTablePtr;
     22e:	89 2f       	mov	r24, r25
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	f9 01       	movw	r30, r18
     234:	ee 0f       	add	r30, r30
     236:	ff 1f       	adc	r31, r31
     238:	df 01       	movw	r26, r30
     23a:	a2 0f       	add	r26, r18
     23c:	b3 1f       	adc	r27, r19
     23e:	aa 0f       	add	r26, r26
     240:	bb 1f       	adc	r27, r27
     242:	ad 5b       	subi	r26, 0xBD	; 189
     244:	bd 4f       	sbci	r27, 0xFD	; 253
     246:	11 96       	adiw	r26, 0x01	; 1
     248:	9c 93       	st	X, r25
     24a:	8e 93       	st	-X, r24
  routeTable[routeTablePtr].endpoint = endpoint;
     24c:	12 96       	adiw	r26, 0x02	; 2
     24e:	4c 93       	st	X, r20
     250:	12 97       	sbiw	r26, 0x02	; 2
  routeTable[routeTablePtr].sleeping = false;
     252:	14 96       	adiw	r26, 0x04	; 4
     254:	1c 92       	st	X, r1
     256:	14 97       	sbiw	r26, 0x04	; 4
  routeTable[routeTablePtr].type = (SensorType_t)(*data);
     258:	eb 01       	movw	r28, r22
     25a:	48 81       	ld	r20, Y
     25c:	13 96       	adiw	r26, 0x03	; 3
     25e:	4c 93       	st	X, r20
     260:	13 97       	sbiw	r26, 0x03	; 3
  // in_use only goes active on APP_ACK from client
  routeTable[routeTablePtr].in_use = false;
     262:	fd 01       	movw	r30, r26
     264:	15 82       	std	Z+5, r1	; 0x05
  return routeTablePtr;
}
     266:	df 91       	pop	r29
     268:	cf 91       	pop	r28
     26a:	08 95       	ret

0000026c <APP_dataRecv>:

bool APP_dataRecv(NWK_DataInd_t *ind) {
     26c:	ef 92       	push	r14
     26e:	ff 92       	push	r15
     270:	0f 93       	push	r16
     272:	1f 93       	push	r17
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
     278:	8c 01       	movw	r16, r24
  AppMsg_t *recv = (AppMsg_t *)ind->data;
     27a:	dc 01       	movw	r26, r24
     27c:	17 96       	adiw	r26, 0x07	; 7
     27e:	ed 90       	ld	r14, X+
     280:	fc 90       	ld	r15, X
     282:	18 97       	sbiw	r26, 0x08	; 8
     */
    APP_dataSend(APPDATA, ind->srcAddr);
    break;
  }
#else if DESIGNATION == 0 // server
  switch (recv->msgType) {
     284:	f7 01       	movw	r30, r14
     286:	80 81       	ld	r24, Z
     288:	84 30       	cpi	r24, 0x04	; 4
     28a:	09 f4       	brne	.+2      	; 0x28e <APP_dataRecv+0x22>
     28c:	5d c0       	rjmp	.+186    	; 0x348 <APP_dataRecv+0xdc>
     28e:	20 f4       	brcc	.+8      	; 0x298 <APP_dataRecv+0x2c>
     290:	82 30       	cpi	r24, 0x02	; 2
     292:	08 f0       	brcs	.+2      	; 0x296 <APP_dataRecv+0x2a>
     294:	4b c0       	rjmp	.+150    	; 0x32c <APP_dataRecv+0xc0>
     296:	72 c0       	rjmp	.+228    	; 0x37c <APP_dataRecv+0x110>
     298:	86 30       	cpi	r24, 0x06	; 6
     29a:	d1 f1       	breq	.+116    	; 0x310 <APP_dataRecv+0xa4>
     29c:	50 f1       	brcs	.+84     	; 0x2f2 <APP_dataRecv+0x86>
     29e:	87 30       	cpi	r24, 0x07	; 7
     2a0:	09 f0       	breq	.+2      	; 0x2a4 <APP_dataRecv+0x38>
     2a2:	6c c0       	rjmp	.+216    	; 0x37c <APP_dataRecv+0x110>
  case APPDATA:
    routeTable[ind->srcAddr].sleeping = true;
     2a4:	d8 01       	movw	r26, r16
     2a6:	8d 91       	ld	r24, X+
     2a8:	9c 91       	ld	r25, X
     2aa:	11 97       	sbiw	r26, 0x01	; 1
     2ac:	fc 01       	movw	r30, r24
     2ae:	ee 0f       	add	r30, r30
     2b0:	ff 1f       	adc	r31, r31
     2b2:	e8 0f       	add	r30, r24
     2b4:	f9 1f       	adc	r31, r25
     2b6:	ee 0f       	add	r30, r30
     2b8:	ff 1f       	adc	r31, r31
     2ba:	ed 5b       	subi	r30, 0xBD	; 189
     2bc:	fd 4f       	sbci	r31, 0xFD	; 253
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	84 83       	std	Z+4, r24	; 0x04
    /*
     * Place to handle receiving data from clients.
     */
    for (int i = 0; i < ind->size; i++) {
     2c2:	19 96       	adiw	r26, 0x09	; 9
     2c4:	8c 91       	ld	r24, X
     2c6:	88 23       	and	r24, r24
     2c8:	09 f4       	brne	.+2      	; 0x2cc <APP_dataRecv+0x60>
     2ca:	59 c0       	rjmp	.+178    	; 0x37e <APP_dataRecv+0x112>
     2cc:	c0 e0       	ldi	r28, 0x00	; 0
     2ce:	d0 e0       	ldi	r29, 0x00	; 0
      HAL_UartWriteByte(recv->data[i]);
     2d0:	d7 01       	movw	r26, r14
     2d2:	11 96       	adiw	r26, 0x01	; 1
     2d4:	ed 91       	ld	r30, X+
     2d6:	fc 91       	ld	r31, X
     2d8:	12 97       	sbiw	r26, 0x02	; 2
     2da:	ec 0f       	add	r30, r28
     2dc:	fd 1f       	adc	r31, r29
     2de:	80 81       	ld	r24, Z
     2e0:	1e d1       	rcall	.+572    	; 0x51e <HAL_UartWriteByte>
  case APPDATA:
    routeTable[ind->srcAddr].sleeping = true;
    /*
     * Place to handle receiving data from clients.
     */
    for (int i = 0; i < ind->size; i++) {
     2e2:	21 96       	adiw	r28, 0x01	; 1
     2e4:	f8 01       	movw	r30, r16
     2e6:	81 85       	ldd	r24, Z+9	; 0x09
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	c8 17       	cp	r28, r24
     2ec:	d9 07       	cpc	r29, r25
     2ee:	84 f3       	brlt	.-32     	; 0x2d0 <APP_dataRecv+0x64>
     2f0:	46 c0       	rjmp	.+140    	; 0x37e <APP_dataRecv+0x112>
      HAL_UartWriteByte(recv->data[i]);
    }
    break;
  case APP_SLEEP:
    routeTable[ind->srcAddr].sleeping = true;
     2f2:	d8 01       	movw	r26, r16
     2f4:	8d 91       	ld	r24, X+
     2f6:	9c 91       	ld	r25, X
     2f8:	fc 01       	movw	r30, r24
     2fa:	ee 0f       	add	r30, r30
     2fc:	ff 1f       	adc	r31, r31
     2fe:	e8 0f       	add	r30, r24
     300:	f9 1f       	adc	r31, r25
     302:	ee 0f       	add	r30, r30
     304:	ff 1f       	adc	r31, r31
     306:	ed 5b       	subi	r30, 0xBD	; 189
     308:	fd 4f       	sbci	r31, 0xFD	; 253
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	84 83       	std	Z+4, r24	; 0x04
    break;
     30e:	37 c0       	rjmp	.+110    	; 0x37e <APP_dataRecv+0x112>
  case RECONNECT:
    routeTable[ind->srcAddr].sleeping = false;
     310:	f8 01       	movw	r30, r16
     312:	80 81       	ld	r24, Z
     314:	91 81       	ldd	r25, Z+1	; 0x01
     316:	fc 01       	movw	r30, r24
     318:	ee 0f       	add	r30, r30
     31a:	ff 1f       	adc	r31, r31
     31c:	e8 0f       	add	r30, r24
     31e:	f9 1f       	adc	r31, r25
     320:	ee 0f       	add	r30, r30
     322:	ff 1f       	adc	r31, r31
     324:	ed 5b       	subi	r30, 0xBD	; 189
     326:	fd 4f       	sbci	r31, 0xFD	; 253
     328:	14 82       	std	Z+4, r1	; 0x04
    break;
     32a:	29 c0       	rjmp	.+82     	; 0x37e <APP_dataRecv+0x112>
     * not evil.
     * Also, I presume that clients will not
     * request new adresses once they receive
     * one.
     */
    routeTablePtr++;
     32c:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__data_end>
     330:	8f 5f       	subi	r24, 0xFF	; 255
     332:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__data_end>
    int16_t addr = APP_pushAddr(ind->srcEndpoint, ind->data);
     336:	b7 01       	movw	r22, r14
     338:	d8 01       	movw	r26, r16
     33a:	14 96       	adiw	r26, 0x04	; 4
     33c:	8c 91       	ld	r24, X
     33e:	5e df       	rcall	.-324    	; 0x1fc <APP_pushAddr>
    APP_dataSend(OFFER, addr);
     340:	68 2f       	mov	r22, r24
     342:	89 e0       	ldi	r24, 0x09	; 9
     344:	1b df       	rcall	.-458    	; 0x17c <APP_dataSend>
    break;
     346:	1b c0       	rjmp	.+54     	; 0x37e <APP_dataRecv+0x112>
     * Therefore, it is presumed the REQUEST message
     * will be sent with the server-assigned adress,
     * so the server can set their adress as in use
     * in the routing table.
     */
    routeTable[ind->srcAddr].in_use = true;
     348:	f8 01       	movw	r30, r16
     34a:	80 81       	ld	r24, Z
     34c:	91 81       	ldd	r25, Z+1	; 0x01
     34e:	fc 01       	movw	r30, r24
     350:	ee 0f       	add	r30, r30
     352:	ff 1f       	adc	r31, r31
     354:	e8 0f       	add	r30, r24
     356:	f9 1f       	adc	r31, r25
     358:	ee 0f       	add	r30, r30
     35a:	ff 1f       	adc	r31, r31
     35c:	ed 5b       	subi	r30, 0xBD	; 189
     35e:	fd 4f       	sbci	r31, 0xFD	; 253
     360:	81 e0       	ldi	r24, 0x01	; 1
    HAL_UartWriteString("Accepted client on addr.: ");
     362:	85 83       	std	Z+5, r24	; 0x05
     364:	86 e2       	ldi	r24, 0x26	; 38
     366:	92 e0       	ldi	r25, 0x02	; 2
    HAL_UartWriteString(ind->srcAddr);
     368:	01 d1       	rcall	.+514    	; 0x56c <HAL_UartWriteString>
     36a:	d8 01       	movw	r26, r16
     36c:	8d 91       	ld	r24, X+
     36e:	9c 91       	ld	r25, X
    APP_dataSend(APP_ACK, ind->srcAddr);
     370:	fd d0       	rcall	.+506    	; 0x56c <HAL_UartWriteString>
     372:	f8 01       	movw	r30, r16
     374:	60 81       	ld	r22, Z
     376:	81 e0       	ldi	r24, 0x01	; 1
    break;
     378:	01 df       	rcall	.-510    	; 0x17c <APP_dataSend>
  default:
    // HAL_UartWriteString("Unknown msg type: ");
    HAL_UartWriteByte(recv->msgType);
     37a:	01 c0       	rjmp	.+2      	; 0x37e <APP_dataRecv+0x112>
     37c:	d0 d0       	rcall	.+416    	; 0x51e <HAL_UartWriteByte>
    break;
  }
#endif

  return true;
}
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	1f 91       	pop	r17
     386:	0f 91       	pop	r16
     388:	ff 90       	pop	r15
     38a:	ef 90       	pop	r14
     38c:	08 95       	ret

0000038e <APP_init>:
  }
  (void)timer;
}

void APP_init(void) {
  NWK_SetAddr(APP_ADDR);
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	c7 d1       	rcall	.+910    	; 0x722 <NWK_SetAddr>
  NWK_SetPanId(APP_PANID);
     394:	80 e8       	ldi	r24, 0x80	; 128
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	cb d1       	rcall	.+918    	; 0x730 <NWK_SetPanId>
  PHY_SetChannel(APP_CHANNEL);
     39a:	8f e0       	ldi	r24, 0x0F	; 15
     39c:	0e 94 bc 0b 	call	0x1778	; 0x1778 <PHY_SetChannel>
  PHY_SetRxState(true);
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	0e 94 b8 0b 	call	0x1770	; 0x1770 <PHY_SetRxState>

  NWK_OpenEndpoint(APP_ENDPOINT, APP_dataRecv);
     3a6:	66 e3       	ldi	r22, 0x36	; 54
     3a8:	71 e0       	ldi	r23, 0x01	; 1
     3aa:	83 e0       	ldi	r24, 0x03	; 3
     3ac:	c8 d1       	rcall	.+912    	; 0x73e <NWK_OpenEndpoint>
  HAL_BoardInit();

  timer.interval = APP_FLUSH_TIMER_INTERVAL;
  timer.mode = SYS_TIMER_INTERVAL_MODE;
  timer.handler = APP_timerHandler;
  dataReq.data = dataReqBuffer;
     3ae:	83 e4       	ldi	r24, 0x43	; 67
     3b0:	98 e0       	ldi	r25, 0x08	; 8
     3b2:	90 93 bb 08 	sts	0x08BB, r25	; 0x8008bb <dataReq+0xb>
     3b6:	80 93 ba 08 	sts	0x08BA, r24	; 0x8008ba <dataReq+0xa>
     3ba:	08 95       	ret

000003bc <main>:
		break;
	}
}

int main(void) {
	SYS_Init();
     3bc:	0e 94 8d 0c 	call	0x191a	; 0x191a <SYS_Init>
	HAL_UartInit(38400);
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	76 e9       	ldi	r23, 0x96	; 150
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	55 d0       	rcall	.+170    	; 0x474 <HAL_UartInit>

static void APP_TaskHandler(void) {
	switch (appState) {
		case INIT: {
			APP_init();
			appState = IDLE;
     3ca:	c1 e0       	ldi	r28, 0x01	; 1
int main(void) {
	SYS_Init();
	HAL_UartInit(38400);

	while (1) {
		SYS_TaskHandler();
     3cc:	0e 94 94 0c 	call	0x1928	; 0x1928 <SYS_TaskHandler>
		HAL_UartTaskHandler();
     3d0:	4e d1       	rcall	.+668    	; 0x66e <HAL_UartTaskHandler>
#include "sys.h"

static AppState_t appState;

static void APP_TaskHandler(void) {
	switch (appState) {
     3d2:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <appState>
     3d6:	81 11       	cpse	r24, r1
		case INIT: {
			APP_init();
     3d8:	f9 cf       	rjmp	.-14     	; 0x3cc <main+0x10>
     3da:	d9 df       	rcall	.-78     	; 0x38e <APP_init>
			appState = IDLE;
     3dc:	c0 93 c1 08 	sts	0x08C1, r28	; 0x8008c1 <appState>
     3e0:	f5 cf       	rjmp	.-22     	; 0x3cc <main+0x10>

000003e2 <HAL_Init>:
     3e2:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	f8 94       	cli
     3e8:	a8 95       	wdr
     3ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     3ee:	88 61       	ori	r24, 0x18	; 24
     3f0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     3f4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     3f8:	0f be       	out	0x3f, r0	; 63
     3fa:	e1 e6       	ldi	r30, 0x61	; 97
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	80 e8       	ldi	r24, 0x80	; 128
     400:	80 83       	st	Z, r24
     402:	10 82       	st	Z, r1
     404:	78 94       	sei
     406:	01 c0       	rjmp	.+2      	; 0x40a <HAL_TimerInit>
     408:	08 95       	ret

0000040a <HAL_TimerInit>:
     40a:	10 92 a9 1f 	sts	0x1FA9, r1	; 0x801fa9 <halTimerIrqCount>
     40e:	80 e1       	ldi	r24, 0x10	; 16
     410:	97 e2       	ldi	r25, 0x27	; 39
     412:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
     416:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
     41a:	e1 ea       	ldi	r30, 0xA1	; 161
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	88 e0       	ldi	r24, 0x08	; 8
     420:	80 83       	st	Z, r24
     422:	80 81       	ld	r24, Z
     424:	82 60       	ori	r24, 0x02	; 2
     426:	80 83       	st	Z, r24
     428:	e2 e7       	ldi	r30, 0x72	; 114
     42a:	f0 e0       	ldi	r31, 0x00	; 0
     42c:	80 81       	ld	r24, Z
     42e:	82 60       	ori	r24, 0x02	; 2
     430:	80 83       	st	Z, r24
     432:	08 95       	ret

00000434 <__vector_42>:
     434:	1f 92       	push	r1
     436:	0f 92       	push	r0
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	0f 92       	push	r0
     43c:	11 24       	eor	r1, r1
     43e:	8f 93       	push	r24
     440:	80 91 a9 1f 	lds	r24, 0x1FA9	; 0x801fa9 <halTimerIrqCount>
     444:	8f 5f       	subi	r24, 0xFF	; 255
     446:	80 93 a9 1f 	sts	0x1FA9, r24	; 0x801fa9 <halTimerIrqCount>
     44a:	8f 91       	pop	r24
     44c:	0f 90       	pop	r0
     44e:	0f be       	out	0x3f, r0	; 63
     450:	0f 90       	pop	r0
     452:	1f 90       	pop	r1
     454:	18 95       	reti

00000456 <__vector_13>:
     456:	1f 92       	push	r1
     458:	0f 92       	push	r0
     45a:	0f b6       	in	r0, 0x3f	; 63
     45c:	0f 92       	push	r0
     45e:	11 24       	eor	r1, r1
     460:	8f 93       	push	r24
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	80 93 c2 08 	sts	0x08C2, r24	; 0x8008c2 <halSleepTimerEvent>
     468:	8f 91       	pop	r24
     46a:	0f 90       	pop	r0
     46c:	0f be       	out	0x3f, r0	; 63
     46e:	0f 90       	pop	r0
     470:	1f 90       	pop	r1
     472:	18 95       	reti

00000474 <HAL_UartInit>:
    rxFifo.bytes--;
  ATOMIC_SECTION_LEAVE
  PRAGMA(diag_default=Pa082);

  return byte;
}
     474:	dc 01       	movw	r26, r24
     476:	cb 01       	movw	r24, r22
     478:	88 0f       	add	r24, r24
     47a:	99 1f       	adc	r25, r25
     47c:	aa 1f       	adc	r26, r26
     47e:	bb 1f       	adc	r27, r27
     480:	88 0f       	add	r24, r24
     482:	99 1f       	adc	r25, r25
     484:	aa 1f       	adc	r26, r26
     486:	bb 1f       	adc	r27, r27
     488:	9c 01       	movw	r18, r24
     48a:	ad 01       	movw	r20, r26
     48c:	22 0f       	add	r18, r18
     48e:	33 1f       	adc	r19, r19
     490:	44 1f       	adc	r20, r20
     492:	55 1f       	adc	r21, r21
     494:	22 0f       	add	r18, r18
     496:	33 1f       	adc	r19, r19
     498:	44 1f       	adc	r20, r20
     49a:	55 1f       	adc	r21, r21
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	74 e2       	ldi	r23, 0x24	; 36
     4a0:	84 ef       	ldi	r24, 0xF4	; 244
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <__udivmodsi4>
     4a8:	ba 01       	movw	r22, r20
     4aa:	a9 01       	movw	r20, r18
     4ac:	41 50       	subi	r20, 0x01	; 1
     4ae:	51 09       	sbc	r21, r1
     4b0:	61 09       	sbc	r22, r1
     4b2:	71 09       	sbc	r23, r1
     4b4:	bb 27       	eor	r27, r27
     4b6:	a7 2f       	mov	r26, r23
     4b8:	96 2f       	mov	r25, r22
     4ba:	85 2f       	mov	r24, r21
     4bc:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
     4c0:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
     4ca:	88 e9       	ldi	r24, 0x98	; 152
     4cc:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
     4d0:	86 e0       	ldi	r24, 0x06	; 6
     4d2:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>
     4d6:	e1 ef       	ldi	r30, 0xF1	; 241
     4d8:	fb e0       	ldi	r31, 0x0B	; 11
     4da:	80 e6       	ldi	r24, 0x60	; 96
     4dc:	9a e0       	ldi	r25, 0x0A	; 10
     4de:	91 87       	std	Z+9, r25	; 0x09
     4e0:	80 87       	std	Z+8, r24	; 0x08
     4e2:	80 e9       	ldi	r24, 0x90	; 144
     4e4:	91 e0       	ldi	r25, 0x01	; 1
     4e6:	95 83       	std	Z+5, r25	; 0x05
     4e8:	84 83       	std	Z+4, r24	; 0x04
     4ea:	17 82       	std	Z+7, r1	; 0x07
     4ec:	16 82       	std	Z+6, r1	; 0x06
     4ee:	11 82       	std	Z+1, r1	; 0x01
     4f0:	10 82       	st	Z, r1
     4f2:	13 82       	std	Z+3, r1	; 0x03
     4f4:	12 82       	std	Z+2, r1	; 0x02
     4f6:	e6 e5       	ldi	r30, 0x56	; 86
     4f8:	fa e0       	ldi	r31, 0x0A	; 10
     4fa:	25 ec       	ldi	r18, 0xC5	; 197
     4fc:	38 e0       	ldi	r19, 0x08	; 8
     4fe:	31 87       	std	Z+9, r19	; 0x09
     500:	20 87       	std	Z+8, r18	; 0x08
     502:	95 83       	std	Z+5, r25	; 0x05
     504:	84 83       	std	Z+4, r24	; 0x04
     506:	17 82       	std	Z+7, r1	; 0x07
     508:	16 82       	std	Z+6, r1	; 0x06
     50a:	11 82       	std	Z+1, r1	; 0x01
     50c:	10 82       	st	Z, r1
     50e:	13 82       	std	Z+3, r1	; 0x03
     510:	12 82       	std	Z+2, r1	; 0x02
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <udrEmpty>
     518:	10 92 c3 08 	sts	0x08C3, r1	; 0x8008c3 <newData>
     51c:	08 95       	ret

0000051e <HAL_UartWriteByte>:
     51e:	cf 93       	push	r28
     520:	df 93       	push	r29
     522:	e1 ef       	ldi	r30, 0xF1	; 241
     524:	fb e0       	ldi	r31, 0x0B	; 11
     526:	26 81       	ldd	r18, Z+6	; 0x06
     528:	37 81       	ldd	r19, Z+7	; 0x07
     52a:	64 81       	ldd	r22, Z+4	; 0x04
     52c:	75 81       	ldd	r23, Z+5	; 0x05
     52e:	26 17       	cp	r18, r22
     530:	37 07       	cpc	r19, r23
     532:	c9 f0       	breq	.+50     	; 0x566 <HAL_UartWriteByte+0x48>
     534:	c0 85       	ldd	r28, Z+8	; 0x08
     536:	d1 85       	ldd	r29, Z+9	; 0x09
     538:	42 81       	ldd	r20, Z+2	; 0x02
     53a:	53 81       	ldd	r21, Z+3	; 0x03
     53c:	da 01       	movw	r26, r20
     53e:	11 96       	adiw	r26, 0x01	; 1
     540:	b3 83       	std	Z+3, r27	; 0x03
     542:	a2 83       	std	Z+2, r26	; 0x02
     544:	fe 01       	movw	r30, r28
     546:	e4 0f       	add	r30, r20
     548:	f5 1f       	adc	r31, r21
     54a:	80 83       	st	Z, r24
     54c:	6a 17       	cp	r22, r26
     54e:	7b 07       	cpc	r23, r27
     550:	21 f4       	brne	.+8      	; 0x55a <HAL_UartWriteByte+0x3c>
     552:	10 92 f4 0b 	sts	0x0BF4, r1	; 0x800bf4 <txFifo+0x3>
     556:	10 92 f3 0b 	sts	0x0BF3, r1	; 0x800bf3 <txFifo+0x2>
     55a:	2f 5f       	subi	r18, 0xFF	; 255
     55c:	3f 4f       	sbci	r19, 0xFF	; 255
     55e:	30 93 f8 0b 	sts	0x0BF8, r19	; 0x800bf8 <txFifo+0x7>
     562:	20 93 f7 0b 	sts	0x0BF7, r18	; 0x800bf7 <txFifo+0x6>
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	08 95       	ret

0000056c <HAL_UartWriteString>:
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	ec 01       	movw	r28, r24
     572:	88 81       	ld	r24, Y
     574:	88 23       	and	r24, r24
     576:	29 f0       	breq	.+10     	; 0x582 <HAL_UartWriteString+0x16>
     578:	21 96       	adiw	r28, 0x01	; 1
     57a:	d1 df       	rcall	.-94     	; 0x51e <HAL_UartWriteByte>
     57c:	89 91       	ld	r24, Y+
     57e:	81 11       	cpse	r24, r1
     580:	fc cf       	rjmp	.-8      	; 0x57a <HAL_UartWriteString+0xe>
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	08 95       	ret

00000588 <__vector_37>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
     588:	1f 92       	push	r1
     58a:	0f 92       	push	r0
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	0f 92       	push	r0
     590:	11 24       	eor	r1, r1
     592:	0b b6       	in	r0, 0x3b	; 59
     594:	0f 92       	push	r0
     596:	8f 93       	push	r24
     598:	ef 93       	push	r30
     59a:	ff 93       	push	r31
  udrEmpty = true;
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <udrEmpty>
  UCSRxB &= ~(1 << UDRIE1);
     5a2:	e9 ec       	ldi	r30, 0xC9	; 201
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	80 81       	ld	r24, Z
     5a8:	8f 7d       	andi	r24, 0xDF	; 223
     5aa:	80 83       	st	Z, r24
}
     5ac:	ff 91       	pop	r31
     5ae:	ef 91       	pop	r30
     5b0:	8f 91       	pop	r24
     5b2:	0f 90       	pop	r0
     5b4:	0b be       	out	0x3b, r0	; 59
     5b6:	0f 90       	pop	r0
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	0f 90       	pop	r0
     5bc:	1f 90       	pop	r1
     5be:	18 95       	reti

000005c0 <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
     5c0:	1f 92       	push	r1
     5c2:	0f 92       	push	r0
     5c4:	0f b6       	in	r0, 0x3f	; 63
     5c6:	0f 92       	push	r0
     5c8:	11 24       	eor	r1, r1
     5ca:	0b b6       	in	r0, 0x3b	; 59
     5cc:	0f 92       	push	r0
     5ce:	2f 93       	push	r18
     5d0:	3f 93       	push	r19
     5d2:	4f 93       	push	r20
     5d4:	5f 93       	push	r21
     5d6:	6f 93       	push	r22
     5d8:	7f 93       	push	r23
     5da:	8f 93       	push	r24
     5dc:	9f 93       	push	r25
     5de:	af 93       	push	r26
     5e0:	bf 93       	push	r27
     5e2:	ef 93       	push	r30
     5e4:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
     5e6:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  uint8_t byte = UDRx;
     5ea:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
     5ee:	8c 71       	andi	r24, 0x1C	; 28
     5f0:	59 f5       	brne	.+86     	; 0x648 <__vector_36+0x88>
  {
    if (rxFifo.bytes == rxFifo.size)
     5f2:	e6 e5       	ldi	r30, 0x56	; 86
     5f4:	fa e0       	ldi	r31, 0x0A	; 10
     5f6:	46 81       	ldd	r20, Z+6	; 0x06
     5f8:	57 81       	ldd	r21, Z+7	; 0x07
     5fa:	84 81       	ldd	r24, Z+4	; 0x04
     5fc:	95 81       	ldd	r25, Z+5	; 0x05
     5fe:	48 17       	cp	r20, r24
     600:	59 07       	cpc	r21, r25
     602:	11 f1       	breq	.+68     	; 0x648 <__vector_36+0x88>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
     604:	40 85       	ldd	r20, Z+8	; 0x08
     606:	51 85       	ldd	r21, Z+9	; 0x09
     608:	82 81       	ldd	r24, Z+2	; 0x02
     60a:	93 81       	ldd	r25, Z+3	; 0x03
     60c:	bc 01       	movw	r22, r24
     60e:	6f 5f       	subi	r22, 0xFF	; 255
     610:	7f 4f       	sbci	r23, 0xFF	; 255
     612:	73 83       	std	Z+3, r23	; 0x03
     614:	62 83       	std	Z+2, r22	; 0x02
     616:	da 01       	movw	r26, r20
     618:	a8 0f       	add	r26, r24
     61a:	b9 1f       	adc	r27, r25
     61c:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
     61e:	22 81       	ldd	r18, Z+2	; 0x02
     620:	33 81       	ldd	r19, Z+3	; 0x03
     622:	84 81       	ldd	r24, Z+4	; 0x04
     624:	95 81       	ldd	r25, Z+5	; 0x05
     626:	28 17       	cp	r18, r24
     628:	39 07       	cpc	r19, r25
     62a:	21 f4       	brne	.+8      	; 0x634 <__vector_36+0x74>
      rxFifo.tail = 0;
     62c:	10 92 59 0a 	sts	0x0A59, r1	; 0x800a59 <rxFifo+0x3>
     630:	10 92 58 0a 	sts	0x0A58, r1	; 0x800a58 <rxFifo+0x2>
    rxFifo.bytes++;
     634:	e6 e5       	ldi	r30, 0x56	; 86
     636:	fa e0       	ldi	r31, 0x0A	; 10
     638:	86 81       	ldd	r24, Z+6	; 0x06
     63a:	97 81       	ldd	r25, Z+7	; 0x07
     63c:	01 96       	adiw	r24, 0x01	; 1
     63e:	97 83       	std	Z+7, r25	; 0x07
     640:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <newData>
  }

  PRAGMA(diag_default=Pa082);
}
     648:	ff 91       	pop	r31
     64a:	ef 91       	pop	r30
     64c:	bf 91       	pop	r27
     64e:	af 91       	pop	r26
     650:	9f 91       	pop	r25
     652:	8f 91       	pop	r24
     654:	7f 91       	pop	r23
     656:	6f 91       	pop	r22
     658:	5f 91       	pop	r21
     65a:	4f 91       	pop	r20
     65c:	3f 91       	pop	r19
     65e:	2f 91       	pop	r18
     660:	0f 90       	pop	r0
     662:	0b be       	out	0x3b, r0	; 59
     664:	0f 90       	pop	r0
     666:	0f be       	out	0x3f, r0	; 63
     668:	0f 90       	pop	r0
     66a:	1f 90       	pop	r1
     66c:	18 95       	reti

0000066e <HAL_UartTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
  if (txFifo.bytes && udrEmpty)
     66e:	80 91 f7 0b 	lds	r24, 0x0BF7	; 0x800bf7 <txFifo+0x6>
     672:	90 91 f8 0b 	lds	r25, 0x0BF8	; 0x800bf8 <txFifo+0x7>
     676:	00 97       	sbiw	r24, 0x00	; 0
     678:	69 f1       	breq	.+90     	; 0x6d4 <HAL_UartTaskHandler+0x66>
     67a:	20 91 c4 08 	lds	r18, 0x08C4	; 0x8008c4 <udrEmpty>
     67e:	22 23       	and	r18, r18
     680:	49 f1       	breq	.+82     	; 0x6d4 <HAL_UartTaskHandler+0x66>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
     682:	e1 ef       	ldi	r30, 0xF1	; 241
     684:	fb e0       	ldi	r31, 0x0B	; 11
     686:	60 85       	ldd	r22, Z+8	; 0x08
     688:	71 85       	ldd	r23, Z+9	; 0x09
     68a:	20 81       	ld	r18, Z
     68c:	31 81       	ldd	r19, Z+1	; 0x01
     68e:	a9 01       	movw	r20, r18
     690:	4f 5f       	subi	r20, 0xFF	; 255
     692:	5f 4f       	sbci	r21, 0xFF	; 255
     694:	51 83       	std	Z+1, r21	; 0x01
     696:	40 83       	st	Z, r20
     698:	db 01       	movw	r26, r22
     69a:	a2 0f       	add	r26, r18
     69c:	b3 1f       	adc	r27, r19
     69e:	2c 91       	ld	r18, X
    if (txFifo.head == txFifo.size)
     6a0:	64 81       	ldd	r22, Z+4	; 0x04
     6a2:	75 81       	ldd	r23, Z+5	; 0x05
     6a4:	46 17       	cp	r20, r22
     6a6:	57 07       	cpc	r21, r23
     6a8:	21 f4       	brne	.+8      	; 0x6b2 <HAL_UartTaskHandler+0x44>
      txFifo.head = 0;
     6aa:	10 92 f2 0b 	sts	0x0BF2, r1	; 0x800bf2 <txFifo+0x1>
     6ae:	10 92 f1 0b 	sts	0x0BF1, r1	; 0x800bf1 <txFifo>
    txFifo.bytes--;
     6b2:	01 97       	sbiw	r24, 0x01	; 1
     6b4:	90 93 f8 0b 	sts	0x0BF8, r25	; 0x800bf8 <txFifo+0x7>
     6b8:	80 93 f7 0b 	sts	0x0BF7, r24	; 0x800bf7 <txFifo+0x6>

    ATOMIC_SECTION_ENTER
     6bc:	9f b7       	in	r25, 0x3f	; 63
     6be:	f8 94       	cli
      UDRx = byte;
     6c0:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
      UCSRxB |= (1 << UDRIE1);
     6c4:	e9 ec       	ldi	r30, 0xC9	; 201
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	80 81       	ld	r24, Z
     6ca:	80 62       	ori	r24, 0x20	; 32
     6cc:	80 83       	st	Z, r24
      udrEmpty = false;
     6ce:	10 92 c4 08 	sts	0x08C4, r1	; 0x8008c4 <udrEmpty>
    ATOMIC_SECTION_LEAVE
     6d2:	9f bf       	out	0x3f, r25	; 63

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
     6d4:	2f b7       	in	r18, 0x3f	; 63
     6d6:	f8 94       	cli
      new = newData;
     6d8:	90 91 c3 08 	lds	r25, 0x08C3	; 0x8008c3 <newData>
      newData = false;
     6dc:	10 92 c3 08 	sts	0x08C3, r1	; 0x8008c3 <newData>
      bytes = rxFifo.bytes;
     6e0:	40 91 5c 0a 	lds	r20, 0x0A5C	; 0x800a5c <rxFifo+0x6>
     6e4:	50 91 5d 0a 	lds	r21, 0x0A5D	; 0x800a5d <rxFifo+0x7>
    ATOMIC_SECTION_LEAVE
     6e8:	2f bf       	out	0x3f, r18	; 63

    if (new)
     6ea:	99 23       	and	r25, r25
     6ec:	11 f0       	breq	.+4      	; 0x6f2 <HAL_UartTaskHandler+0x84>
      HAL_UartBytesReceived(bytes);
     6ee:	ca 01       	movw	r24, r20
     6f0:	43 cd       	rjmp	.-1402   	; 0x178 <HAL_UartBytesReceived>
     6f2:	08 95       	ret

000006f4 <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
     6f4:	ea ea       	ldi	r30, 0xAA	; 170
     6f6:	ff e1       	ldi	r31, 0x1F	; 31
     6f8:	14 82       	std	Z+4, r1	; 0x04
     6fa:	15 82       	std	Z+5, r1	; 0x05
     6fc:	11 82       	std	Z+1, r1	; 0x01
     6fe:	10 82       	st	Z, r1
     700:	17 a2       	std	Z+39, r1	; 0x27
     702:	16 a2       	std	Z+38, r1	; 0x26
     704:	e0 eb       	ldi	r30, 0xB0	; 176
     706:	ff e1       	ldi	r31, 0x1F	; 31
     708:	80 ed       	ldi	r24, 0xD0	; 208
     70a:	9f e1       	ldi	r25, 0x1F	; 31
     70c:	11 92       	st	Z+, r1
     70e:	11 92       	st	Z+, r1
     710:	e8 17       	cp	r30, r24
     712:	f9 07       	cpc	r31, r25
     714:	d9 f7       	brne	.-10     	; 0x70c <NWK_Init+0x18>
     716:	42 d6       	rcall	.+3204   	; 0x139c <nwkTxInit>
     718:	60 d3       	rcall	.+1728   	; 0xdda <nwkRxInit>
     71a:	0d d1       	rcall	.+538    	; 0x936 <nwkFrameInit>
     71c:	40 d0       	rcall	.+128    	; 0x79e <nwkDataReqInit>
     71e:	92 c1       	rjmp	.+804    	; 0xa44 <nwkRouteInit>
     720:	08 95       	ret

00000722 <NWK_SetAddr>:
     722:	90 93 ab 1f 	sts	0x1FAB, r25	; 0x801fab <nwkIb+0x1>
     726:	80 93 aa 1f 	sts	0x1FAA, r24	; 0x801faa <nwkIb>
     72a:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <PHY_SetShortAddr>
     72e:	08 95       	ret

00000730 <NWK_SetPanId>:
     730:	90 93 ad 1f 	sts	0x1FAD, r25	; 0x801fad <nwkIb+0x3>
     734:	80 93 ac 1f 	sts	0x1FAC, r24	; 0x801fac <nwkIb+0x2>
     738:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <PHY_SetPanId>
     73c:	08 95       	ret

0000073e <NWK_OpenEndpoint>:
     73e:	e8 2f       	mov	r30, r24
     740:	f0 e0       	ldi	r31, 0x00	; 0
     742:	ee 0f       	add	r30, r30
     744:	ff 1f       	adc	r31, r31
     746:	e0 55       	subi	r30, 0x50	; 80
     748:	f0 4e       	sbci	r31, 0xE0	; 224
     74a:	71 83       	std	Z+1, r23	; 0x01
     74c:	60 83       	st	Z, r22
     74e:	08 95       	ret

00000750 <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
     750:	8b d3       	rcall	.+1814   	; 0xe68 <nwkRxTaskHandler>
  nwkTxTaskHandler();
     752:	20 d7       	rcall	.+3648   	; 0x1594 <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
     754:	4d c0       	rjmp	.+154    	; 0x7f0 <nwkDataReqTaskHandler>
     756:	08 95       	ret

00000758 <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     758:	e0 91 fb 0b 	lds	r30, 0x0BFB	; 0x800bfb <nwkDataReqQueue>
     75c:	f0 91 fc 0b 	lds	r31, 0x0BFC	; 0x800bfc <nwkDataReqQueue+0x1>
     760:	30 97       	sbiw	r30, 0x00	; 0
     762:	d9 f0       	breq	.+54     	; 0x79a <nwkDataReqTxConf+0x42>
  {
    if (req->frame == frame)
     764:	22 81       	ldd	r18, Z+2	; 0x02
     766:	33 81       	ldd	r19, Z+3	; 0x03
     768:	82 17       	cp	r24, r18
     76a:	93 07       	cpc	r25, r19
     76c:	89 f4       	brne	.+34     	; 0x790 <nwkDataReqTxConf+0x38>
     76e:	05 c0       	rjmp	.+10     	; 0x77a <nwkDataReqTxConf+0x22>
     770:	22 81       	ldd	r18, Z+2	; 0x02
     772:	33 81       	ldd	r19, Z+3	; 0x03
     774:	28 17       	cp	r18, r24
     776:	39 07       	cpc	r19, r25
     778:	59 f4       	brne	.+22     	; 0x790 <nwkDataReqTxConf+0x38>
    {
      req->status = frame->tx.status;
     77a:	dc 01       	movw	r26, r24
     77c:	ad 57       	subi	r26, 0x7D	; 125
     77e:	bf 4f       	sbci	r27, 0xFF	; 255
     780:	2c 91       	ld	r18, X
     782:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
     784:	13 96       	adiw	r26, 0x03	; 3
     786:	2c 91       	ld	r18, X
     788:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
     78a:	22 e0       	ldi	r18, 0x02	; 2
     78c:	24 83       	std	Z+4, r18	; 0x04
      break;
     78e:	05 c0       	rjmp	.+10     	; 0x79a <nwkDataReqTxConf+0x42>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     790:	01 90       	ld	r0, Z+
     792:	f0 81       	ld	r31, Z
     794:	e0 2d       	mov	r30, r0
     796:	30 97       	sbiw	r30, 0x00	; 0
     798:	59 f7       	brne	.-42     	; 0x770 <nwkDataReqTxConf+0x18>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
     79a:	11 c1       	rjmp	.+546    	; 0x9be <nwkFrameFree>
     79c:	08 95       	ret

0000079e <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
     79e:	10 92 fc 0b 	sts	0x0BFC, r1	; 0x800bfc <nwkDataReqQueue+0x1>
     7a2:	10 92 fb 0b 	sts	0x0BFB, r1	; 0x800bfb <nwkDataReqQueue>
     7a6:	08 95       	ret

000007a8 <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     7a8:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
     7aa:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
     7ac:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
     7ae:	13 82       	std	Z+3, r1	; 0x03
     7b0:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
     7b2:	aa ea       	ldi	r26, 0xAA	; 170
     7b4:	bf e1       	ldi	r27, 0x1F	; 31
     7b6:	96 96       	adiw	r26, 0x26	; 38
     7b8:	8d 91       	ld	r24, X+
     7ba:	9c 91       	ld	r25, X
     7bc:	97 97       	sbiw	r26, 0x27	; 39
     7be:	01 96       	adiw	r24, 0x01	; 1
     7c0:	97 96       	adiw	r26, 0x27	; 39
     7c2:	9c 93       	st	X, r25
     7c4:	8e 93       	st	-X, r24
     7c6:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
     7c8:	80 91 fb 0b 	lds	r24, 0x0BFB	; 0x800bfb <nwkDataReqQueue>
     7cc:	90 91 fc 0b 	lds	r25, 0x0BFC	; 0x800bfc <nwkDataReqQueue+0x1>
     7d0:	00 97       	sbiw	r24, 0x00	; 0
     7d2:	39 f4       	brne	.+14     	; 0x7e2 <NWK_DataReq+0x3a>
  {
    req->next = NULL;
     7d4:	11 82       	std	Z+1, r1	; 0x01
     7d6:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
     7d8:	f0 93 fc 0b 	sts	0x0BFC, r31	; 0x800bfc <nwkDataReqQueue+0x1>
     7dc:	e0 93 fb 0b 	sts	0x0BFB, r30	; 0x800bfb <nwkDataReqQueue>
     7e0:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
     7e2:	91 83       	std	Z+1, r25	; 0x01
     7e4:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
     7e6:	f0 93 fc 0b 	sts	0x0BFC, r31	; 0x800bfc <nwkDataReqQueue+0x1>
     7ea:	e0 93 fb 0b 	sts	0x0BFB, r30	; 0x800bfb <nwkDataReqQueue>
     7ee:	08 95       	ret

000007f0 <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     7f8:	e0 91 fb 0b 	lds	r30, 0x0BFB	; 0x800bfb <nwkDataReqQueue>
     7fc:	f0 91 fc 0b 	lds	r31, 0x0BFC	; 0x800bfc <nwkDataReqQueue+0x1>
     800:	30 97       	sbiw	r30, 0x00	; 0
     802:	09 f4       	brne	.+2      	; 0x806 <nwkDataReqTaskHandler+0x16>
     804:	93 c0       	rjmp	.+294    	; 0x92c <nwkDataReqTaskHandler+0x13c>
     806:	ef 01       	movw	r28, r30
  {
    switch (req->state)
     808:	8c 81       	ldd	r24, Y+4	; 0x04
     80a:	88 23       	and	r24, r24
     80c:	21 f0       	breq	.+8      	; 0x816 <nwkDataReqTaskHandler+0x26>
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	09 f4       	brne	.+2      	; 0x814 <nwkDataReqTaskHandler+0x24>
     812:	66 c0       	rjmp	.+204    	; 0x8e0 <nwkDataReqTaskHandler+0xf0>
     814:	85 c0       	rjmp	.+266    	; 0x920 <nwkDataReqTaskHandler+0x130>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
     816:	9a d0       	rcall	.+308    	; 0x94c <nwkFrameAlloc>
     818:	8c 01       	movw	r16, r24
     81a:	00 97       	sbiw	r24, 0x00	; 0
     81c:	21 f4       	brne	.+8      	; 0x826 <nwkDataReqTaskHandler+0x36>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
     81e:	82 e0       	ldi	r24, 0x02	; 2
     820:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
     822:	8f 87       	std	Y+15, r24	; 0x0f
     824:	83 c0       	rjmp	.+262    	; 0x92c <nwkDataReqTaskHandler+0x13c>
    return;
  }

  req->frame = frame;
     826:	9b 83       	std	Y+3, r25	; 0x03
     828:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
     82e:	f8 01       	movw	r30, r16
     830:	e9 57       	subi	r30, 0x79	; 121
     832:	ff 4f       	sbci	r31, 0xFF	; 255
     834:	8c ea       	ldi	r24, 0xAC	; 172
     836:	93 e0       	ldi	r25, 0x03	; 3
     838:	91 83       	std	Z+1, r25	; 0x01
     83a:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
     83c:	31 97       	sbiw	r30, 0x01	; 1
     83e:	89 85       	ldd	r24, Y+9	; 0x09
     840:	82 fb       	bst	r24, 2
     842:	88 27       	eor	r24, r24
     844:	80 f9       	bld	r24, 0
     846:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
     848:	99 85       	ldd	r25, Y+9	; 0x09
     84a:	d8 01       	movw	r26, r16
     84c:	1b 96       	adiw	r26, 0x0b	; 11
     84e:	8c 91       	ld	r24, X
     850:	1b 97       	sbiw	r26, 0x0b	; 11
     852:	90 fb       	bst	r25, 0
     854:	80 f9       	bld	r24, 0
     856:	1b 96       	adiw	r26, 0x0b	; 11
     858:	8c 93       	st	X, r24
     85a:	1b 97       	sbiw	r26, 0x0b	; 11
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
     85c:	99 85       	ldd	r25, Y+9	; 0x09
     85e:	93 fb       	bst	r25, 3
     860:	99 27       	eor	r25, r25
     862:	90 f9       	bld	r25, 0
     864:	90 fb       	bst	r25, 0
     866:	82 f9       	bld	r24, 2
     868:	1b 96       	adiw	r26, 0x0b	; 11
     86a:	8c 93       	st	X, r24
     86c:	1b 97       	sbiw	r26, 0x0b	; 11
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     86e:	ea ea       	ldi	r30, 0xAA	; 170
     870:	ff e1       	ldi	r31, 0x1F	; 31
     872:	84 81       	ldd	r24, Z+4	; 0x04
     874:	8f 5f       	subi	r24, 0xFF	; 255
     876:	84 83       	std	Z+4, r24	; 0x04
     878:	1c 96       	adiw	r26, 0x0c	; 12
     87a:	8c 93       	st	X, r24
     87c:	1c 97       	sbiw	r26, 0x0c	; 12
  frame->header.nwkSrcAddr = nwkIb.addr;
     87e:	80 81       	ld	r24, Z
     880:	91 81       	ldd	r25, Z+1	; 0x01
     882:	1e 96       	adiw	r26, 0x0e	; 14
     884:	9c 93       	st	X, r25
     886:	8e 93       	st	-X, r24
     888:	1d 97       	sbiw	r26, 0x0d	; 13
  frame->header.nwkDstAddr = req->dstAddr;
     88a:	8d 81       	ldd	r24, Y+5	; 0x05
     88c:	9e 81       	ldd	r25, Y+6	; 0x06
     88e:	50 96       	adiw	r26, 0x10	; 16
     890:	9c 93       	st	X, r25
     892:	8e 93       	st	-X, r24
     894:	1f 97       	sbiw	r26, 0x0f	; 15
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
     896:	88 85       	ldd	r24, Y+8	; 0x08
     898:	98 2f       	mov	r25, r24
     89a:	9f 70       	andi	r25, 0x0F	; 15
     89c:	51 96       	adiw	r26, 0x11	; 17
     89e:	8c 91       	ld	r24, X
     8a0:	51 97       	sbiw	r26, 0x11	; 17
     8a2:	80 7f       	andi	r24, 0xF0	; 240
     8a4:	89 2b       	or	r24, r25
     8a6:	51 96       	adiw	r26, 0x11	; 17
     8a8:	8c 93       	st	X, r24
     8aa:	51 97       	sbiw	r26, 0x11	; 17
  frame->header.nwkDstEndpoint = req->dstEndpoint;
     8ac:	9f 81       	ldd	r25, Y+7	; 0x07
     8ae:	92 95       	swap	r25
     8b0:	90 7f       	andi	r25, 0xF0	; 240
     8b2:	8f 70       	andi	r24, 0x0F	; 15
     8b4:	89 2b       	or	r24, r25
     8b6:	51 96       	adiw	r26, 0x11	; 17
     8b8:	8c 93       	st	X, r24

  memcpy(frame->payload, req->data, req->size);
     8ba:	f8 01       	movw	r30, r16
     8bc:	ef 57       	subi	r30, 0x7F	; 127
     8be:	ff 4f       	sbci	r31, 0xFF	; 255
     8c0:	4c 85       	ldd	r20, Y+12	; 0x0c
     8c2:	50 e0       	ldi	r21, 0x00	; 0
     8c4:	6a 85       	ldd	r22, Y+10	; 0x0a
     8c6:	7b 85       	ldd	r23, Y+11	; 0x0b
     8c8:	80 81       	ld	r24, Z
     8ca:	91 81       	ldd	r25, Z+1	; 0x01
     8cc:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <memcpy>
  frame->size += req->size;
     8d0:	f8 01       	movw	r30, r16
     8d2:	91 81       	ldd	r25, Z+1	; 0x01
     8d4:	8c 85       	ldd	r24, Y+12	; 0x0c
     8d6:	89 0f       	add	r24, r25
     8d8:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
     8da:	c8 01       	movw	r24, r16
     8dc:	82 d5       	rcall	.+2820   	; 0x13e2 <nwkTxFrame>
     8de:	26 c0       	rjmp	.+76     	; 0x92c <nwkDataReqTaskHandler+0x13c>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
     8e0:	ec 17       	cp	r30, r28
     8e2:	fd 07       	cpc	r31, r29
     8e4:	41 f4       	brne	.+16     	; 0x8f6 <nwkDataReqTaskHandler+0x106>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
     8e6:	80 81       	ld	r24, Z
     8e8:	91 81       	ldd	r25, Z+1	; 0x01
     8ea:	90 93 fc 0b 	sts	0x0BFC, r25	; 0x800bfc <nwkDataReqQueue+0x1>
     8ee:	80 93 fb 0b 	sts	0x0BFB, r24	; 0x800bfb <nwkDataReqQueue>
     8f2:	0a c0       	rjmp	.+20     	; 0x908 <nwkDataReqTaskHandler+0x118>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
     8f4:	fc 01       	movw	r30, r24
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
     8f6:	80 81       	ld	r24, Z
     8f8:	91 81       	ldd	r25, Z+1	; 0x01
     8fa:	8c 17       	cp	r24, r28
     8fc:	9d 07       	cpc	r25, r29
     8fe:	d1 f7       	brne	.-12     	; 0x8f4 <nwkDataReqTaskHandler+0x104>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
     900:	88 81       	ld	r24, Y
     902:	99 81       	ldd	r25, Y+1	; 0x01
     904:	91 83       	std	Z+1, r25	; 0x01
     906:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
     908:	ea ea       	ldi	r30, 0xAA	; 170
     90a:	ff e1       	ldi	r31, 0x1F	; 31
     90c:	86 a1       	ldd	r24, Z+38	; 0x26
     90e:	97 a1       	ldd	r25, Z+39	; 0x27
     910:	01 97       	sbiw	r24, 0x01	; 1
     912:	97 a3       	std	Z+39, r25	; 0x27
     914:	86 a3       	std	Z+38, r24	; 0x26
  req->confirm(req);
     916:	ed 85       	ldd	r30, Y+13	; 0x0d
     918:	fe 85       	ldd	r31, Y+14	; 0x0e
     91a:	ce 01       	movw	r24, r28
     91c:	19 95       	eicall
     91e:	06 c0       	rjmp	.+12     	; 0x92c <nwkDataReqTaskHandler+0x13c>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     920:	09 90       	ld	r0, Y+
     922:	d8 81       	ld	r29, Y
     924:	c0 2d       	mov	r28, r0
     926:	20 97       	sbiw	r28, 0x00	; 0
     928:	09 f0       	breq	.+2      	; 0x92c <nwkDataReqTaskHandler+0x13c>
     92a:	6e cf       	rjmp	.-292    	; 0x808 <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	08 95       	ret

00000936 <nwkFrameInit>:

/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
     936:	ed ef       	ldi	r30, 0xFD	; 253
     938:	fb e0       	ldi	r31, 0x0B	; 11
     93a:	8b e0       	ldi	r24, 0x0B	; 11
     93c:	9c e1       	ldi	r25, 0x1C	; 28
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     93e:	10 82       	st	Z, r1
     940:	e7 57       	subi	r30, 0x77	; 119
     942:	ff 4f       	sbci	r31, 0xFF	; 255
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     944:	e8 17       	cp	r30, r24
     946:	f9 07       	cpc	r31, r25
     948:	d1 f7       	brne	.-12     	; 0x93e <nwkFrameInit+0x8>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
     94a:	08 95       	ret

0000094c <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
     94c:	80 91 fd 0b 	lds	r24, 0x0BFD	; 0x800bfd <nwkFrameFrames>
     950:	88 23       	and	r24, r24
     952:	59 f0       	breq	.+22     	; 0x96a <nwkFrameAlloc+0x1e>
     954:	e6 e8       	ldi	r30, 0x86	; 134
     956:	fc e0       	ldi	r31, 0x0C	; 12
     958:	6b e0       	ldi	r22, 0x0B	; 11
     95a:	7c e1       	ldi	r23, 0x1C	; 28
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	ac 01       	movw	r20, r24
     962:	20 81       	ld	r18, Z
     964:	21 11       	cpse	r18, r1
     966:	22 c0       	rjmp	.+68     	; 0x9ac <nwkFrameAlloc+0x60>
     968:	02 c0       	rjmp	.+4      	; 0x96e <nwkFrameAlloc+0x22>
     96a:	40 e0       	ldi	r20, 0x00	; 0
     96c:	50 e0       	ldi	r21, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
     96e:	69 e8       	ldi	r22, 0x89	; 137
     970:	64 9f       	mul	r22, r20
     972:	90 01       	movw	r18, r0
     974:	65 9f       	mul	r22, r21
     976:	30 0d       	add	r19, r0
     978:	11 24       	eor	r1, r1
     97a:	c9 01       	movw	r24, r18
     97c:	83 50       	subi	r24, 0x03	; 3
     97e:	94 4f       	sbci	r25, 0xF4	; 244
     980:	fc 01       	movw	r30, r24
     982:	11 92       	st	Z+, r1
     984:	6a 95       	dec	r22
     986:	e9 f7       	brne	.-6      	; 0x982 <nwkFrameAlloc+0x36>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
     988:	40 e1       	ldi	r20, 0x10	; 16
     98a:	fc 01       	movw	r30, r24
     98c:	41 83       	std	Z+1, r20	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
     98e:	ef 57       	subi	r30, 0x7F	; 127
     990:	ff 4f       	sbci	r31, 0xFF	; 255
     992:	21 5f       	subi	r18, 0xF1	; 241
     994:	33 4f       	sbci	r19, 0xF3	; 243
     996:	31 83       	std	Z+1, r19	; 0x01
     998:	20 83       	st	Z, r18
      nwkIb.lock++;
     99a:	ea ea       	ldi	r30, 0xAA	; 170
     99c:	ff e1       	ldi	r31, 0x1F	; 31
     99e:	26 a1       	ldd	r18, Z+38	; 0x26
     9a0:	37 a1       	ldd	r19, Z+39	; 0x27
     9a2:	2f 5f       	subi	r18, 0xFF	; 255
     9a4:	3f 4f       	sbci	r19, 0xFF	; 255
     9a6:	37 a3       	std	Z+39, r19	; 0x27
     9a8:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
     9aa:	08 95       	ret
     9ac:	01 96       	adiw	r24, 0x01	; 1
     9ae:	e7 57       	subi	r30, 0x77	; 119
     9b0:	ff 4f       	sbci	r31, 0xFF	; 255
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     9b2:	e6 17       	cp	r30, r22
     9b4:	f7 07       	cpc	r31, r23
     9b6:	a1 f6       	brne	.-88     	; 0x960 <nwkFrameAlloc+0x14>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	90 e0       	ldi	r25, 0x00	; 0
}
     9bc:	08 95       	ret

000009be <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
     9be:	fc 01       	movw	r30, r24
     9c0:	10 82       	st	Z, r1
  nwkIb.lock--;
     9c2:	ea ea       	ldi	r30, 0xAA	; 170
     9c4:	ff e1       	ldi	r31, 0x1F	; 31
     9c6:	86 a1       	ldd	r24, Z+38	; 0x26
     9c8:	97 a1       	ldd	r25, Z+39	; 0x27
     9ca:	01 97       	sbiw	r24, 0x01	; 1
     9cc:	97 a3       	std	Z+39, r25	; 0x27
     9ce:	86 a3       	std	Z+38, r24	; 0x26
     9d0:	08 95       	ret

000009d2 <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
     9d2:	00 97       	sbiw	r24, 0x00	; 0
     9d4:	41 f0       	breq	.+16     	; 0x9e6 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
     9d6:	fc 01       	movw	r30, r24
     9d8:	e7 57       	subi	r30, 0x77	; 119
     9da:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     9dc:	8c e1       	ldi	r24, 0x1C	; 28
     9de:	eb 30       	cpi	r30, 0x0B	; 11
     9e0:	f8 07       	cpc	r31, r24
     9e2:	18 f0       	brcs	.+6      	; 0x9ea <nwkFrameNext+0x18>
     9e4:	12 c0       	rjmp	.+36     	; 0xa0a <nwkFrameNext+0x38>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
     9e6:	ed ef       	ldi	r30, 0xFD	; 253
     9e8:	fb e0       	ldi	r31, 0x0B	; 11
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     9ea:	80 81       	ld	r24, Z
     9ec:	88 23       	and	r24, r24
     9ee:	21 f0       	breq	.+8      	; 0x9f8 <nwkFrameNext+0x26>
     9f0:	0f c0       	rjmp	.+30     	; 0xa10 <nwkFrameNext+0x3e>
     9f2:	80 81       	ld	r24, Z
     9f4:	81 11       	cpse	r24, r1
     9f6:	0f c0       	rjmp	.+30     	; 0xa16 <nwkFrameNext+0x44>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     9f8:	e7 57       	subi	r30, 0x77	; 119
     9fa:	ff 4f       	sbci	r31, 0xFF	; 255
     9fc:	8c e1       	ldi	r24, 0x1C	; 28
     9fe:	eb 30       	cpi	r30, 0x0B	; 11
     a00:	f8 07       	cpc	r31, r24
     a02:	b8 f3       	brcs	.-18     	; 0x9f2 <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	08 95       	ret
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	08 95       	ret
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     a10:	8e 2f       	mov	r24, r30
     a12:	9f 2f       	mov	r25, r31
     a14:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     a16:	8e 2f       	mov	r24, r30
     a18:	9f 2f       	mov	r25, r31
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
}
     a1a:	08 95       	ret

00000a1c <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
     a1c:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
     a1e:	dc 01       	movw	r26, r24
     a20:	ad 57       	subi	r26, 0x7D	; 125
     a22:	bf 4f       	sbci	r27, 0xFF	; 255
     a24:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     a26:	aa ea       	ldi	r26, 0xAA	; 170
     a28:	bf e1       	ldi	r27, 0x1F	; 31
     a2a:	14 96       	adiw	r26, 0x04	; 4
     a2c:	9c 91       	ld	r25, X
     a2e:	14 97       	sbiw	r26, 0x04	; 4
     a30:	9f 5f       	subi	r25, 0xFF	; 255
     a32:	14 96       	adiw	r26, 0x04	; 4
     a34:	9c 93       	st	X, r25
     a36:	14 97       	sbiw	r26, 0x04	; 4
     a38:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
     a3a:	8d 91       	ld	r24, X+
     a3c:	9c 91       	ld	r25, X
     a3e:	96 87       	std	Z+14, r25	; 0x0e
     a40:	85 87       	std	Z+13, r24	; 0x0d
     a42:	08 95       	ret

00000a44 <nwkRouteInit>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
     a44:	ac e0       	ldi	r26, 0x0C	; 12
     a46:	bc e1       	ldi	r27, 0x1C	; 28
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	4f ef       	ldi	r20, 0xFF	; 255
     a4e:	5f ef       	ldi	r21, 0xFF	; 255
     a50:	11 96       	adiw	r26, 0x01	; 1
     a52:	5c 93       	st	X, r21
     a54:	4e 93       	st	-X, r20
     a56:	fc 01       	movw	r30, r24
     a58:	ee 0f       	add	r30, r30
     a5a:	ff 1f       	adc	r31, r31
     a5c:	ee 0f       	add	r30, r30
     a5e:	ff 1f       	adc	r31, r31
     a60:	ee 0f       	add	r30, r30
     a62:	ff 1f       	adc	r31, r31
     a64:	e8 1b       	sub	r30, r24
     a66:	f9 0b       	sbc	r31, r25
     a68:	e5 5f       	subi	r30, 0xF5	; 245
     a6a:	f3 4e       	sbci	r31, 0xE3	; 227
     a6c:	20 81       	ld	r18, Z
     a6e:	2e 7f       	andi	r18, 0xFE	; 254
     a70:	20 83       	st	Z, r18
     a72:	14 96       	adiw	r26, 0x04	; 4
     a74:	1c 92       	st	X, r1
     a76:	14 97       	sbiw	r26, 0x04	; 4
     a78:	01 96       	adiw	r24, 0x01	; 1
     a7a:	17 96       	adiw	r26, 0x07	; 7
     a7c:	84 36       	cpi	r24, 0x64	; 100
     a7e:	91 05       	cpc	r25, r1
     a80:	39 f7       	brne	.-50     	; 0xa50 <nwkRouteInit+0xc>
     a82:	08 95       	ret

00000a84 <NWK_RouteFindEntry>:
     a84:	0f 93       	push	r16
     a86:	1f 93       	push	r17
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	ec e0       	ldi	r30, 0x0C	; 12
     a8e:	fc e1       	ldi	r31, 0x1C	; 28
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	06 2f       	mov	r16, r22
     a96:	10 e0       	ldi	r17, 0x00	; 0
     a98:	40 81       	ld	r20, Z
     a9a:	51 81       	ldd	r21, Z+1	; 0x01
     a9c:	48 17       	cp	r20, r24
     a9e:	59 07       	cpc	r21, r25
     aa0:	b1 f4       	brne	.+44     	; 0xace <NWK_RouteFindEntry+0x4a>
     aa2:	d9 01       	movw	r26, r18
     aa4:	aa 0f       	add	r26, r26
     aa6:	bb 1f       	adc	r27, r27
     aa8:	aa 0f       	add	r26, r26
     aaa:	bb 1f       	adc	r27, r27
     aac:	aa 0f       	add	r26, r26
     aae:	bb 1f       	adc	r27, r27
     ab0:	a2 1b       	sub	r26, r18
     ab2:	b3 0b       	sbc	r27, r19
     ab4:	a5 5f       	subi	r26, 0xF5	; 245
     ab6:	b3 4e       	sbci	r27, 0xE3	; 227
     ab8:	4c 91       	ld	r20, X
     aba:	46 95       	lsr	r20
     abc:	41 70       	andi	r20, 0x01	; 1
     abe:	c4 2f       	mov	r28, r20
     ac0:	40 e0       	ldi	r20, 0x00	; 0
     ac2:	d4 2f       	mov	r29, r20
     ac4:	c0 17       	cp	r28, r16
     ac6:	d1 07       	cpc	r29, r17
     ac8:	11 f4       	brne	.+4      	; 0xace <NWK_RouteFindEntry+0x4a>
     aca:	cd 01       	movw	r24, r26
     acc:	08 c0       	rjmp	.+16     	; 0xade <NWK_RouteFindEntry+0x5a>
     ace:	2f 5f       	subi	r18, 0xFF	; 255
     ad0:	3f 4f       	sbci	r19, 0xFF	; 255
     ad2:	37 96       	adiw	r30, 0x07	; 7
     ad4:	24 36       	cpi	r18, 0x64	; 100
     ad6:	31 05       	cpc	r19, r1
     ad8:	f9 f6       	brne	.-66     	; 0xa98 <NWK_RouteFindEntry+0x14>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	08 95       	ret

00000ae8 <NWK_RouteNewEntry>:
     ae8:	a0 e0       	ldi	r26, 0x00	; 0
     aea:	b0 e0       	ldi	r27, 0x00	; 0
     aec:	eb e0       	ldi	r30, 0x0B	; 11
     aee:	fc e1       	ldi	r31, 0x1C	; 28
     af0:	80 81       	ld	r24, Z
     af2:	80 fd       	sbrc	r24, 0
     af4:	0d c0       	rjmp	.+26     	; 0xb10 <NWK_RouteNewEntry+0x28>
     af6:	85 81       	ldd	r24, Z+5	; 0x05
     af8:	88 23       	and	r24, r24
     afa:	81 f0       	breq	.+32     	; 0xb1c <NWK_RouteNewEntry+0x34>
     afc:	10 97       	sbiw	r26, 0x00	; 0
     afe:	39 f0       	breq	.+14     	; 0xb0e <NWK_RouteNewEntry+0x26>
     b00:	15 96       	adiw	r26, 0x05	; 5
     b02:	9c 91       	ld	r25, X
     b04:	15 97       	sbiw	r26, 0x05	; 5
     b06:	89 17       	cp	r24, r25
     b08:	18 f4       	brcc	.+6      	; 0xb10 <NWK_RouteNewEntry+0x28>
     b0a:	df 01       	movw	r26, r30
     b0c:	01 c0       	rjmp	.+2      	; 0xb10 <NWK_RouteNewEntry+0x28>
     b0e:	df 01       	movw	r26, r30
     b10:	37 96       	adiw	r30, 0x07	; 7
     b12:	8e e1       	ldi	r24, 0x1E	; 30
     b14:	e7 3c       	cpi	r30, 0xC7	; 199
     b16:	f8 07       	cpc	r31, r24
     b18:	59 f7       	brne	.-42     	; 0xaf0 <NWK_RouteNewEntry+0x8>
     b1a:	fd 01       	movw	r30, r26
     b1c:	80 81       	ld	r24, Z
     b1e:	8d 70       	andi	r24, 0x0D	; 13
     b20:	80 63       	ori	r24, 0x30	; 48
     b22:	80 83       	st	Z, r24
     b24:	80 e8       	ldi	r24, 0x80	; 128
     b26:	85 83       	std	Z+5, r24	; 0x05
     b28:	cf 01       	movw	r24, r30
     b2a:	08 95       	ret

00000b2c <NWK_RouteFreeEntry>:
     b2c:	fc 01       	movw	r30, r24
     b2e:	80 81       	ld	r24, Z
     b30:	80 fd       	sbrc	r24, 0
     b32:	05 c0       	rjmp	.+10     	; 0xb3e <NWK_RouteFreeEntry+0x12>
     b34:	8f ef       	ldi	r24, 0xFF	; 255
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	92 83       	std	Z+2, r25	; 0x02
     b3a:	81 83       	std	Z+1, r24	; 0x01
     b3c:	15 82       	std	Z+5, r1	; 0x05
     b3e:	08 95       	ret

00000b40 <NWK_RouteNextHop>:
     b40:	a1 df       	rcall	.-190    	; 0xa84 <NWK_RouteFindEntry>
     b42:	00 97       	sbiw	r24, 0x00	; 0
     b44:	21 f0       	breq	.+8      	; 0xb4e <NWK_RouteNextHop+0xe>
     b46:	fc 01       	movw	r30, r24
     b48:	83 81       	ldd	r24, Z+3	; 0x03
     b4a:	94 81       	ldd	r25, Z+4	; 0x04
     b4c:	08 95       	ret
     b4e:	8f ef       	ldi	r24, 0xFF	; 255
     b50:	9f ef       	ldi	r25, 0xFF	; 255
     b52:	08 95       	ret

00000b54 <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
     b54:	97 df       	rcall	.-210    	; 0xa84 <NWK_RouteFindEntry>
  if (entry)
     b56:	00 97       	sbiw	r24, 0x00	; 0
    NWK_RouteFreeEntry(entry);
     b58:	09 f0       	breq	.+2      	; 0xb5c <nwkRouteRemove+0x8>
     b5a:	e8 cf       	rjmp	.-48     	; 0xb2c <NWK_RouteFreeEntry>
     b5c:	08 95       	ret

00000b5e <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
     b5e:	0f 93       	push	r16
     b60:	1f 93       	push	r17
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
     b66:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
     b68:	01 85       	ldd	r16, Z+9	; 0x09
     b6a:	12 85       	ldd	r17, Z+10	; 0x0a
     b6c:	11 23       	and	r17, r17
     b6e:	2c f4       	brge	.+10     	; 0xb7a <nwkRouteFrameReceived+0x1c>
     b70:	85 85       	ldd	r24, Z+13	; 0x0d
     b72:	96 85       	ldd	r25, Z+14	; 0x0e
     b74:	08 17       	cp	r16, r24
     b76:	19 07       	cpc	r17, r25
     b78:	e1 f5       	brne	.+120    	; 0xbf2 <nwkRouteFrameReceived+0x94>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     b7a:	85 81       	ldd	r24, Z+5	; 0x05
     b7c:	96 81       	ldd	r25, Z+6	; 0x06
     b7e:	01 96       	adiw	r24, 0x01	; 1
     b80:	c1 f1       	breq	.+112    	; 0xbf2 <nwkRouteFrameReceived+0x94>
     b82:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
     b84:	60 e0       	ldi	r22, 0x00	; 0
     b86:	85 85       	ldd	r24, Z+13	; 0x0d
     b88:	96 85       	ldd	r25, Z+14	; 0x0e
     b8a:	7c df       	rcall	.-264    	; 0xa84 <NWK_RouteFindEntry>
     b8c:	fc 01       	movw	r30, r24

  if (entry)
     b8e:	89 2b       	or	r24, r25
     b90:	a1 f0       	breq	.+40     	; 0xbba <nwkRouteFrameReceived+0x5c>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
     b92:	8f 81       	ldd	r24, Y+7	; 0x07
     b94:	98 85       	ldd	r25, Y+8	; 0x08
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	f9 f4       	brne	.+62     	; 0xbd8 <nwkRouteFrameReceived+0x7a>
     b9a:	20 91 aa 1f 	lds	r18, 0x1FAA	; 0x801faa <nwkIb>
     b9e:	30 91 ab 1f 	lds	r19, 0x1FAB	; 0x801fab <nwkIb+0x1>
     ba2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ba4:	98 89       	ldd	r25, Y+16	; 0x10
     ba6:	28 17       	cp	r18, r24
     ba8:	39 07       	cpc	r19, r25
     baa:	b1 f4       	brne	.+44     	; 0xbd8 <nwkRouteFrameReceived+0x7a>
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    {
      entry->nextHopAddr = header->macSrcAddr;
     bac:	14 83       	std	Z+4, r17	; 0x04
     bae:	03 83       	std	Z+3, r16	; 0x03
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
     bb0:	80 81       	ld	r24, Z
     bb2:	8f 70       	andi	r24, 0x0F	; 15
     bb4:	80 63       	ori	r24, 0x30	; 48
     bb6:	80 83       	st	Z, r24
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
     bb8:	0a c0       	rjmp	.+20     	; 0xbce <nwkRouteFrameReceived+0x70>
     bba:	96 df       	rcall	.-212    	; 0xae8 <NWK_RouteNewEntry>
     bbc:	fc 01       	movw	r30, r24

    entry->dstAddr = header->nwkSrcAddr;
     bbe:	8d 85       	ldd	r24, Y+13	; 0x0d
     bc0:	9e 85       	ldd	r25, Y+14	; 0x0e
     bc2:	92 83       	std	Z+2, r25	; 0x02
     bc4:	81 83       	std	Z+1, r24	; 0x01
    entry->nextHopAddr = header->macSrcAddr;
     bc6:	89 85       	ldd	r24, Y+9	; 0x09
     bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bca:	94 83       	std	Z+4, r25	; 0x04
     bcc:	83 83       	std	Z+3, r24	; 0x03
  }

  entry->lqi = frame->rx.lqi;
     bce:	cd 57       	subi	r28, 0x7D	; 125
     bd0:	df 4f       	sbci	r29, 0xFF	; 255
     bd2:	88 81       	ld	r24, Y
     bd4:	86 83       	std	Z+6, r24	; 0x06
     bd6:	0d c0       	rjmp	.+26     	; 0xbf2 <nwkRouteFrameReceived+0x94>
  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
     bd8:	83 81       	ldd	r24, Z+3	; 0x03
     bda:	94 81       	ldd	r25, Z+4	; 0x04
     bdc:	08 17       	cp	r16, r24
     bde:	19 07       	cpc	r17, r25
     be0:	b1 f3       	breq	.-20     	; 0xbce <nwkRouteFrameReceived+0x70>
     be2:	96 81       	ldd	r25, Z+6	; 0x06
     be4:	de 01       	movw	r26, r28
     be6:	ad 57       	subi	r26, 0x7D	; 125
     be8:	bf 4f       	sbci	r27, 0xFF	; 255
     bea:	8c 91       	ld	r24, X
     bec:	98 17       	cp	r25, r24
     bee:	f0 f2       	brcs	.-68     	; 0xbac <nwkRouteFrameReceived+0x4e>
     bf0:	ee cf       	rjmp	.-36     	; 0xbce <nwkRouteFrameReceived+0x70>

  entry->lqi = frame->rx.lqi;
#else
  (void)frame;
#endif
}
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	1f 91       	pop	r17
     bf8:	0f 91       	pop	r16
     bfa:	08 95       	ret

00000bfc <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	fc 01       	movw	r30, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
     c02:	87 85       	ldd	r24, Z+15	; 0x0f
     c04:	90 89       	ldd	r25, Z+16	; 0x10
     c06:	8f 3f       	cpi	r24, 0xFF	; 255
     c08:	2f ef       	ldi	r18, 0xFF	; 255
     c0a:	92 07       	cpc	r25, r18
     c0c:	d9 f1       	breq	.+118    	; 0xc84 <nwkRouteFrameSent+0x88>
     c0e:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
     c10:	63 85       	ldd	r22, Z+11	; 0x0b
     c12:	63 fb       	bst	r22, 3
     c14:	66 27       	eor	r22, r22
     c16:	60 f9       	bld	r22, 0
     c18:	35 df       	rcall	.-406    	; 0xa84 <NWK_RouteFindEntry>
     c1a:	dc 01       	movw	r26, r24

  if (NULL == entry || entry->fixed)
     c1c:	89 2b       	or	r24, r25
     c1e:	91 f1       	breq	.+100    	; 0xc84 <nwkRouteFrameSent+0x88>
     c20:	8c 91       	ld	r24, X
     c22:	80 fd       	sbrc	r24, 0
     c24:	2f c0       	rjmp	.+94     	; 0xc84 <nwkRouteFrameSent+0x88>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
     c26:	fe 01       	movw	r30, r28
     c28:	ed 57       	subi	r30, 0x7D	; 125
     c2a:	ff 4f       	sbci	r31, 0xFF	; 255
     c2c:	80 81       	ld	r24, Z
     c2e:	81 11       	cpse	r24, r1
     c30:	19 c0       	rjmp	.+50     	; 0xc64 <nwkRouteFrameSent+0x68>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
     c32:	8c 91       	ld	r24, X
     c34:	8f 70       	andi	r24, 0x0F	; 15
     c36:	80 63       	ori	r24, 0x30	; 48
     c38:	8c 93       	st	X, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
     c3a:	15 96       	adiw	r26, 0x05	; 5
     c3c:	8c 91       	ld	r24, X
     c3e:	15 97       	sbiw	r26, 0x05	; 5
     c40:	8f 5f       	subi	r24, 0xFF	; 255
     c42:	15 96       	adiw	r26, 0x05	; 5
     c44:	8c 93       	st	X, r24
     c46:	8f 3f       	cpi	r24, 0xFF	; 255
     c48:	e9 f4       	brne	.+58     	; 0xc84 <nwkRouteFrameSent+0x88>
     c4a:	e0 e1       	ldi	r30, 0x10	; 16
     c4c:	fc e1       	ldi	r31, 0x1C	; 28
     c4e:	2c ec       	ldi	r18, 0xCC	; 204
     c50:	3e e1       	ldi	r19, 0x1E	; 30
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
     c52:	80 81       	ld	r24, Z
     c54:	86 95       	lsr	r24
     c56:	8f 5f       	subi	r24, 0xFF	; 255
     c58:	80 83       	st	Z, r24
     c5a:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
     c5c:	e2 17       	cp	r30, r18
     c5e:	f3 07       	cpc	r31, r19
     c60:	c1 f7       	brne	.-16     	; 0xc52 <nwkRouteFrameSent+0x56>
     c62:	10 c0       	rjmp	.+32     	; 0xc84 <nwkRouteFrameSent+0x88>
    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
      nwkRouteNormalizeRanks();
  }
  else
  {
    if (0 == --entry->score)
     c64:	9c 91       	ld	r25, X
     c66:	89 2f       	mov	r24, r25
     c68:	82 95       	swap	r24
     c6a:	8f 70       	andi	r24, 0x0F	; 15
     c6c:	81 5f       	subi	r24, 0xF1	; 241
     c6e:	8f 70       	andi	r24, 0x0F	; 15
     c70:	28 2f       	mov	r18, r24
     c72:	22 95       	swap	r18
     c74:	20 7f       	andi	r18, 0xF0	; 240
     c76:	9f 70       	andi	r25, 0x0F	; 15
     c78:	92 2b       	or	r25, r18
     c7a:	9c 93       	st	X, r25
     c7c:	81 11       	cpse	r24, r1
     c7e:	02 c0       	rjmp	.+4      	; 0xc84 <nwkRouteFrameSent+0x88>
      NWK_RouteFreeEntry(entry);
     c80:	cd 01       	movw	r24, r26
     c82:	54 df       	rcall	.-344    	; 0xb2c <NWK_RouteFreeEntry>
  }
}
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	08 95       	ret

00000c8a <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
     c8e:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
     c90:	87 85       	ldd	r24, Z+15	; 0x0f
     c92:	90 89       	ldd	r25, Z+16	; 0x10
     c94:	8f 3f       	cpi	r24, 0xFF	; 255
     c96:	2f ef       	ldi	r18, 0xFF	; 255
     c98:	92 07       	cpc	r25, r18
     c9a:	29 f4       	brne	.+10     	; 0xca6 <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
     c9c:	8f ef       	ldi	r24, 0xFF	; 255
     c9e:	9f ef       	ldi	r25, 0xFF	; 255
     ca0:	90 87       	std	Z+8, r25	; 0x08
     ca2:	87 83       	std	Z+7, r24	; 0x07
     ca4:	0e c0       	rjmp	.+28     	; 0xcc2 <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
     ca6:	23 85       	ldd	r18, Z+11	; 0x0b
     ca8:	22 ff       	sbrs	r18, 2
     caa:	03 c0       	rjmp	.+6      	; 0xcb2 <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
     cac:	90 87       	std	Z+8, r25	; 0x08
     cae:	87 83       	std	Z+7, r24	; 0x07
     cb0:	08 c0       	rjmp	.+16     	; 0xcc2 <nwkRoutePrepareTx+0x38>
     cb2:	ef 01       	movw	r28, r30
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
     cb4:	63 85       	ldd	r22, Z+11	; 0x0b
     cb6:	63 fb       	bst	r22, 3
     cb8:	66 27       	eor	r22, r22
     cba:	60 f9       	bld	r22, 0
     cbc:	41 df       	rcall	.-382    	; 0xb40 <NWK_RouteNextHop>
     cbe:	98 87       	std	Y+8, r25	; 0x08
     cc0:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	08 95       	ret

00000cc8 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
     cc8:	af 92       	push	r10
     cca:	bf 92       	push	r11
     ccc:	cf 92       	push	r12
     cce:	df 92       	push	r13
     cd0:	ef 92       	push	r14
     cd2:	ff 92       	push	r15
     cd4:	1f 93       	push	r17
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
     cdc:	1b 85       	ldd	r17, Y+11	; 0x0b
     cde:	13 fb       	bst	r17, 3
     ce0:	11 27       	eor	r17, r17
     ce2:	10 f9       	bld	r17, 0
     ce4:	cf 84       	ldd	r12, Y+15	; 0x0f
     ce6:	d8 88       	ldd	r13, Y+16	; 0x10
     ce8:	61 2f       	mov	r22, r17
     cea:	c6 01       	movw	r24, r12
     cec:	29 df       	rcall	.-430    	; 0xb40 <NWK_RouteNextHop>
     cee:	01 96       	adiw	r24, 0x01	; 1
     cf0:	59 f0       	breq	.+22     	; 0xd08 <nwkRouteFrame+0x40>
  {
    frame->tx.confirm = NULL;
     cf2:	fe 01       	movw	r30, r28
     cf4:	e9 57       	subi	r30, 0x79	; 121
     cf6:	ff 4f       	sbci	r31, 0xFF	; 255
     cf8:	11 82       	std	Z+1, r1	; 0x01
     cfa:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
     cfc:	31 97       	sbiw	r30, 0x01	; 1
     cfe:	82 e0       	ldi	r24, 0x02	; 2
     d00:	80 83       	st	Z, r24
    nwkTxFrame(frame);
     d02:	ce 01       	movw	r24, r28
     d04:	6e d3       	rcall	.+1756   	; 0x13e2 <nwkTxFrame>
     d06:	22 c0       	rjmp	.+68     	; 0xd4c <nwkRouteFrame+0x84>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
     d08:	ad 84       	ldd	r10, Y+13	; 0x0d
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst, uint8_t multicast)
{
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
     d0a:	be 84       	ldd	r11, Y+14	; 0x0e
     d0c:	1f de       	rcall	.-962    	; 0x94c <nwkFrameAlloc>
     d0e:	7c 01       	movw	r14, r24
     d10:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(frame);
     d12:	d1 f0       	breq	.+52     	; 0xd48 <nwkRouteFrame+0x80>
     d14:	83 de       	rcall	.-762    	; 0xa1c <nwkFrameCommandInit>

  frame->size += sizeof(NwkCommandRouteError_t);
     d16:	f7 01       	movw	r30, r14
     d18:	81 81       	ldd	r24, Z+1	; 0x01
     d1a:	8a 5f       	subi	r24, 0xFA	; 250
     d1c:	81 83       	std	Z+1, r24	; 0x01
  frame->tx.confirm = NULL;
     d1e:	e9 57       	subi	r30, 0x79	; 121
     d20:	ff 4f       	sbci	r31, 0xFF	; 255
     d22:	11 82       	std	Z+1, r1	; 0x01
     d24:	10 82       	st	Z, r1

  frame->header.nwkDstAddr = src;
     d26:	f7 01       	movw	r30, r14
     d28:	b0 8a       	std	Z+16, r11	; 0x10
     d2a:	a7 86       	std	Z+15, r10	; 0x0f

  command = (NwkCommandRouteError_t *)frame->payload;
     d2c:	ef 57       	subi	r30, 0x7F	; 127
     d2e:	ff 4f       	sbci	r31, 0xFF	; 255
     d30:	01 90       	ld	r0, Z+
     d32:	f0 81       	ld	r31, Z
     d34:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ROUTE_ERROR;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	80 83       	st	Z, r24
  command->srcAddr = src;
     d3a:	b2 82       	std	Z+2, r11	; 0x02
     d3c:	a1 82       	std	Z+1, r10	; 0x01
  command->dstAddr = dst;
     d3e:	d4 82       	std	Z+4, r13	; 0x04
  command->multicast = multicast;

  nwkTxFrame(frame);
     d40:	c3 82       	std	Z+3, r12	; 0x03
     d42:	15 83       	std	Z+5, r17	; 0x05
     d44:	c7 01       	movw	r24, r14
    nwkTxFrame(frame);
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    nwkFrameFree(frame);
     d46:	4d d3       	rcall	.+1690   	; 0x13e2 <nwkTxFrame>
     d48:	ce 01       	movw	r24, r28
     d4a:	39 de       	rcall	.-910    	; 0x9be <nwkFrameFree>
  }
}
     d4c:	df 91       	pop	r29
     d4e:	cf 91       	pop	r28
     d50:	1f 91       	pop	r17
     d52:	ff 90       	pop	r15
     d54:	ef 90       	pop	r14
     d56:	df 90       	pop	r13
     d58:	cf 90       	pop	r12
     d5a:	bf 90       	pop	r11
     d5c:	af 90       	pop	r10
     d5e:	08 95       	ret

00000d60 <nwkRouteErrorReceived>:
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
     d60:	fc 01       	movw	r30, r24
     d62:	21 85       	ldd	r18, Z+9	; 0x09
     d64:	26 30       	cpi	r18, 0x06	; 6
     d66:	49 f4       	brne	.+18     	; 0xd7a <nwkRouteErrorReceived+0x1a>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
     d68:	07 80       	ldd	r0, Z+7	; 0x07
     d6a:	f0 85       	ldd	r31, Z+8	; 0x08
     d6c:	e0 2d       	mov	r30, r0

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
     d6e:	65 81       	ldd	r22, Z+5	; 0x05
     d70:	83 81       	ldd	r24, Z+3	; 0x03
     d72:	94 81       	ldd	r25, Z+4	; 0x04
     d74:	ef de       	rcall	.-546    	; 0xb54 <nwkRouteRemove>

  return true;
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
     d7a:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
     d7c:	08 95       	ret

00000d7e <nwkRxServiceDataInd>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
     d7e:	dc 01       	movw	r26, r24
     d80:	19 96       	adiw	r26, 0x09	; 9
     d82:	2c 91       	ld	r18, X
     d84:	19 97       	sbiw	r26, 0x09	; 9
     d86:	22 23       	and	r18, r18
     d88:	71 f0       	breq	.+28     	; 0xda6 <nwkRxServiceDataInd+0x28>
     d8a:	17 96       	adiw	r26, 0x07	; 7
     d8c:	ed 91       	ld	r30, X+
     d8e:	fc 91       	ld	r31, X
     d90:	18 97       	sbiw	r26, 0x08	; 8
     d92:	20 81       	ld	r18, Z
     d94:	22 23       	and	r18, r18
     d96:	19 f0       	breq	.+6      	; 0xd9e <nwkRxServiceDataInd+0x20>
     d98:	21 30       	cpi	r18, 0x01	; 1
     d9a:	19 f0       	breq	.+6      	; 0xda2 <nwkRxServiceDataInd+0x24>
     d9c:	06 c0       	rjmp	.+12     	; 0xdaa <nwkRxServiceDataInd+0x2c>
     d9e:	b2 c3       	rjmp	.+1892   	; 0x1504 <nwkTxAckReceived>
     da0:	08 95       	ret
     da2:	de cf       	rjmp	.-68     	; 0xd60 <nwkRouteErrorReceived>
     da4:	08 95       	ret
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	08 95       	ret
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	08 95       	ret

00000dae <nwkRxDuplicateRejectionTimerHandler>:
     dae:	bc 01       	movw	r22, r24
     db0:	e9 ed       	ldi	r30, 0xD9	; 217
     db2:	fe e1       	ldi	r31, 0x1E	; 30
     db4:	2b e0       	ldi	r18, 0x0B	; 11
     db6:	3f e1       	ldi	r19, 0x1F	; 31
     db8:	40 e0       	ldi	r20, 0x00	; 0
     dba:	51 e0       	ldi	r21, 0x01	; 1
     dbc:	90 81       	ld	r25, Z
     dbe:	99 23       	and	r25, r25
     dc0:	19 f0       	breq	.+6      	; 0xdc8 <nwkRxDuplicateRejectionTimerHandler+0x1a>
     dc2:	91 50       	subi	r25, 0x01	; 1
     dc4:	90 83       	st	Z, r25
     dc6:	45 2f       	mov	r20, r21
     dc8:	35 96       	adiw	r30, 0x05	; 5
     dca:	e2 17       	cp	r30, r18
     dcc:	f3 07       	cpc	r31, r19
     dce:	b1 f7       	brne	.-20     	; 0xdbc <nwkRxDuplicateRejectionTimerHandler+0xe>
     dd0:	44 23       	and	r20, r20
     dd2:	11 f0       	breq	.+4      	; 0xdd8 <nwkRxDuplicateRejectionTimerHandler+0x2a>
     dd4:	cb 01       	movw	r24, r22
     dd6:	30 c6       	rjmp	.+3168   	; 0x1a38 <SYS_TimerStart>
     dd8:	08 95       	ret

00000dda <nwkRxInit>:
     dda:	e9 ed       	ldi	r30, 0xD9	; 217
     ddc:	fe e1       	ldi	r31, 0x1E	; 30
     dde:	8b e0       	ldi	r24, 0x0B	; 11
     de0:	9f e1       	ldi	r25, 0x1F	; 31
     de2:	10 82       	st	Z, r1
     de4:	35 96       	adiw	r30, 0x05	; 5
     de6:	e8 17       	cp	r30, r24
     de8:	f9 07       	cpc	r31, r25
     dea:	d9 f7       	brne	.-10     	; 0xde2 <nwkRxInit+0x8>
     dec:	e7 ec       	ldi	r30, 0xC7	; 199
     dee:	fe e1       	ldi	r31, 0x1E	; 30
     df0:	84 e6       	ldi	r24, 0x64	; 100
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	a0 e0       	ldi	r26, 0x00	; 0
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	86 83       	std	Z+6, r24	; 0x06
     dfa:	97 83       	std	Z+7, r25	; 0x07
     dfc:	a0 87       	std	Z+8, r26	; 0x08
     dfe:	b1 87       	std	Z+9, r27	; 0x09
     e00:	12 86       	std	Z+10, r1	; 0x0a
     e02:	87 ed       	ldi	r24, 0xD7	; 215
     e04:	96 e0       	ldi	r25, 0x06	; 6
     e06:	94 87       	std	Z+12, r25	; 0x0c
     e08:	83 87       	std	Z+11, r24	; 0x0b
     e0a:	6f eb       	ldi	r22, 0xBF	; 191
     e0c:	76 e0       	ldi	r23, 0x06	; 6
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	96 cc       	rjmp	.-1748   	; 0x73e <NWK_OpenEndpoint>
     e12:	08 95       	ret

00000e14 <PHY_DataInd>:
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	dc 01       	movw	r26, r24
     e1a:	ed 91       	ld	r30, X+
     e1c:	fc 91       	ld	r31, X
     e1e:	11 97       	sbiw	r26, 0x01	; 1
     e20:	21 81       	ldd	r18, Z+1	; 0x01
     e22:	28 38       	cpi	r18, 0x88	; 136
     e24:	f1 f4       	brne	.+60     	; 0xe62 <PHY_DataInd+0x4e>
     e26:	20 81       	ld	r18, Z
     e28:	2f 7d       	andi	r18, 0xDF	; 223
     e2a:	21 34       	cpi	r18, 0x41	; 65
     e2c:	d1 f4       	brne	.+52     	; 0xe62 <PHY_DataInd+0x4e>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2c 91       	ld	r18, X
     e32:	20 31       	cpi	r18, 0x10	; 16
     e34:	b0 f0       	brcs	.+44     	; 0xe62 <PHY_DataInd+0x4e>
     e36:	ec 01       	movw	r28, r24
     e38:	89 dd       	rcall	.-1262   	; 0x94c <nwkFrameAlloc>
     e3a:	00 97       	sbiw	r24, 0x00	; 0
     e3c:	91 f0       	breq	.+36     	; 0xe62 <PHY_DataInd+0x4e>
     e3e:	20 e2       	ldi	r18, 0x20	; 32
     e40:	fc 01       	movw	r30, r24
     e42:	20 83       	st	Z, r18
     e44:	2a 81       	ldd	r18, Y+2	; 0x02
     e46:	21 83       	std	Z+1, r18	; 0x01
     e48:	2b 81       	ldd	r18, Y+3	; 0x03
     e4a:	ed 57       	subi	r30, 0x7D	; 125
     e4c:	ff 4f       	sbci	r31, 0xFF	; 255
     e4e:	20 83       	st	Z, r18
     e50:	2c 81       	ldd	r18, Y+4	; 0x04
     e52:	31 96       	adiw	r30, 0x01	; 1
     e54:	20 83       	st	Z, r18
     e56:	4a 81       	ldd	r20, Y+2	; 0x02
     e58:	50 e0       	ldi	r21, 0x00	; 0
     e5a:	68 81       	ld	r22, Y
     e5c:	79 81       	ldd	r23, Y+1	; 0x01
     e5e:	02 96       	adiw	r24, 0x02	; 2
     e60:	d8 d6       	rcall	.+3504   	; 0x1c12 <memcpy>
     e62:	df 91       	pop	r29
     e64:	cf 91       	pop	r28
     e66:	08 95       	ret

00000e68 <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
     e68:	2f 92       	push	r2
     e6a:	3f 92       	push	r3
     e6c:	4f 92       	push	r4
     e6e:	5f 92       	push	r5
     e70:	6f 92       	push	r6
     e72:	7f 92       	push	r7
     e74:	8f 92       	push	r8
     e76:	9f 92       	push	r9
     e78:	af 92       	push	r10
     e7a:	bf 92       	push	r11
     e7c:	cf 92       	push	r12
     e7e:	df 92       	push	r13
     e80:	ef 92       	push	r14
     e82:	ff 92       	push	r15
     e84:	0f 93       	push	r16
     e86:	1f 93       	push	r17
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	2c 97       	sbiw	r28, 0x0c	; 12
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	f8 94       	cli
     e96:	de bf       	out	0x3e, r29	; 62
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
     e9c:	00 e0       	ldi	r16, 0x00	; 0
     e9e:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
     ea0:	0f 2e       	mov	r0, r31
     ea2:	f4 e2       	ldi	r31, 0x24	; 36
     ea4:	bf 2e       	mov	r11, r31
     ea6:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
     ea8:	0f 2e       	mov	r0, r31
     eaa:	fa ea       	ldi	r31, 0xAA	; 170
     eac:	ef 2e       	mov	r14, r31
     eae:	ff e1       	ldi	r31, 0x1F	; 31
     eb0:	ff 2e       	mov	r15, r31
     eb2:	f0 2d       	mov	r31, r0
    ack = false;

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
      nwkIb.addr == frame->header.nwkDstAddr &&
      0 == frame->header.nwkFcf.multicast)
    ack = true;
     eb4:	55 24       	eor	r5, r5
     eb6:	53 94       	inc	r5
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
     eb8:	68 94       	set
     eba:	aa 24       	eor	r10, r10
     ebc:	a4 f8       	bld	r10, 4
  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
     ebe:	68 94       	set
     ec0:	77 24       	eor	r7, r7
     ec2:	73 f8       	bld	r7, 3

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
     ec4:	68 94       	set
     ec6:	66 24       	eor	r6, r6
     ec8:	62 f8       	bld	r6, 2
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
     eca:	31 2c       	mov	r3, r1
     ecc:	21 2c       	mov	r2, r1
    return true;

  freeEntry->src = header->nwkSrcAddr;
  freeEntry->seq = header->nwkSeq;
  freeEntry->mask = 1;
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
     ece:	0f 2e       	mov	r0, r31
     ed0:	ff e1       	ldi	r31, 0x1F	; 31
     ed2:	4f 2e       	mov	r4, r31
     ed4:	f0 2d       	mov	r31, r0
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
     ed6:	cc 24       	eor	r12, r12
     ed8:	c3 94       	inc	r12
     eda:	d1 2c       	mov	r13, r1
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
     edc:	da c1       	rjmp	.+948    	; 0x1292 <nwkRxTaskHandler+0x42a>
  {
    switch (frame->state)
     ede:	d8 01       	movw	r26, r16
     ee0:	8c 91       	ld	r24, X
     ee2:	82 32       	cpi	r24, 0x22	; 34
     ee4:	09 f4       	brne	.+2      	; 0xee8 <nwkRxTaskHandler+0x80>
     ee6:	05 c1       	rjmp	.+522    	; 0x10f2 <nwkRxTaskHandler+0x28a>
     ee8:	18 f4       	brcc	.+6      	; 0xef0 <nwkRxTaskHandler+0x88>
     eea:	80 32       	cpi	r24, 0x20	; 32
     eec:	41 f0       	breq	.+16     	; 0xefe <nwkRxTaskHandler+0x96>
     eee:	d1 c1       	rjmp	.+930    	; 0x1292 <nwkRxTaskHandler+0x42a>
     ef0:	83 32       	cpi	r24, 0x23	; 35
     ef2:	09 f4       	brne	.+2      	; 0xef6 <nwkRxTaskHandler+0x8e>
     ef4:	c9 c1       	rjmp	.+914    	; 0x1288 <nwkRxTaskHandler+0x420>
     ef6:	84 32       	cpi	r24, 0x24	; 36
     ef8:	09 f4       	brne	.+2      	; 0xefc <nwkRxTaskHandler+0x94>
     efa:	c9 c1       	rjmp	.+914    	; 0x128e <nwkRxTaskHandler+0x426>
     efc:	ca c1       	rjmp	.+916    	; 0x1292 <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
     efe:	f8 01       	movw	r30, r16
     f00:	b0 82       	st	Z, r11

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
     f02:	83 85       	ldd	r24, Z+11	; 0x0b

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
     f04:	98 2f       	mov	r25, r24
     f06:	9a 70       	andi	r25, 0x0A	; 10
     f08:	09 f0       	breq	.+2      	; 0xf0c <nwkRxTaskHandler+0xa4>
     f0a:	c3 c1       	rjmp	.+902    	; 0x1292 <nwkRxTaskHandler+0x42a>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     f0c:	25 81       	ldd	r18, Z+5	; 0x05
     f0e:	36 81       	ldd	r19, Z+6	; 0x06
     f10:	2f 3f       	cpi	r18, 0xFF	; 255
     f12:	3f 4f       	sbci	r19, 0xFF	; 255
     f14:	91 f4       	brne	.+36     	; 0xf3a <nwkRxTaskHandler+0xd2>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
     f16:	d8 01       	movw	r26, r16
     f18:	1f 96       	adiw	r26, 0x0f	; 15
     f1a:	8d 91       	ld	r24, X+
     f1c:	9c 91       	ld	r25, X
     f1e:	50 97       	sbiw	r26, 0x10	; 16
     f20:	f7 01       	movw	r30, r14
     f22:	20 81       	ld	r18, Z
     f24:	31 81       	ldd	r19, Z+1	; 0x01
     f26:	28 17       	cp	r18, r24
     f28:	39 07       	cpc	r19, r25
     f2a:	19 f0       	breq	.+6      	; 0xf32 <nwkRxTaskHandler+0xca>
     f2c:	01 96       	adiw	r24, 0x01	; 1
     f2e:	09 f0       	breq	.+2      	; 0xf32 <nwkRxTaskHandler+0xca>
     f30:	b0 c1       	rjmp	.+864    	; 0x1292 <nwkRxTaskHandler+0x42a>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
     f32:	e2 e2       	ldi	r30, 0x22	; 34
     f34:	d8 01       	movw	r26, r16
     f36:	ec 93       	st	X, r30
     f38:	ac c1       	rjmp	.+856    	; 0x1292 <nwkRxTaskHandler+0x42a>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
     f3a:	d8 01       	movw	r26, r16
     f3c:	1f 96       	adiw	r26, 0x0f	; 15
     f3e:	2d 91       	ld	r18, X+
     f40:	3c 91       	ld	r19, X
     f42:	50 97       	sbiw	r26, 0x10	; 16
     f44:	2f 3f       	cpi	r18, 0xFF	; 255
     f46:	3f 4f       	sbci	r19, 0xFF	; 255
     f48:	11 f4       	brne	.+4      	; 0xf4e <nwkRxTaskHandler+0xe6>
     f4a:	80 fd       	sbrc	r24, 0
     f4c:	a2 c1       	rjmp	.+836    	; 0x1292 <nwkRxTaskHandler+0x42a>
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
     f4e:	f7 01       	movw	r30, r14
     f50:	20 81       	ld	r18, Z
     f52:	31 81       	ldd	r19, Z+1	; 0x01
     f54:	d8 01       	movw	r26, r16
     f56:	1d 96       	adiw	r26, 0x0d	; 13
     f58:	8d 91       	ld	r24, X+
     f5a:	9c 91       	ld	r25, X
     f5c:	1e 97       	sbiw	r26, 0x0e	; 14
     f5e:	28 17       	cp	r18, r24
     f60:	39 07       	cpc	r19, r25
     f62:	09 f4       	brne	.+2      	; 0xf66 <nwkRxTaskHandler+0xfe>
     f64:	96 c1       	rjmp	.+812    	; 0x1292 <nwkRxTaskHandler+0x42a>
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
     f66:	c8 01       	movw	r24, r16
     f68:	fa dd       	rcall	.-1036   	; 0xb5e <nwkRouteFrameReceived>
     f6a:	e5 ed       	ldi	r30, 0xD5	; 213
     f6c:	fe e1       	ldi	r31, 0x1E	; 30
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	90 e0       	ldi	r25, 0x00	; 0
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
     f72:	83 2c       	mov	r8, r3
     f74:	92 2c       	mov	r9, r2

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
     f76:	9c 01       	movw	r18, r24

    if (entry->ttl && header->nwkSrcAddr == entry->src)
     f78:	44 81       	ldd	r20, Z+4	; 0x04
     f7a:	44 23       	and	r20, r20
     f7c:	09 f4       	brne	.+2      	; 0xf80 <nwkRxTaskHandler+0x118>
     f7e:	74 c0       	rjmp	.+232    	; 0x1068 <nwkRxTaskHandler+0x200>
     f80:	d8 01       	movw	r26, r16
     f82:	1d 96       	adiw	r26, 0x0d	; 13
     f84:	6d 91       	ld	r22, X+
     f86:	7c 91       	ld	r23, X
     f88:	1e 97       	sbiw	r26, 0x0e	; 14
     f8a:	40 81       	ld	r20, Z
     f8c:	51 81       	ldd	r21, Z+1	; 0x01
     f8e:	64 17       	cp	r22, r20
     f90:	75 07       	cpc	r23, r21
     f92:	09 f0       	breq	.+2      	; 0xf96 <nwkRxTaskHandler+0x12e>
     f94:	6a c0       	rjmp	.+212    	; 0x106a <nwkRxTaskHandler+0x202>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
     f96:	1c 96       	adiw	r26, 0x0c	; 12
     f98:	8c 91       	ld	r24, X
     f9a:	1c 97       	sbiw	r26, 0x0c	; 12
     f9c:	f9 01       	movw	r30, r18
     f9e:	ee 0f       	add	r30, r30
     fa0:	ff 1f       	adc	r31, r31
     fa2:	ee 0f       	add	r30, r30
     fa4:	ff 1f       	adc	r31, r31
     fa6:	e2 0f       	add	r30, r18
     fa8:	f3 1f       	adc	r31, r19
     faa:	eb 52       	subi	r30, 0x2B	; 43
     fac:	f1 4e       	sbci	r31, 0xE1	; 225
     fae:	92 81       	ldd	r25, Z+2	; 0x02
     fb0:	98 1b       	sub	r25, r24

      if (diff < 8)
     fb2:	98 30       	cpi	r25, 0x08	; 8
     fb4:	08 f0       	brcs	.+2      	; 0xfb8 <nwkRxTaskHandler+0x150>
     fb6:	3e c0       	rjmp	.+124    	; 0x1034 <nwkRxTaskHandler+0x1cc>
      {
        if (entry->mask & (1 << diff))
     fb8:	f9 01       	movw	r30, r18
     fba:	ee 0f       	add	r30, r30
     fbc:	ff 1f       	adc	r31, r31
     fbe:	ee 0f       	add	r30, r30
     fc0:	ff 1f       	adc	r31, r31
     fc2:	e2 0f       	add	r30, r18
     fc4:	f3 1f       	adc	r31, r19
     fc6:	eb 52       	subi	r30, 0x2B	; 43
     fc8:	f1 4e       	sbci	r31, 0xE1	; 225
     fca:	83 81       	ldd	r24, Z+3	; 0x03
     fcc:	48 2f       	mov	r20, r24
     fce:	50 e0       	ldi	r21, 0x00	; 0
     fd0:	09 2e       	mov	r0, r25
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <nwkRxTaskHandler+0x170>
     fd4:	55 95       	asr	r21
     fd6:	47 95       	ror	r20
     fd8:	0a 94       	dec	r0
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <nwkRxTaskHandler+0x16c>
     fdc:	40 ff       	sbrs	r20, 0
     fde:	17 c0       	rjmp	.+46     	; 0x100e <nwkRxTaskHandler+0x1a6>
        {
        #ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
     fe0:	f7 01       	movw	r30, r14
     fe2:	20 81       	ld	r18, Z
     fe4:	31 81       	ldd	r19, Z+1	; 0x01
     fe6:	17 96       	adiw	r26, 0x07	; 7
     fe8:	8d 91       	ld	r24, X+
     fea:	9c 91       	ld	r25, X
     fec:	18 97       	sbiw	r26, 0x08	; 8
     fee:	28 17       	cp	r18, r24
     ff0:	39 07       	cpc	r19, r25
     ff2:	09 f0       	breq	.+2      	; 0xff6 <nwkRxTaskHandler+0x18e>
     ff4:	4e c1       	rjmp	.+668    	; 0x1292 <nwkRxTaskHandler+0x42a>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
     ff6:	1b 96       	adiw	r26, 0x0b	; 11
     ff8:	6c 91       	ld	r22, X
     ffa:	1b 97       	sbiw	r26, 0x0b	; 11
     ffc:	63 fb       	bst	r22, 3
     ffe:	66 27       	eor	r22, r22
    1000:	60 f9       	bld	r22, 0
    1002:	1f 96       	adiw	r26, 0x0f	; 15
    1004:	8d 91       	ld	r24, X+
    1006:	9c 91       	ld	r25, X
    1008:	50 97       	sbiw	r26, 0x10	; 16
    100a:	a4 dd       	rcall	.-1208   	; 0xb54 <nwkRouteRemove>
    100c:	42 c1       	rjmp	.+644    	; 0x1292 <nwkRxTaskHandler+0x42a>
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
    100e:	f9 01       	movw	r30, r18
    1010:	ee 0f       	add	r30, r30
    1012:	ff 1f       	adc	r31, r31
    1014:	ee 0f       	add	r30, r30
    1016:	ff 1f       	adc	r31, r31
    1018:	2e 0f       	add	r18, r30
    101a:	3f 1f       	adc	r19, r31
    101c:	f9 01       	movw	r30, r18
    101e:	eb 52       	subi	r30, 0x2B	; 43
    1020:	f1 4e       	sbci	r31, 0xE1	; 225
    1022:	96 01       	movw	r18, r12
    1024:	02 c0       	rjmp	.+4      	; 0x102a <nwkRxTaskHandler+0x1c2>
    1026:	22 0f       	add	r18, r18
    1028:	33 1f       	adc	r19, r19
    102a:	9a 95       	dec	r25
    102c:	e2 f7       	brpl	.-8      	; 0x1026 <nwkRxTaskHandler+0x1be>
    102e:	82 2b       	or	r24, r18
    1030:	83 83       	std	Z+3, r24	; 0x03
    1032:	36 c1       	rjmp	.+620    	; 0x12a0 <nwkRxTaskHandler+0x438>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
    1034:	f9 01       	movw	r30, r18
    1036:	ee 0f       	add	r30, r30
    1038:	ff 1f       	adc	r31, r31
    103a:	ee 0f       	add	r30, r30
    103c:	ff 1f       	adc	r31, r31
    103e:	2e 0f       	add	r18, r30
    1040:	3f 1f       	adc	r19, r31
    1042:	f9 01       	movw	r30, r18
    1044:	eb 52       	subi	r30, 0x2B	; 43
    1046:	f1 4e       	sbci	r31, 0xE1	; 225
    1048:	82 83       	std	Z+2, r24	; 0x02
        entry->mask = (entry->mask << shift) | 1;
    104a:	83 81       	ldd	r24, Z+3	; 0x03
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	91 95       	neg	r25
    1052:	a9 01       	movw	r20, r18
    1054:	02 c0       	rjmp	.+4      	; 0x105a <nwkRxTaskHandler+0x1f2>
    1056:	44 0f       	add	r20, r20
    1058:	55 1f       	adc	r21, r21
    105a:	9a 95       	dec	r25
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <nwkRxTaskHandler+0x1ee>
    105e:	ca 01       	movw	r24, r20
    1060:	81 60       	ori	r24, 0x01	; 1
    1062:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
    1064:	44 82       	std	Z+4, r4	; 0x04
    1066:	1c c1       	rjmp	.+568    	; 0x12a0 <nwkRxTaskHandler+0x438>
        return false;
      }
    }

    if (0 == entry->ttl)
      freeEntry = entry;
    1068:	4f 01       	movw	r8, r30
    106a:	01 96       	adiw	r24, 0x01	; 1
    106c:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    106e:	8a 30       	cpi	r24, 0x0A	; 10
    1070:	91 05       	cpc	r25, r1
    1072:	09 f0       	breq	.+2      	; 0x1076 <nwkRxTaskHandler+0x20e>
    1074:	80 cf       	rjmp	.-256    	; 0xf76 <nwkRxTaskHandler+0x10e>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
    1076:	81 14       	cp	r8, r1
    1078:	91 04       	cpc	r9, r1
    107a:	09 f4       	brne	.+2      	; 0x107e <nwkRxTaskHandler+0x216>
    107c:	0a c1       	rjmp	.+532    	; 0x1292 <nwkRxTaskHandler+0x42a>
    return true;

  freeEntry->src = header->nwkSrcAddr;
    107e:	d8 01       	movw	r26, r16
    1080:	1d 96       	adiw	r26, 0x0d	; 13
    1082:	8d 91       	ld	r24, X+
    1084:	9c 91       	ld	r25, X
    1086:	1e 97       	sbiw	r26, 0x0e	; 14
    1088:	f4 01       	movw	r30, r8
    108a:	91 83       	std	Z+1, r25	; 0x01
    108c:	80 83       	st	Z, r24
  freeEntry->seq = header->nwkSeq;
    108e:	1c 96       	adiw	r26, 0x0c	; 12
    1090:	8c 91       	ld	r24, X
    1092:	82 83       	std	Z+2, r24	; 0x02
  freeEntry->mask = 1;
    1094:	53 82       	std	Z+3, r5	; 0x03
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    1096:	44 82       	std	Z+4, r4	; 0x04

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    1098:	87 ec       	ldi	r24, 0xC7	; 199
    109a:	9e e1       	ldi	r25, 0x1E	; 30
    109c:	cd d4       	rcall	.+2458   	; 0x1a38 <SYS_TimerStart>
    109e:	00 c1       	rjmp	.+512    	; 0x12a0 <nwkRxTaskHandler+0x438>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    10a0:	d7 01       	movw	r26, r14
    10a2:	2d 91       	ld	r18, X+
    10a4:	3c 91       	ld	r19, X
    10a6:	f8 01       	movw	r30, r16
    10a8:	87 85       	ldd	r24, Z+15	; 0x0f
    10aa:	90 89       	ldd	r25, Z+16	; 0x10
    10ac:	28 17       	cp	r18, r24
    10ae:	39 07       	cpc	r19, r25
    10b0:	81 f0       	breq	.+32     	; 0x10d2 <nwkRxTaskHandler+0x26a>
    10b2:	43 85       	ldd	r20, Z+11	; 0x0b
    10b4:	42 fd       	sbrc	r20, 2
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
    10b6:	0b c0       	rjmp	.+22     	; 0x10ce <nwkRxTaskHandler+0x266>
    10b8:	c8 01       	movw	r24, r16
    10ba:	e1 d1       	rcall	.+962    	; 0x147e <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    10bc:	d7 01       	movw	r26, r14
    10be:	2d 91       	ld	r18, X+
    10c0:	3c 91       	ld	r19, X
    10c2:	f8 01       	movw	r30, r16
    10c4:	87 85       	ldd	r24, Z+15	; 0x0f
    10c6:	90 89       	ldd	r25, Z+16	; 0x10
    10c8:	28 17       	cp	r18, r24
    10ca:	39 07       	cpc	r19, r25
    10cc:	11 f0       	breq	.+4      	; 0x10d2 <nwkRxTaskHandler+0x26a>
    10ce:	01 96       	adiw	r24, 0x01	; 1
    10d0:	21 f4       	brne	.+8      	; 0x10da <nwkRxTaskHandler+0x272>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    10d2:	e2 e2       	ldi	r30, 0x22	; 34
    10d4:	d8 01       	movw	r26, r16
    10d6:	ec 93       	st	X, r30
    10d8:	dc c0       	rjmp	.+440    	; 0x1292 <nwkRxTaskHandler+0x42a>
    }

  #ifdef NWK_ENABLE_ROUTING
    else if (nwkIb.addr == header->macDstAddr)
    10da:	d8 01       	movw	r26, r16
    10dc:	17 96       	adiw	r26, 0x07	; 7
    10de:	8d 91       	ld	r24, X+
    10e0:	9c 91       	ld	r25, X
    10e2:	18 97       	sbiw	r26, 0x08	; 8
    10e4:	82 17       	cp	r24, r18
    10e6:	93 07       	cpc	r25, r19
    10e8:	09 f0       	breq	.+2      	; 0x10ec <nwkRxTaskHandler+0x284>
    10ea:	d3 c0       	rjmp	.+422    	; 0x1292 <nwkRxTaskHandler+0x42a>
    {
      frame->state = NWK_RX_STATE_ROUTE;
    10ec:	e3 e2       	ldi	r30, 0x23	; 35
    10ee:	ec 93       	st	X, r30
    10f0:	d0 c0       	rjmp	.+416    	; 0x1292 <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
    10f2:	10 92 d4 1e 	sts	0x1ED4, r1	; 0x801ed4 <nwkRxAckControl>
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    10f6:	d8 01       	movw	r26, r16
    10f8:	51 96       	adiw	r26, 0x11	; 17
    10fa:	8c 91       	ld	r24, X
    10fc:	51 97       	sbiw	r26, 0x11	; 17
    10fe:	82 95       	swap	r24
    1100:	8f 70       	andi	r24, 0x0F	; 15
    1102:	e8 2f       	mov	r30, r24
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	ee 0f       	add	r30, r30
    1108:	ff 1f       	adc	r31, r31
    110a:	e0 55       	subi	r30, 0x50	; 80
    110c:	f0 4e       	sbci	r31, 0xE0	; 224
    110e:	01 90       	ld	r0, Z+
    1110:	f0 81       	ld	r31, Z
    1112:	e0 2d       	mov	r30, r0
    1114:	30 97       	sbiw	r30, 0x00	; 0
    1116:	09 f4       	brne	.+2      	; 0x111a <nwkRxTaskHandler+0x2b2>
    1118:	60 c0       	rjmp	.+192    	; 0x11da <nwkRxTaskHandler+0x372>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
    111a:	1d 96       	adiw	r26, 0x0d	; 13
    111c:	2d 91       	ld	r18, X+
    111e:	3c 91       	ld	r19, X
    1120:	1e 97       	sbiw	r26, 0x0e	; 14
    1122:	3a 83       	std	Y+2, r19	; 0x02
    1124:	29 83       	std	Y+1, r18	; 0x01
  ind.dstAddr = header->nwkDstAddr;
    1126:	1f 96       	adiw	r26, 0x0f	; 15
    1128:	4d 91       	ld	r20, X+
    112a:	5c 91       	ld	r21, X
    112c:	50 97       	sbiw	r26, 0x10	; 16
    112e:	5c 83       	std	Y+4, r21	; 0x04
    1130:	4b 83       	std	Y+3, r20	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
    1132:	51 96       	adiw	r26, 0x11	; 17
    1134:	9c 91       	ld	r25, X
    1136:	51 97       	sbiw	r26, 0x11	; 17
    1138:	9f 70       	andi	r25, 0x0F	; 15
    113a:	9d 83       	std	Y+5, r25	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
    113c:	8e 83       	std	Y+6, r24	; 0x06
  ind.data = frame->payload;
    113e:	af 57       	subi	r26, 0x7F	; 127
    1140:	bf 4f       	sbci	r27, 0xFF	; 255
    1142:	8d 91       	ld	r24, X+
    1144:	9c 91       	ld	r25, X
    1146:	99 87       	std	Y+9, r25	; 0x09
    1148:	88 87       	std	Y+8, r24	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
    114a:	b8 01       	movw	r22, r16
    114c:	6e 5f       	subi	r22, 0xFE	; 254
    114e:	7f 4f       	sbci	r23, 0xFF	; 255
  ind.size = nwkFramePayloadSize(frame);
    1150:	86 1b       	sub	r24, r22
    1152:	97 0b       	sbc	r25, r23
    1154:	d8 01       	movw	r26, r16
    1156:	11 96       	adiw	r26, 0x01	; 1
    1158:	9c 91       	ld	r25, X
    115a:	11 97       	sbiw	r26, 0x01	; 1
    115c:	98 1b       	sub	r25, r24
    115e:	9a 87       	std	Y+10, r25	; 0x0a
  ind.lqi = frame->rx.lqi;
    1160:	ad 57       	subi	r26, 0x7D	; 125
    1162:	bf 4f       	sbci	r27, 0xFF	; 255
    1164:	8c 91       	ld	r24, X
    1166:	8b 87       	std	Y+11, r24	; 0x0b
  ind.rssi = frame->rx.rssi;
    1168:	11 96       	adiw	r26, 0x01	; 1
    116a:	8c 91       	ld	r24, X
    116c:	8c 87       	std	Y+12, r24	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    116e:	d8 01       	movw	r26, r16
    1170:	1b 96       	adiw	r26, 0x0b	; 11
    1172:	9c 91       	ld	r25, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    1174:	69 2f       	mov	r22, r25
    1176:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    1178:	92 fd       	sbrc	r25, 2
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <nwkRxTaskHandler+0x318>
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	01 c0       	rjmp	.+2      	; 0x1182 <nwkRxTaskHandler+0x31a>
    1180:	80 e2       	ldi	r24, 0x20	; 32
    1182:	86 2b       	or	r24, r22
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    1184:	93 fd       	sbrc	r25, 3
    1186:	02 c0       	rjmp	.+4      	; 0x118c <nwkRxTaskHandler+0x324>
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	01 c0       	rjmp	.+2      	; 0x118e <nwkRxTaskHandler+0x326>
    118c:	90 e4       	ldi	r25, 0x40	; 64
    118e:	89 2b       	or	r24, r25
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    1190:	4f 3f       	cpi	r20, 0xFF	; 255
    1192:	5f 4f       	sbci	r21, 0xFF	; 255
    1194:	11 f0       	breq	.+4      	; 0x119a <nwkRxTaskHandler+0x332>
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	01 c0       	rjmp	.+2      	; 0x119c <nwkRxTaskHandler+0x334>
    119a:	96 2d       	mov	r25, r6
    119c:	89 2b       	or	r24, r25
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    119e:	d8 01       	movw	r26, r16
    11a0:	19 96       	adiw	r26, 0x09	; 9
    11a2:	4d 91       	ld	r20, X+
    11a4:	5c 91       	ld	r21, X
    11a6:	1a 97       	sbiw	r26, 0x0a	; 10
    11a8:	24 17       	cp	r18, r20
    11aa:	35 07       	cpc	r19, r21
    11ac:	11 f0       	breq	.+4      	; 0x11b2 <nwkRxTaskHandler+0x34a>
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	01 c0       	rjmp	.+2      	; 0x11b4 <nwkRxTaskHandler+0x34c>
    11b2:	97 2d       	mov	r25, r7
    11b4:	89 2b       	or	r24, r25
    11b6:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    11b8:	d8 01       	movw	r26, r16
    11ba:	15 96       	adiw	r26, 0x05	; 5
    11bc:	2d 91       	ld	r18, X+
    11be:	3c 91       	ld	r19, X
    11c0:	16 97       	sbiw	r26, 0x06	; 6
    11c2:	2f 3f       	cpi	r18, 0xFF	; 255
    11c4:	3f 4f       	sbci	r19, 0xFF	; 255
    11c6:	11 f0       	breq	.+4      	; 0x11cc <nwkRxTaskHandler+0x364>
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	01 c0       	rjmp	.+2      	; 0x11ce <nwkRxTaskHandler+0x366>
    11cc:	9a 2d       	mov	r25, r10
    11ce:	89 2b       	or	r24, r25
    11d0:	8f 83       	std	Y+7, r24	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    11d2:	ce 01       	movw	r24, r28
    11d4:	01 96       	adiw	r24, 0x01	; 1
    11d6:	19 95       	eicall
    11d8:	01 c0       	rjmp	.+2      	; 0x11dc <nwkRxTaskHandler+0x374>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
    11da:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
    11dc:	f8 01       	movw	r30, r16
    11de:	93 85       	ldd	r25, Z+11	; 0x0b
    11e0:	90 ff       	sbrs	r25, 0
    ack = false;
    11e2:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    11e4:	d8 01       	movw	r26, r16
    11e6:	17 96       	adiw	r26, 0x07	; 7
    11e8:	2d 91       	ld	r18, X+
    11ea:	3c 91       	ld	r19, X
    11ec:	18 97       	sbiw	r26, 0x08	; 8
    11ee:	2f 3f       	cpi	r18, 0xFF	; 255
    11f0:	3f 4f       	sbci	r19, 0xFF	; 255
    11f2:	69 f4       	brne	.+26     	; 0x120e <nwkRxTaskHandler+0x3a6>
    11f4:	f7 01       	movw	r30, r14
    11f6:	40 81       	ld	r20, Z
    11f8:	51 81       	ldd	r21, Z+1	; 0x01
    11fa:	d8 01       	movw	r26, r16
    11fc:	1f 96       	adiw	r26, 0x0f	; 15
    11fe:	2d 91       	ld	r18, X+
    1200:	3c 91       	ld	r19, X
    1202:	50 97       	sbiw	r26, 0x10	; 16
    1204:	42 17       	cp	r20, r18
    1206:	53 07       	cpc	r21, r19
    1208:	11 f4       	brne	.+4      	; 0x120e <nwkRxTaskHandler+0x3a6>
      nwkIb.addr == frame->header.nwkDstAddr &&
    120a:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    120c:	85 2d       	mov	r24, r5

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    120e:	f8 01       	movw	r30, r16
    1210:	25 81       	ldd	r18, Z+5	; 0x05
    1212:	36 81       	ldd	r19, Z+6	; 0x06
    1214:	2f 3f       	cpi	r18, 0xFF	; 255
    1216:	3f 4f       	sbci	r19, 0xFF	; 255
    1218:	a1 f1       	breq	.+104    	; 0x1282 <nwkRxTaskHandler+0x41a>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    121a:	d7 01       	movw	r26, r14
    121c:	2d 91       	ld	r18, X+
    121e:	3c 91       	ld	r19, X
    1220:	2f 3f       	cpi	r18, 0xFF	; 255
    1222:	3f 4f       	sbci	r19, 0xFF	; 255
    ack = false;

  if (ack)
    1224:	71 f1       	breq	.+92     	; 0x1282 <nwkRxTaskHandler+0x41a>
    1226:	88 23       	and	r24, r24
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
    1228:	61 f1       	breq	.+88     	; 0x1282 <nwkRxTaskHandler+0x41a>
    122a:	90 db       	rcall	.-2272   	; 0x94c <nwkFrameAlloc>
    122c:	4c 01       	movw	r8, r24
    122e:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(ack);
    1230:	41 f1       	breq	.+80     	; 0x1282 <nwkRxTaskHandler+0x41a>
    1232:	f4 db       	rcall	.-2072   	; 0xa1c <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
    1234:	f4 01       	movw	r30, r8
    1236:	81 81       	ldd	r24, Z+1	; 0x01
    1238:	8d 5f       	subi	r24, 0xFD	; 253
    123a:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
    123c:	e9 57       	subi	r30, 0x79	; 121
    123e:	ff 4f       	sbci	r31, 0xFF	; 255
    1240:	11 82       	std	Z+1, r1	; 0x01
    1242:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    1244:	d8 01       	movw	r26, r16
    1246:	1b 96       	adiw	r26, 0x0b	; 11
    1248:	8c 91       	ld	r24, X
    124a:	1b 97       	sbiw	r26, 0x0b	; 11
    124c:	86 95       	lsr	r24
    124e:	81 70       	andi	r24, 0x01	; 1
    1250:	f4 01       	movw	r30, r8
    1252:	93 85       	ldd	r25, Z+11	; 0x0b
    1254:	80 fb       	bst	r24, 0
    1256:	91 f9       	bld	r25, 1
    1258:	93 87       	std	Z+11, r25	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    125a:	1d 96       	adiw	r26, 0x0d	; 13
    125c:	8d 91       	ld	r24, X+
    125e:	9c 91       	ld	r25, X
    1260:	1e 97       	sbiw	r26, 0x0e	; 14
    1262:	90 8b       	std	Z+16, r25	; 0x10
    1264:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
    1266:	ef 57       	subi	r30, 0x7F	; 127
    1268:	ff 4f       	sbci	r31, 0xFF	; 255
    126a:	01 90       	ld	r0, Z+
    126c:	f0 81       	ld	r31, Z
    126e:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
    1270:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
    1272:	80 91 d4 1e 	lds	r24, 0x1ED4	; 0x801ed4 <nwkRxAckControl>
  command->seq = frame->header.nwkSeq;
    1276:	82 83       	std	Z+2, r24	; 0x02
    1278:	1c 96       	adiw	r26, 0x0c	; 12
    127a:	8c 91       	ld	r24, X

  nwkTxFrame(ack);
    127c:	81 83       	std	Z+1, r24	; 0x01
    127e:	c4 01       	movw	r24, r8
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    1280:	b0 d0       	rcall	.+352    	; 0x13e2 <nwkTxFrame>
    1282:	d8 01       	movw	r26, r16
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    1284:	bc 92       	st	X, r11
    1286:	05 c0       	rjmp	.+10     	; 0x1292 <nwkRxTaskHandler+0x42a>
    1288:	c8 01       	movw	r24, r16
      } break;
    128a:	1e dd       	rcall	.-1476   	; 0xcc8 <nwkRouteFrame>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <nwkRxTaskHandler+0x42a>
    128e:	c8 01       	movw	r24, r16
    1290:	96 db       	rcall	.-2260   	; 0x9be <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1292:	c8 01       	movw	r24, r16
    1294:	9e db       	rcall	.-2244   	; 0x9d2 <nwkFrameNext>
    1296:	8c 01       	movw	r16, r24
    1298:	89 2b       	or	r24, r25
    129a:	09 f0       	breq	.+2      	; 0x129e <nwkRxTaskHandler+0x436>
    129c:	20 ce       	rjmp	.-960    	; 0xede <nwkRxTaskHandler+0x76>
    129e:	07 c0       	rjmp	.+14     	; 0x12ae <nwkRxTaskHandler+0x446>
    12a0:	f8 01       	movw	r30, r16
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    12a2:	87 81       	ldd	r24, Z+7	; 0x07
    12a4:	90 85       	ldd	r25, Z+8	; 0x08
    12a6:	01 96       	adiw	r24, 0x01	; 1
    12a8:	09 f0       	breq	.+2      	; 0x12ac <nwkRxTaskHandler+0x444>
    12aa:	08 cf       	rjmp	.-496    	; 0x10bc <nwkRxTaskHandler+0x254>
    12ac:	f9 ce       	rjmp	.-526    	; 0x10a0 <nwkRxTaskHandler+0x238>
    12ae:	2c 96       	adiw	r28, 0x0c	; 12
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	f8 94       	cli
    12b4:	de bf       	out	0x3e, r29	; 62
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	cd bf       	out	0x3d, r28	; 61
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	1f 91       	pop	r17
    12c0:	0f 91       	pop	r16
    12c2:	ff 90       	pop	r15
    12c4:	ef 90       	pop	r14
    12c6:	df 90       	pop	r13
    12c8:	cf 90       	pop	r12
    12ca:	bf 90       	pop	r11
    12cc:	af 90       	pop	r10
    12ce:	9f 90       	pop	r9
    12d0:	8f 90       	pop	r8
    12d2:	7f 90       	pop	r7
    12d4:	6f 90       	pop	r6
    12d6:	5f 90       	pop	r5
    12d8:	4f 90       	pop	r4
    12da:	3f 90       	pop	r3
    12dc:	2f 90       	pop	r2
    12de:	08 95       	ret

000012e0 <nwkTxDelayTimerHandler>:
    12e0:	ef 92       	push	r14
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
  frame->tx.status = status;
    12e2:	ff 92       	push	r15
    12e4:	0f 93       	push	r16
    12e6:	1f 93       	push	r17
    12e8:	cf 93       	push	r28
    12ea:	7c 01       	movw	r14, r24
    12ec:	10 e0       	ldi	r17, 0x00	; 0
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	01 e0       	ldi	r16, 0x01	; 1
    12f4:	c3 e1       	ldi	r28, 0x13	; 19
    12f6:	13 c0       	rjmp	.+38     	; 0x131e <nwkTxDelayTimerHandler+0x3e>
    12f8:	fc 01       	movw	r30, r24
    12fa:	20 81       	ld	r18, Z
    12fc:	21 31       	cpi	r18, 0x11	; 17
    12fe:	79 f4       	brne	.+30     	; 0x131e <nwkTxDelayTimerHandler+0x3e>
    1300:	ec 57       	subi	r30, 0x7C	; 124
    1302:	ff 4f       	sbci	r31, 0xFF	; 255
    1304:	20 81       	ld	r18, Z
    1306:	31 81       	ldd	r19, Z+1	; 0x01
    1308:	21 50       	subi	r18, 0x01	; 1
    130a:	31 09       	sbc	r19, r1
    130c:	31 83       	std	Z+1, r19	; 0x01
    130e:	20 83       	st	Z, r18
    1310:	23 2b       	or	r18, r19
    1312:	21 f4       	brne	.+8      	; 0x131c <nwkTxDelayTimerHandler+0x3c>
    1314:	fc 01       	movw	r30, r24
    1316:	c0 83       	st	Z, r28
    1318:	10 2f       	mov	r17, r16
    131a:	01 c0       	rjmp	.+2      	; 0x131e <nwkTxDelayTimerHandler+0x3e>
    131c:	10 2f       	mov	r17, r16
    131e:	59 db       	rcall	.-2382   	; 0x9d2 <nwkFrameNext>
    1320:	00 97       	sbiw	r24, 0x00	; 0
    1322:	51 f7       	brne	.-44     	; 0x12f8 <nwkTxDelayTimerHandler+0x18>
    1324:	11 23       	and	r17, r17
    1326:	11 f0       	breq	.+4      	; 0x132c <nwkTxDelayTimerHandler+0x4c>
    1328:	c7 01       	movw	r24, r14
    132a:	86 d3       	rcall	.+1804   	; 0x1a38 <SYS_TimerStart>
    132c:	cf 91       	pop	r28
    132e:	1f 91       	pop	r17
    1330:	0f 91       	pop	r16
    1332:	ff 90       	pop	r15
    1334:	ef 90       	pop	r14
    1336:	08 95       	ret

00001338 <nwkTxAckWaitTimerHandler>:
    1338:	ef 92       	push	r14
    133a:	ff 92       	push	r15
    133c:	0f 93       	push	r16
    133e:	1f 93       	push	r17
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
    1344:	7c 01       	movw	r14, r24
    1346:	10 e0       	ldi	r17, 0x00	; 0
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	01 e0       	ldi	r16, 0x01	; 1
    134e:	d7 e1       	ldi	r29, 0x17	; 23
    1350:	c0 e1       	ldi	r28, 0x10	; 16
    1352:	16 c0       	rjmp	.+44     	; 0x1380 <nwkTxAckWaitTimerHandler+0x48>
    1354:	fc 01       	movw	r30, r24
    1356:	20 81       	ld	r18, Z
    1358:	26 31       	cpi	r18, 0x16	; 22
    135a:	91 f4       	brne	.+36     	; 0x1380 <nwkTxAckWaitTimerHandler+0x48>
    135c:	ec 57       	subi	r30, 0x7C	; 124
    135e:	ff 4f       	sbci	r31, 0xFF	; 255
    1360:	20 81       	ld	r18, Z
    1362:	31 81       	ldd	r19, Z+1	; 0x01
    1364:	21 50       	subi	r18, 0x01	; 1
    1366:	31 09       	sbc	r19, r1
    1368:	31 83       	std	Z+1, r19	; 0x01
    136a:	20 83       	st	Z, r18
    136c:	23 2b       	or	r18, r19
    136e:	39 f4       	brne	.+14     	; 0x137e <nwkTxAckWaitTimerHandler+0x46>
    1370:	fc 01       	movw	r30, r24
    1372:	d0 83       	st	Z, r29
    1374:	ed 57       	subi	r30, 0x7D	; 125
    1376:	ff 4f       	sbci	r31, 0xFF	; 255
    1378:	c0 83       	st	Z, r28
    137a:	10 2f       	mov	r17, r16
    137c:	01 c0       	rjmp	.+2      	; 0x1380 <nwkTxAckWaitTimerHandler+0x48>
    137e:	10 2f       	mov	r17, r16
    1380:	28 db       	rcall	.-2480   	; 0x9d2 <nwkFrameNext>
    1382:	00 97       	sbiw	r24, 0x00	; 0
    1384:	39 f7       	brne	.-50     	; 0x1354 <nwkTxAckWaitTimerHandler+0x1c>
    1386:	11 23       	and	r17, r17
    1388:	11 f0       	breq	.+4      	; 0x138e <nwkTxAckWaitTimerHandler+0x56>
    138a:	c7 01       	movw	r24, r14
    138c:	55 d3       	rcall	.+1706   	; 0x1a38 <SYS_TimerStart>
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	1f 91       	pop	r17
    1394:	0f 91       	pop	r16
    1396:	ff 90       	pop	r15
    1398:	ef 90       	pop	r14
    139a:	08 95       	ret

0000139c <nwkTxInit>:
    139c:	10 92 22 1f 	sts	0x1F22, r1	; 0x801f22 <nwkTxPhyActiveFrame+0x1>
    13a0:	10 92 21 1f 	sts	0x1F21, r1	; 0x801f21 <nwkTxPhyActiveFrame>
    13a4:	e4 e1       	ldi	r30, 0x14	; 20
    13a6:	ff e1       	ldi	r31, 0x1F	; 31
    13a8:	82 e3       	ldi	r24, 0x32	; 50
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	a0 e0       	ldi	r26, 0x00	; 0
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	86 83       	std	Z+6, r24	; 0x06
    13b2:	97 83       	std	Z+7, r25	; 0x07
    13b4:	a0 87       	std	Z+8, r26	; 0x08
    13b6:	b1 87       	std	Z+9, r27	; 0x09
    13b8:	12 86       	std	Z+10, r1	; 0x0a
    13ba:	8c e9       	ldi	r24, 0x9C	; 156
    13bc:	99 e0       	ldi	r25, 0x09	; 9
    13be:	94 87       	std	Z+12, r25	; 0x0c
    13c0:	83 87       	std	Z+11, r24	; 0x0b
    13c2:	e7 e0       	ldi	r30, 0x07	; 7
    13c4:	ff e1       	ldi	r31, 0x1F	; 31
    13c6:	8a e0       	ldi	r24, 0x0A	; 10
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	a0 e0       	ldi	r26, 0x00	; 0
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	86 83       	std	Z+6, r24	; 0x06
    13d0:	97 83       	std	Z+7, r25	; 0x07
    13d2:	a0 87       	std	Z+8, r26	; 0x08
    13d4:	b1 87       	std	Z+9, r27	; 0x09
    13d6:	12 86       	std	Z+10, r1	; 0x0a
    13d8:	80 e7       	ldi	r24, 0x70	; 112
    13da:	99 e0       	ldi	r25, 0x09	; 9
    13dc:	94 87       	std	Z+12, r25	; 0x0c
    13de:	83 87       	std	Z+11, r24	; 0x0b
    13e0:	08 95       	ret

000013e2 <nwkTxFrame>:
    13e2:	cf 93       	push	r28
    13e4:	df 93       	push	r29
    13e6:	ec 01       	movw	r28, r24
    13e8:	fc 01       	movw	r30, r24
    13ea:	ea 57       	subi	r30, 0x7A	; 122
    13ec:	ff 4f       	sbci	r31, 0xFF	; 255
    13ee:	80 81       	ld	r24, Z
    13f0:	81 ff       	sbrs	r24, 1
    13f2:	03 c0       	rjmp	.+6      	; 0x13fa <nwkTxFrame+0x18>
    13f4:	92 e1       	ldi	r25, 0x12	; 18
    13f6:	98 83       	st	Y, r25
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <nwkTxFrame+0x1c>
    13fa:	92 e1       	ldi	r25, 0x12	; 18
    13fc:	98 83       	st	Y, r25
    13fe:	fe 01       	movw	r30, r28
    1400:	ed 57       	subi	r30, 0x7D	; 125
    1402:	ff 4f       	sbci	r31, 0xFF	; 255
    1404:	10 82       	st	Z, r1
    1406:	80 ff       	sbrs	r24, 0
    1408:	05 c0       	rjmp	.+10     	; 0x1414 <nwkTxFrame+0x32>
    140a:	2f ef       	ldi	r18, 0xFF	; 255
    140c:	3f ef       	ldi	r19, 0xFF	; 255
    140e:	3e 83       	std	Y+6, r19	; 0x06
    1410:	2d 83       	std	Y+5, r18	; 0x05
    1412:	06 c0       	rjmp	.+12     	; 0x1420 <nwkTxFrame+0x3e>
    1414:	20 91 ac 1f 	lds	r18, 0x1FAC	; 0x801fac <nwkIb+0x2>
    1418:	30 91 ad 1f 	lds	r19, 0x1FAD	; 0x801fad <nwkIb+0x3>
    141c:	3e 83       	std	Y+6, r19	; 0x06
    141e:	2d 83       	std	Y+5, r18	; 0x05
    1420:	85 70       	andi	r24, 0x05	; 5
    1422:	19 f4       	brne	.+6      	; 0x142a <nwkTxFrame+0x48>
    1424:	ce 01       	movw	r24, r28
    1426:	31 dc       	rcall	.-1950   	; 0xc8a <nwkRoutePrepareTx>
    1428:	04 c0       	rjmp	.+8      	; 0x1432 <nwkTxFrame+0x50>
    142a:	8f 85       	ldd	r24, Y+15	; 0x0f
    142c:	98 89       	ldd	r25, Y+16	; 0x10
    142e:	98 87       	std	Y+8, r25	; 0x08
    1430:	8f 83       	std	Y+7, r24	; 0x07
    1432:	ea ea       	ldi	r30, 0xAA	; 170
    1434:	ff e1       	ldi	r31, 0x1F	; 31
    1436:	80 81       	ld	r24, Z
    1438:	91 81       	ldd	r25, Z+1	; 0x01
    143a:	9a 87       	std	Y+10, r25	; 0x0a
    143c:	89 87       	std	Y+9, r24	; 0x09
    143e:	85 81       	ldd	r24, Z+5	; 0x05
    1440:	8f 5f       	subi	r24, 0xFF	; 255
    1442:	85 83       	std	Z+5, r24	; 0x05
    1444:	8c 83       	std	Y+4, r24	; 0x04
    1446:	8f 81       	ldd	r24, Y+7	; 0x07
    1448:	98 85       	ldd	r25, Y+8	; 0x08
    144a:	01 96       	adiw	r24, 0x01	; 1
    144c:	69 f4       	brne	.+26     	; 0x1468 <nwkTxFrame+0x86>
    144e:	81 e4       	ldi	r24, 0x41	; 65
    1450:	98 e8       	ldi	r25, 0x88	; 136
    1452:	9b 83       	std	Y+3, r25	; 0x03
    1454:	8a 83       	std	Y+2, r24	; 0x02
    1456:	cf d3       	rcall	.+1950   	; 0x1bf6 <rand>
    1458:	cc 57       	subi	r28, 0x7C	; 124
    145a:	df 4f       	sbci	r29, 0xFF	; 255
    145c:	87 70       	andi	r24, 0x07	; 7
    145e:	99 27       	eor	r25, r25
    1460:	01 96       	adiw	r24, 0x01	; 1
    1462:	99 83       	std	Y+1, r25	; 0x01
    1464:	88 83       	st	Y, r24
    1466:	08 c0       	rjmp	.+16     	; 0x1478 <nwkTxFrame+0x96>
    1468:	81 e6       	ldi	r24, 0x61	; 97
    146a:	98 e8       	ldi	r25, 0x88	; 136
    146c:	9b 83       	std	Y+3, r25	; 0x03
    146e:	8a 83       	std	Y+2, r24	; 0x02
    1470:	cc 57       	subi	r28, 0x7C	; 124
    1472:	df 4f       	sbci	r29, 0xFF	; 255
    1474:	19 82       	std	Y+1, r1	; 0x01
    1476:	18 82       	st	Y, r1
    1478:	df 91       	pop	r29
    147a:	cf 91       	pop	r28
    147c:	08 95       	ret

0000147e <nwkTxBroadcastFrame>:
    147e:	0f 93       	push	r16
    1480:	1f 93       	push	r17
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	8c 01       	movw	r16, r24
    1488:	61 da       	rcall	.-2878   	; 0x94c <nwkFrameAlloc>
    148a:	ec 01       	movw	r28, r24
    148c:	89 2b       	or	r24, r25
    148e:	a9 f1       	breq	.+106    	; 0x14fa <nwkTxBroadcastFrame+0x7c>
    1490:	82 e1       	ldi	r24, 0x12	; 18
    1492:	88 83       	st	Y, r24
    1494:	f8 01       	movw	r30, r16
    1496:	81 81       	ldd	r24, Z+1	; 0x01
    1498:	89 83       	std	Y+1, r24	; 0x01
    149a:	fe 01       	movw	r30, r28
    149c:	ed 57       	subi	r30, 0x7D	; 125
    149e:	ff 4f       	sbci	r31, 0xFF	; 255
    14a0:	10 82       	st	Z, r1
    14a2:	a9 d3       	rcall	.+1874   	; 0x1bf6 <rand>
    14a4:	fe 01       	movw	r30, r28
    14a6:	ec 57       	subi	r30, 0x7C	; 124
    14a8:	ff 4f       	sbci	r31, 0xFF	; 255
    14aa:	87 70       	andi	r24, 0x07	; 7
    14ac:	99 27       	eor	r25, r25
    14ae:	01 96       	adiw	r24, 0x01	; 1
    14b0:	91 83       	std	Z+1, r25	; 0x01
    14b2:	80 83       	st	Z, r24
    14b4:	33 96       	adiw	r30, 0x03	; 3
    14b6:	11 82       	std	Z+1, r1	; 0x01
    14b8:	10 82       	st	Z, r1
    14ba:	f8 01       	movw	r30, r16
    14bc:	41 81       	ldd	r20, Z+1	; 0x01
    14be:	50 e0       	ldi	r21, 0x00	; 0
    14c0:	b8 01       	movw	r22, r16
    14c2:	6e 5f       	subi	r22, 0xFE	; 254
    14c4:	7f 4f       	sbci	r23, 0xFF	; 255
    14c6:	ce 01       	movw	r24, r28
    14c8:	02 96       	adiw	r24, 0x02	; 2
    14ca:	a3 d3       	rcall	.+1862   	; 0x1c12 <memcpy>
    14cc:	81 e4       	ldi	r24, 0x41	; 65
    14ce:	98 e8       	ldi	r25, 0x88	; 136
    14d0:	9b 83       	std	Y+3, r25	; 0x03
    14d2:	8a 83       	std	Y+2, r24	; 0x02
    14d4:	8f ef       	ldi	r24, 0xFF	; 255
    14d6:	9f ef       	ldi	r25, 0xFF	; 255
    14d8:	98 87       	std	Y+8, r25	; 0x08
    14da:	8f 83       	std	Y+7, r24	; 0x07
    14dc:	f8 01       	movw	r30, r16
    14de:	85 81       	ldd	r24, Z+5	; 0x05
    14e0:	96 81       	ldd	r25, Z+6	; 0x06
    14e2:	9e 83       	std	Y+6, r25	; 0x06
    14e4:	8d 83       	std	Y+5, r24	; 0x05
    14e6:	ea ea       	ldi	r30, 0xAA	; 170
    14e8:	ff e1       	ldi	r31, 0x1F	; 31
    14ea:	80 81       	ld	r24, Z
    14ec:	91 81       	ldd	r25, Z+1	; 0x01
    14ee:	9a 87       	std	Y+10, r25	; 0x0a
    14f0:	89 87       	std	Y+9, r24	; 0x09
    14f2:	85 81       	ldd	r24, Z+5	; 0x05
    14f4:	8f 5f       	subi	r24, 0xFF	; 255
    14f6:	85 83       	std	Z+5, r24	; 0x05
    14f8:	8c 83       	std	Y+4, r24	; 0x04
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	1f 91       	pop	r17
    1500:	0f 91       	pop	r16
    1502:	08 95       	ret

00001504 <nwkTxAckReceived>:
    1504:	cf 93       	push	r28
    1506:	df 93       	push	r29
    1508:	fc 01       	movw	r30, r24
    150a:	21 85       	ldd	r18, Z+9	; 0x09
    150c:	23 30       	cpi	r18, 0x03	; 3
    150e:	d9 f4       	brne	.+54     	; 0x1546 <nwkTxAckReceived+0x42>
    1510:	10 c0       	rjmp	.+32     	; 0x1532 <nwkTxAckReceived+0x2e>
    1512:	fc 01       	movw	r30, r24
    1514:	20 81       	ld	r18, Z
    1516:	26 31       	cpi	r18, 0x16	; 22
    1518:	89 f4       	brne	.+34     	; 0x153c <nwkTxAckReceived+0x38>
    151a:	34 85       	ldd	r19, Z+12	; 0x0c
    151c:	29 81       	ldd	r18, Y+1	; 0x01
    151e:	32 13       	cpse	r19, r18
    1520:	0d c0       	rjmp	.+26     	; 0x153c <nwkTxAckReceived+0x38>
    1522:	27 e1       	ldi	r18, 0x17	; 23
    1524:	20 83       	st	Z, r18
    1526:	2a 81       	ldd	r18, Y+2	; 0x02
    1528:	ea 57       	subi	r30, 0x7A	; 122
    152a:	ff 4f       	sbci	r31, 0xFF	; 255
    152c:	20 83       	st	Z, r18
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	0b c0       	rjmp	.+22     	; 0x1548 <nwkTxAckReceived+0x44>
    1532:	fc 01       	movw	r30, r24
    1534:	c7 81       	ldd	r28, Z+7	; 0x07
    1536:	d0 85       	ldd	r29, Z+8	; 0x08
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	4a da       	rcall	.-2924   	; 0x9d2 <nwkFrameNext>
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	41 f7       	brne	.-48     	; 0x1512 <nwkTxAckReceived+0xe>
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	01 c0       	rjmp	.+2      	; 0x1548 <nwkTxAckReceived+0x44>
    1546:	80 e0       	ldi	r24, 0x00	; 0
    1548:	df 91       	pop	r29
    154a:	cf 91       	pop	r28
    154c:	08 95       	ret

0000154e <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    154e:	e0 91 21 1f 	lds	r30, 0x1F21	; 0x801f21 <nwkTxPhyActiveFrame>
    1552:	f0 91 22 1f 	lds	r31, 0x1F22	; 0x801f22 <nwkTxPhyActiveFrame+0x1>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    1556:	81 30       	cpi	r24, 0x01	; 1
    1558:	21 f0       	breq	.+8      	; 0x1562 <PHY_DataConf+0x14>
    155a:	48 f0       	brcs	.+18     	; 0x156e <PHY_DataConf+0x20>
    155c:	82 30       	cpi	r24, 0x02	; 2
    155e:	19 f0       	breq	.+6      	; 0x1566 <PHY_DataConf+0x18>
    1560:	04 c0       	rjmp	.+8      	; 0x156a <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    1562:	80 e2       	ldi	r24, 0x20	; 32
    1564:	05 c0       	rjmp	.+10     	; 0x1570 <PHY_DataConf+0x22>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    1566:	81 e2       	ldi	r24, 0x21	; 33
    1568:	03 c0       	rjmp	.+6      	; 0x1570 <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	01 c0       	rjmp	.+2      	; 0x1570 <PHY_DataConf+0x22>
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    156e:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    1570:	df 01       	movw	r26, r30
    1572:	ad 57       	subi	r26, 0x7D	; 125
    1574:	bf 4f       	sbci	r27, 0xFF	; 255
    1576:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    1578:	85 e1       	ldi	r24, 0x15	; 21
    157a:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    157c:	10 92 22 1f 	sts	0x1F22, r1	; 0x801f22 <nwkTxPhyActiveFrame+0x1>
    1580:	10 92 21 1f 	sts	0x1F21, r1	; 0x801f21 <nwkTxPhyActiveFrame>
  nwkIb.lock--;
    1584:	ea ea       	ldi	r30, 0xAA	; 170
    1586:	ff e1       	ldi	r31, 0x1F	; 31
    1588:	86 a1       	ldd	r24, Z+38	; 0x26
    158a:	97 a1       	ldd	r25, Z+39	; 0x27
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	97 a3       	std	Z+39, r25	; 0x27
    1590:	86 a3       	std	Z+38, r24	; 0x26
    1592:	08 95       	ret

00001594 <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    1594:	9f 92       	push	r9
    1596:	af 92       	push	r10
    1598:	bf 92       	push	r11
    159a:	cf 92       	push	r12
    159c:	df 92       	push	r13
    159e:	ef 92       	push	r14
    15a0:	ff 92       	push	r15
    15a2:	0f 93       	push	r16
    15a4:	1f 93       	push	r17
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    15aa:	c0 e0       	ldi	r28, 0x00	; 0
    15ac:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    15ae:	0f 2e       	mov	r0, r31
    15b0:	f4 e1       	ldi	r31, 0x14	; 20
    15b2:	af 2e       	mov	r10, r31
    15b4:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    15b6:	0a ea       	ldi	r16, 0xAA	; 170
    15b8:	1f e1       	ldi	r17, 0x1F	; 31
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    15ba:	0f 2e       	mov	r0, r31
    15bc:	f7 e1       	ldi	r31, 0x17	; 23
    15be:	df 2e       	mov	r13, r31
    15c0:	f0 2d       	mov	r31, r0
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    15c2:	0f 2e       	mov	r0, r31
    15c4:	f6 e1       	ldi	r31, 0x16	; 22
    15c6:	9f 2e       	mov	r9, r31
    15c8:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    15ca:	0f 2e       	mov	r0, r31
    15cc:	f9 e2       	ldi	r31, 0x29	; 41
    15ce:	ef 2e       	mov	r14, r31
    15d0:	f1 2c       	mov	r15, r1
    15d2:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    15d4:	0f 2e       	mov	r0, r31
    15d6:	f3 e1       	ldi	r31, 0x13	; 19
    15d8:	cf 2e       	mov	r12, r31
    15da:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    15dc:	0f 2e       	mov	r0, r31
    15de:	f1 e1       	ldi	r31, 0x11	; 17
    15e0:	bf 2e       	mov	r11, r31
    15e2:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    15e4:	60 c0       	rjmp	.+192    	; 0x16a6 <nwkTxTaskHandler+0x112>
  {
    switch (frame->state)
    15e6:	88 81       	ld	r24, Y
    15e8:	83 31       	cpi	r24, 0x13	; 19
    15ea:	c1 f0       	breq	.+48     	; 0x161c <nwkTxTaskHandler+0x88>
    15ec:	18 f4       	brcc	.+6      	; 0x15f4 <nwkTxTaskHandler+0x60>
    15ee:	82 31       	cpi	r24, 0x12	; 18
    15f0:	39 f0       	breq	.+14     	; 0x1600 <nwkTxTaskHandler+0x6c>
    15f2:	59 c0       	rjmp	.+178    	; 0x16a6 <nwkTxTaskHandler+0x112>
    15f4:	85 31       	cpi	r24, 0x15	; 21
    15f6:	49 f1       	breq	.+82     	; 0x164a <nwkTxTaskHandler+0xb6>
    15f8:	87 31       	cpi	r24, 0x17	; 23
    15fa:	09 f4       	brne	.+2      	; 0x15fe <nwkTxTaskHandler+0x6a>
    15fc:	45 c0       	rjmp	.+138    	; 0x1688 <nwkTxTaskHandler+0xf4>
    15fe:	53 c0       	rjmp	.+166    	; 0x16a6 <nwkTxTaskHandler+0x112>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    1600:	fe 01       	movw	r30, r28
    1602:	ec 57       	subi	r30, 0x7C	; 124
    1604:	ff 4f       	sbci	r31, 0xFF	; 255
    1606:	80 81       	ld	r24, Z
    1608:	91 81       	ldd	r25, Z+1	; 0x01
    160a:	89 2b       	or	r24, r25
    160c:	29 f0       	breq	.+10     	; 0x1618 <nwkTxTaskHandler+0x84>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    160e:	b8 82       	st	Y, r11
          SYS_TimerStart(&nwkTxDelayTimer);
    1610:	87 e0       	ldi	r24, 0x07	; 7
    1612:	9f e1       	ldi	r25, 0x1F	; 31
    1614:	11 d2       	rcall	.+1058   	; 0x1a38 <SYS_TimerStart>
    1616:	47 c0       	rjmp	.+142    	; 0x16a6 <nwkTxTaskHandler+0x112>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    1618:	c8 82       	st	Y, r12
    161a:	45 c0       	rjmp	.+138    	; 0x16a6 <nwkTxTaskHandler+0x112>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    161c:	80 91 21 1f 	lds	r24, 0x1F21	; 0x801f21 <nwkTxPhyActiveFrame>
    1620:	90 91 22 1f 	lds	r25, 0x1F22	; 0x801f22 <nwkTxPhyActiveFrame+0x1>
    1624:	89 2b       	or	r24, r25
    1626:	09 f0       	breq	.+2      	; 0x162a <nwkTxTaskHandler+0x96>
    1628:	3e c0       	rjmp	.+124    	; 0x16a6 <nwkTxTaskHandler+0x112>
        {
          nwkTxPhyActiveFrame = frame;
    162a:	d0 93 22 1f 	sts	0x1F22, r29	; 0x801f22 <nwkTxPhyActiveFrame+0x1>
    162e:	c0 93 21 1f 	sts	0x1F21, r28	; 0x801f21 <nwkTxPhyActiveFrame>
          frame->state = NWK_TX_STATE_WAIT_CONF;
    1632:	a8 82       	st	Y, r10
          PHY_DataReq(frame->data, frame->size);
    1634:	69 81       	ldd	r22, Y+1	; 0x01
    1636:	ce 01       	movw	r24, r28
    1638:	02 96       	adiw	r24, 0x02	; 2
    163a:	cb d0       	rcall	.+406    	; 0x17d2 <PHY_DataReq>
          nwkIb.lock++;
    163c:	f8 01       	movw	r30, r16
    163e:	86 a1       	ldd	r24, Z+38	; 0x26
    1640:	97 a1       	ldd	r25, Z+39	; 0x27
    1642:	01 96       	adiw	r24, 0x01	; 1
    1644:	97 a3       	std	Z+39, r25	; 0x27
    1646:	86 a3       	std	Z+38, r24	; 0x26
    1648:	2e c0       	rjmp	.+92     	; 0x16a6 <nwkTxTaskHandler+0x112>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    164a:	fe 01       	movw	r30, r28
    164c:	ed 57       	subi	r30, 0x7D	; 125
    164e:	ff 4f       	sbci	r31, 0xFF	; 255
    1650:	80 81       	ld	r24, Z
    1652:	81 11       	cpse	r24, r1
    1654:	17 c0       	rjmp	.+46     	; 0x1684 <nwkTxTaskHandler+0xf0>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    1656:	2d 85       	ldd	r18, Y+13	; 0x0d
    1658:	3e 85       	ldd	r19, Y+14	; 0x0e
    165a:	f8 01       	movw	r30, r16
    165c:	80 81       	ld	r24, Z
    165e:	91 81       	ldd	r25, Z+1	; 0x01
    1660:	28 17       	cp	r18, r24
    1662:	39 07       	cpc	r19, r25
    1664:	69 f4       	brne	.+26     	; 0x1680 <nwkTxTaskHandler+0xec>
    1666:	8b 85       	ldd	r24, Y+11	; 0x0b
    1668:	80 ff       	sbrs	r24, 0
    166a:	0a c0       	rjmp	.+20     	; 0x1680 <nwkTxTaskHandler+0xec>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    166c:	98 82       	st	Y, r9
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    166e:	fe 01       	movw	r30, r28
    1670:	ec 57       	subi	r30, 0x7C	; 124
    1672:	ff 4f       	sbci	r31, 0xFF	; 255
    1674:	f1 82       	std	Z+1, r15	; 0x01
    1676:	e0 82       	st	Z, r14
            SYS_TimerStart(&nwkTxAckWaitTimer);
    1678:	84 e1       	ldi	r24, 0x14	; 20
    167a:	9f e1       	ldi	r25, 0x1F	; 31
    167c:	dd d1       	rcall	.+954    	; 0x1a38 <SYS_TimerStart>
    167e:	13 c0       	rjmp	.+38     	; 0x16a6 <nwkTxTaskHandler+0x112>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    1680:	d8 82       	st	Y, r13
    1682:	11 c0       	rjmp	.+34     	; 0x16a6 <nwkTxTaskHandler+0x112>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    1684:	d8 82       	st	Y, r13
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    1686:	0f c0       	rjmp	.+30     	; 0x16a6 <nwkTxTaskHandler+0x112>
    1688:	ce 01       	movw	r24, r28
    168a:	b8 da       	rcall	.-2704   	; 0xbfc <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    168c:	fe 01       	movw	r30, r28
    168e:	e9 57       	subi	r30, 0x79	; 121
    1690:	ff 4f       	sbci	r31, 0xFF	; 255
    1692:	01 90       	ld	r0, Z+
    1694:	f0 81       	ld	r31, Z
    1696:	e0 2d       	mov	r30, r0
    1698:	30 97       	sbiw	r30, 0x00	; 0
          nwkFrameFree(frame);
    169a:	19 f4       	brne	.+6      	; 0x16a2 <nwkTxTaskHandler+0x10e>
    169c:	ce 01       	movw	r24, r28
    169e:	8f d9       	rcall	.-3298   	; 0x9be <nwkFrameFree>
        else
          frame->tx.confirm(frame);
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <nwkTxTaskHandler+0x112>
    16a2:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    16a4:	19 95       	eicall
    16a6:	ce 01       	movw	r24, r28
    16a8:	94 d9       	rcall	.-3288   	; 0x9d2 <nwkFrameNext>
    16aa:	ec 01       	movw	r28, r24
    16ac:	89 2b       	or	r24, r25
    16ae:	09 f0       	breq	.+2      	; 0x16b2 <nwkTxTaskHandler+0x11e>
    16b0:	9a cf       	rjmp	.-204    	; 0x15e6 <nwkTxTaskHandler+0x52>

      default:
        break;
    };
  }
}
    16b2:	df 91       	pop	r29
    16b4:	cf 91       	pop	r28
    16b6:	1f 91       	pop	r17
    16b8:	0f 91       	pop	r16
    16ba:	ff 90       	pop	r15
    16bc:	ef 90       	pop	r14
    16be:	df 90       	pop	r13
    16c0:	cf 90       	pop	r12
    16c2:	bf 90       	pop	r11
    16c4:	af 90       	pop	r10
    16c6:	9f 90       	pop	r9
    16c8:	08 95       	ret

000016ca <phySetChannel>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    16ca:	80 91 23 1f 	lds	r24, 0x1F23	; 0x801f23 <phyBand>
    16ce:	98 2f       	mov	r25, r24
    16d0:	9f 70       	andi	r25, 0x0F	; 15
    16d2:	e4 e5       	ldi	r30, 0x54	; 84
    16d4:	f1 e0       	ldi	r31, 0x01	; 1
    16d6:	80 81       	ld	r24, Z
    16d8:	80 7f       	andi	r24, 0xF0	; 240
    16da:	89 2b       	or	r24, r25
    16dc:	80 83       	st	Z, r24
    16de:	80 91 23 1f 	lds	r24, 0x1F23	; 0x801f23 <phyBand>
    16e2:	88 23       	and	r24, r24
    16e4:	29 f0       	breq	.+10     	; 0x16f0 <phySetChannel+0x26>
    16e6:	80 91 24 1f 	lds	r24, 0x1F24	; 0x801f24 <phyChannel>
    16ea:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7c0153>
    16ee:	08 95       	ret
    16f0:	80 91 24 1f 	lds	r24, 0x1F24	; 0x801f24 <phyChannel>
    16f4:	98 2f       	mov	r25, r24
    16f6:	9f 71       	andi	r25, 0x1F	; 31
    16f8:	e8 e4       	ldi	r30, 0x48	; 72
    16fa:	f1 e0       	ldi	r31, 0x01	; 1
    16fc:	80 81       	ld	r24, Z
    16fe:	80 7e       	andi	r24, 0xE0	; 224
    1700:	89 2b       	or	r24, r25
    1702:	80 83       	st	Z, r24
    1704:	08 95       	ret

00001706 <phyTrxSetState>:
    1706:	93 e0       	ldi	r25, 0x03	; 3
    1708:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    170c:	e1 e4       	ldi	r30, 0x41	; 65
    170e:	f1 e0       	ldi	r31, 0x01	; 1
    1710:	90 81       	ld	r25, Z
    1712:	9f 71       	andi	r25, 0x1F	; 31
    1714:	98 30       	cpi	r25, 0x08	; 8
    1716:	e1 f7       	brne	.-8      	; 0x1710 <phyTrxSetState+0xa>
    1718:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    171c:	e1 e4       	ldi	r30, 0x41	; 65
    171e:	f1 e0       	ldi	r31, 0x01	; 1
    1720:	90 81       	ld	r25, Z
    1722:	9f 71       	andi	r25, 0x1F	; 31
    1724:	89 13       	cpse	r24, r25
    1726:	fc cf       	rjmp	.-8      	; 0x1720 <phyTrxSetState+0x1a>
    1728:	08 95       	ret

0000172a <phySetRxState>:
    172a:	88 e0       	ldi	r24, 0x08	; 8
    172c:	ec df       	rcall	.-40     	; 0x1706 <phyTrxSetState>
    172e:	8f ef       	ldi	r24, 0xFF	; 255
    1730:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    1734:	80 91 25 1f 	lds	r24, 0x1F25	; 0x801f25 <phyRxState>
    1738:	88 23       	and	r24, r24
    173a:	11 f0       	breq	.+4      	; 0x1740 <phySetRxState+0x16>
    173c:	86 e1       	ldi	r24, 0x16	; 22
    173e:	e3 cf       	rjmp	.-58     	; 0x1706 <phyTrxSetState>
    1740:	08 95       	ret

00001742 <PHY_Init>:
    1742:	e9 e3       	ldi	r30, 0x39	; 57
    1744:	f1 e0       	ldi	r31, 0x01	; 1
    1746:	80 81       	ld	r24, Z
    1748:	81 60       	ori	r24, 0x01	; 1
    174a:	80 83       	st	Z, r24
    174c:	10 92 25 1f 	sts	0x1F25, r1	; 0x801f25 <phyRxState>
    1750:	10 92 23 1f 	sts	0x1F23, r1	; 0x801f23 <phyBand>
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	80 93 a6 1f 	sts	0x1FA6, r24	; 0x801fa6 <phyState>
    175a:	88 e0       	ldi	r24, 0x08	; 8
    175c:	d4 df       	rcall	.-88     	; 0x1706 <phyTrxSetState>
    175e:	8b ee       	ldi	r24, 0xEB	; 235
    1760:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x7c0156>
    1764:	ec e4       	ldi	r30, 0x4C	; 76
    1766:	f1 e0       	ldi	r31, 0x01	; 1
    1768:	80 81       	ld	r24, Z
    176a:	80 68       	ori	r24, 0x80	; 128
    176c:	80 83       	st	Z, r24
    176e:	08 95       	ret

00001770 <PHY_SetRxState>:
    1770:	80 93 25 1f 	sts	0x1F25, r24	; 0x801f25 <phyRxState>
    1774:	da cf       	rjmp	.-76     	; 0x172a <phySetRxState>
    1776:	08 95       	ret

00001778 <PHY_SetChannel>:
    1778:	80 93 24 1f 	sts	0x1F24, r24	; 0x801f24 <phyChannel>
    177c:	a6 cf       	rjmp	.-180    	; 0x16ca <phySetChannel>
    177e:	08 95       	ret

00001780 <PHY_SetPanId>:
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	1f 92       	push	r1
    1786:	1f 92       	push	r1
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	9a 83       	std	Y+2, r25	; 0x02
    178e:	89 83       	std	Y+1, r24	; 0x01
    1790:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	08 95       	ret

000017a4 <PHY_SetShortAddr>:
    17a4:	cf 93       	push	r28
    17a6:	df 93       	push	r29
    17a8:	1f 92       	push	r1
    17aa:	1f 92       	push	r1
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
    17b0:	9a 83       	std	Y+2, r25	; 0x02
    17b2:	89 83       	std	Y+1, r24	; 0x01
    17b4:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
    17be:	99 81       	ldd	r25, Y+1	; 0x01
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	89 0f       	add	r24, r25
    17c4:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	df 91       	pop	r29
    17ce:	cf 91       	pop	r28
    17d0:	08 95       	ret

000017d2 <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    17d2:	1f 93       	push	r17
    17d4:	cf 93       	push	r28
    17d6:	df 93       	push	r29
    17d8:	18 2f       	mov	r17, r24
    17da:	d9 2f       	mov	r29, r25
    17dc:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    17de:	89 e1       	ldi	r24, 0x19	; 25
    17e0:	92 df       	rcall	.-220    	; 0x1706 <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    17e2:	8f ef       	ldi	r24, 0xFF	; 255
    17e4:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    17e8:	82 e0       	ldi	r24, 0x02	; 2
    17ea:	8c 0f       	add	r24, r28
    17ec:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x7c0180>
  for (uint8_t i = 0; i < size; i++)
    17f0:	cc 23       	and	r28, r28
    17f2:	71 f0       	breq	.+28     	; 0x1810 <PHY_DataReq+0x3e>
    17f4:	a1 2f       	mov	r26, r17
    17f6:	bd 2f       	mov	r27, r29
    17f8:	c1 50       	subi	r28, 0x01	; 1
    17fa:	6c 2f       	mov	r22, r28
    17fc:	70 e0       	ldi	r23, 0x00	; 0
    17fe:	6e 57       	subi	r22, 0x7E	; 126
    1800:	7e 4f       	sbci	r23, 0xFE	; 254
    1802:	e1 e8       	ldi	r30, 0x81	; 129
    1804:	f1 e0       	ldi	r31, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    1806:	8d 91       	ld	r24, X+
    1808:	81 93       	st	Z+, r24
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    180a:	e6 17       	cp	r30, r22
    180c:	f7 07       	cpc	r31, r23
    180e:	d9 f7       	brne	.-10     	; 0x1806 <PHY_DataReq+0x34>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    1810:	83 e0       	ldi	r24, 0x03	; 3
    1812:	80 93 a6 1f 	sts	0x1FA6, r24	; 0x801fa6 <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    1816:	82 e0       	ldi	r24, 0x02	; 2
    1818:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
}
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	1f 91       	pop	r17
    1822:	08 95       	ret

00001824 <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    1824:	1f 93       	push	r17
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	00 d0       	rcall	.+0      	; 0x182c <PHY_TaskHandler+0x8>
    182c:	1f 92       	push	r1
    182e:	1f 92       	push	r1
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    1834:	80 91 a6 1f 	lds	r24, 0x1FA6	; 0x801fa6 <phyState>
    1838:	82 30       	cpi	r24, 0x02	; 2
    183a:	09 f4       	brne	.+2      	; 0x183e <PHY_TaskHandler+0x1a>
    183c:	65 c0       	rjmp	.+202    	; 0x1908 <PHY_TaskHandler+0xe4>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    183e:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    1842:	83 ff       	sbrs	r24, 3
    1844:	3e c0       	rjmp	.+124    	; 0x18c2 <PHY_TaskHandler+0x9e>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    1846:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7c017b>

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    184a:	6a 2f       	mov	r22, r26
    184c:	70 e0       	ldi	r23, 0x00	; 0
    184e:	ab 01       	movw	r20, r22
    1850:	4f 5f       	subi	r20, 0xFF	; 255
    1852:	5f 4f       	sbci	r21, 0xFF	; 255
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	20 e0       	ldi	r18, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    185a:	fc 01       	movw	r30, r24
    185c:	e0 58       	subi	r30, 0x80	; 128
    185e:	fe 4f       	sbci	r31, 0xFE	; 254
    1860:	30 81       	ld	r19, Z
    1862:	fc 01       	movw	r30, r24
    1864:	ea 5d       	subi	r30, 0xDA	; 218
    1866:	f0 4e       	sbci	r31, 0xE0	; 224
    1868:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    186a:	2f 5f       	subi	r18, 0xFF	; 255
    186c:	82 2f       	mov	r24, r18
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	84 17       	cp	r24, r20
    1872:	95 07       	cpc	r25, r21
    1874:	94 f3       	brlt	.-28     	; 0x185a <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    1876:	86 e2       	ldi	r24, 0x26	; 38
    1878:	9f e1       	ldi	r25, 0x1F	; 31
    187a:	9a 83       	std	Y+2, r25	; 0x02
    187c:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    187e:	a2 50       	subi	r26, 0x02	; 2
    1880:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    1882:	fb 01       	movw	r30, r22
    1884:	ea 5d       	subi	r30, 0xDA	; 218
    1886:	f0 4e       	sbci	r31, 0xE0	; 224
    1888:	80 81       	ld	r24, Z
    188a:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    188c:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7c0147>
    1890:	8a 55       	subi	r24, 0x5A	; 90
    1892:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    1894:	ce 01       	movw	r24, r28
    1896:	01 96       	adiw	r24, 0x01	; 1
    1898:	bd da       	rcall	.-2694   	; 0xe14 <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    189a:	e1 e4       	ldi	r30, 0x41	; 65
    189c:	f1 e0       	ldi	r31, 0x01	; 1
    189e:	80 81       	ld	r24, Z
    18a0:	8f 71       	andi	r24, 0x1F	; 31
    18a2:	86 31       	cpi	r24, 0x16	; 22
    18a4:	e1 f7       	brne	.-8      	; 0x189e <PHY_TaskHandler+0x7a>

    IRQ_STATUS_REG_s.rxEnd = 1;
    18a6:	ef e4       	ldi	r30, 0x4F	; 79
    18a8:	f1 e0       	ldi	r31, 0x01	; 1
    18aa:	80 81       	ld	r24, Z
    18ac:	88 60       	ori	r24, 0x08	; 8
    18ae:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    18b0:	ec e4       	ldi	r30, 0x4C	; 76
    18b2:	f1 e0       	ldi	r31, 0x01	; 1
    18b4:	80 81       	ld	r24, Z
    18b6:	8f 77       	andi	r24, 0x7F	; 127
    18b8:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    18ba:	80 81       	ld	r24, Z
    18bc:	80 68       	ori	r24, 0x80	; 128
    18be:	80 83       	st	Z, r24
    18c0:	23 c0       	rjmp	.+70     	; 0x1908 <PHY_TaskHandler+0xe4>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    18c2:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    18c6:	86 ff       	sbrs	r24, 6
    18c8:	1f c0       	rjmp	.+62     	; 0x1908 <PHY_TaskHandler+0xe4>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    18ca:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    18ce:	8f 71       	andi	r24, 0x1F	; 31
    18d0:	89 31       	cpi	r24, 0x19	; 25
    18d2:	a9 f4       	brne	.+42     	; 0x18fe <PHY_TaskHandler+0xda>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    18d4:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    18d8:	12 95       	swap	r17
    18da:	16 95       	lsr	r17
    18dc:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    18de:	49 f0       	breq	.+18     	; 0x18f2 <PHY_TaskHandler+0xce>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    18e0:	13 30       	cpi	r17, 0x03	; 3
    18e2:	21 f0       	breq	.+8      	; 0x18ec <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    18e4:	15 30       	cpi	r17, 0x05	; 5
    18e6:	21 f0       	breq	.+8      	; 0x18f0 <PHY_TaskHandler+0xcc>
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    18e8:	13 e0       	ldi	r17, 0x03	; 3
    18ea:	03 c0       	rjmp	.+6      	; 0x18f2 <PHY_TaskHandler+0xce>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    18ec:	11 e0       	ldi	r17, 0x01	; 1
    18ee:	01 c0       	rjmp	.+2      	; 0x18f2 <PHY_TaskHandler+0xce>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    18f0:	12 e0       	ldi	r17, 0x02	; 2
    18f2:	1b df       	rcall	.-458    	; 0x172a <phySetRxState>
      phyState = PHY_STATE_IDLE;
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	80 93 a6 1f 	sts	0x1FA6, r24	; 0x801fa6 <phyState>

      PHY_DataConf(status);
    18fa:	81 2f       	mov	r24, r17
    18fc:	28 de       	rcall	.-944    	; 0x154e <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    18fe:	ef e4       	ldi	r30, 0x4F	; 79
    1900:	f1 e0       	ldi	r31, 0x01	; 1
    1902:	80 81       	ld	r24, Z
    1904:	80 64       	ori	r24, 0x40	; 64
    1906:	80 83       	st	Z, r24
  }
}
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	df 91       	pop	r29
    1914:	cf 91       	pop	r28
    1916:	1f 91       	pop	r17
    1918:	08 95       	ret

0000191a <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    191a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <HAL_Init>
  SYS_TimerInit();
    191e:	6d d0       	rcall	.+218    	; 0x19fa <SYS_TimerInit>
  PHY_Init();
    1920:	10 df       	rcall	.-480    	; 0x1742 <PHY_Init>
    1922:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <NWK_Init>
  NWK_Init();
    1926:	08 95       	ret

00001928 <SYS_TaskHandler>:
    1928:	7d df       	rcall	.-262    	; 0x1824 <PHY_TaskHandler>
/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
  NWK_TaskHandler();
    192a:	0e 94 a8 03 	call	0x750	; 0x750 <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    192e:	8f c0       	rjmp	.+286    	; 0x1a4e <SYS_TimerTaskHandler>
    1930:	08 95       	ret

00001932 <placeTimer>:
    1932:	0f 93       	push	r16
    1934:	1f 93       	push	r17
    1936:	cf 93       	push	r28
    1938:	df 93       	push	r29
    193a:	ec 01       	movw	r28, r24
    193c:	80 91 a7 1f 	lds	r24, 0x1FA7	; 0x801fa7 <timers>
    1940:	90 91 a8 1f 	lds	r25, 0x1FA8	; 0x801fa8 <timers+0x1>
    1944:	00 97       	sbiw	r24, 0x00	; 0
    1946:	09 f4       	brne	.+2      	; 0x194a <placeTimer+0x18>
    1948:	45 c0       	rjmp	.+138    	; 0x19d4 <placeTimer+0xa2>
    194a:	4e 81       	ldd	r20, Y+6	; 0x06
    194c:	5f 81       	ldd	r21, Y+7	; 0x07
    194e:	68 85       	ldd	r22, Y+8	; 0x08
    1950:	79 85       	ldd	r23, Y+9	; 0x09
    1952:	fc 01       	movw	r30, r24
    1954:	02 81       	ldd	r16, Z+2	; 0x02
    1956:	13 81       	ldd	r17, Z+3	; 0x03
    1958:	24 81       	ldd	r18, Z+4	; 0x04
    195a:	35 81       	ldd	r19, Z+5	; 0x05
    195c:	40 17       	cp	r20, r16
    195e:	51 07       	cpc	r21, r17
    1960:	62 07       	cpc	r22, r18
    1962:	73 07       	cpc	r23, r19
    1964:	60 f0       	brcs	.+24     	; 0x197e <placeTimer+0x4c>
    1966:	dc 01       	movw	r26, r24
    1968:	17 c0       	rjmp	.+46     	; 0x1998 <placeTimer+0x66>
    196a:	02 81       	ldd	r16, Z+2	; 0x02
    196c:	13 81       	ldd	r17, Z+3	; 0x03
    196e:	24 81       	ldd	r18, Z+4	; 0x04
    1970:	35 81       	ldd	r19, Z+5	; 0x05
    1972:	40 17       	cp	r20, r16
    1974:	51 07       	cpc	r21, r17
    1976:	62 07       	cpc	r22, r18
    1978:	73 07       	cpc	r23, r19
    197a:	68 f4       	brcc	.+26     	; 0x1996 <placeTimer+0x64>
    197c:	03 c0       	rjmp	.+6      	; 0x1984 <placeTimer+0x52>
    197e:	fc 01       	movw	r30, r24
    1980:	a0 e0       	ldi	r26, 0x00	; 0
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	04 1b       	sub	r16, r20
    1986:	15 0b       	sbc	r17, r21
    1988:	26 0b       	sbc	r18, r22
    198a:	37 0b       	sbc	r19, r23
    198c:	02 83       	std	Z+2, r16	; 0x02
    198e:	13 83       	std	Z+3, r17	; 0x03
    1990:	24 83       	std	Z+4, r18	; 0x04
    1992:	35 83       	std	Z+5, r19	; 0x05
    1994:	0a c0       	rjmp	.+20     	; 0x19aa <placeTimer+0x78>
    1996:	df 01       	movw	r26, r30
    1998:	40 1b       	sub	r20, r16
    199a:	51 0b       	sbc	r21, r17
    199c:	62 0b       	sbc	r22, r18
    199e:	73 0b       	sbc	r23, r19
    19a0:	ed 91       	ld	r30, X+
    19a2:	fc 91       	ld	r31, X
    19a4:	11 97       	sbiw	r26, 0x01	; 1
    19a6:	30 97       	sbiw	r30, 0x00	; 0
    19a8:	01 f7       	brne	.-64     	; 0x196a <placeTimer+0x38>
    19aa:	4a 83       	std	Y+2, r20	; 0x02
    19ac:	5b 83       	std	Y+3, r21	; 0x03
    19ae:	6c 83       	std	Y+4, r22	; 0x04
    19b0:	7d 83       	std	Y+5, r23	; 0x05
    19b2:	10 97       	sbiw	r26, 0x00	; 0
    19b4:	41 f0       	breq	.+16     	; 0x19c6 <placeTimer+0x94>
    19b6:	8d 91       	ld	r24, X+
    19b8:	9c 91       	ld	r25, X
    19ba:	11 97       	sbiw	r26, 0x01	; 1
    19bc:	99 83       	std	Y+1, r25	; 0x01
    19be:	88 83       	st	Y, r24
    19c0:	cd 93       	st	X+, r28
    19c2:	dc 93       	st	X, r29
    19c4:	15 c0       	rjmp	.+42     	; 0x19f0 <placeTimer+0xbe>
    19c6:	99 83       	std	Y+1, r25	; 0x01
    19c8:	88 83       	st	Y, r24
    19ca:	d0 93 a8 1f 	sts	0x1FA8, r29	; 0x801fa8 <timers+0x1>
    19ce:	c0 93 a7 1f 	sts	0x1FA7, r28	; 0x801fa7 <timers>
    19d2:	0e c0       	rjmp	.+28     	; 0x19f0 <placeTimer+0xbe>
    19d4:	19 82       	std	Y+1, r1	; 0x01
    19d6:	18 82       	st	Y, r1
    19d8:	8e 81       	ldd	r24, Y+6	; 0x06
    19da:	9f 81       	ldd	r25, Y+7	; 0x07
    19dc:	a8 85       	ldd	r26, Y+8	; 0x08
    19de:	b9 85       	ldd	r27, Y+9	; 0x09
    19e0:	8a 83       	std	Y+2, r24	; 0x02
    19e2:	9b 83       	std	Y+3, r25	; 0x03
    19e4:	ac 83       	std	Y+4, r26	; 0x04
    19e6:	bd 83       	std	Y+5, r27	; 0x05
    19e8:	d0 93 a8 1f 	sts	0x1FA8, r29	; 0x801fa8 <timers+0x1>
    19ec:	c0 93 a7 1f 	sts	0x1FA7, r28	; 0x801fa7 <timers>
    19f0:	df 91       	pop	r29
    19f2:	cf 91       	pop	r28
    19f4:	1f 91       	pop	r17
    19f6:	0f 91       	pop	r16
    19f8:	08 95       	ret

000019fa <SYS_TimerInit>:
    19fa:	10 92 a8 1f 	sts	0x1FA8, r1	; 0x801fa8 <timers+0x1>
    19fe:	10 92 a7 1f 	sts	0x1FA7, r1	; 0x801fa7 <timers>
    1a02:	08 95       	ret

00001a04 <SYS_TimerStarted>:
    1a04:	e0 91 a7 1f 	lds	r30, 0x1FA7	; 0x801fa7 <timers>
    1a08:	f0 91 a8 1f 	lds	r31, 0x1FA8	; 0x801fa8 <timers+0x1>
    1a0c:	30 97       	sbiw	r30, 0x00	; 0
    1a0e:	71 f0       	breq	.+28     	; 0x1a2c <SYS_TimerStarted+0x28>
    1a10:	e8 17       	cp	r30, r24
    1a12:	f9 07       	cpc	r31, r25
    1a14:	21 f4       	brne	.+8      	; 0x1a1e <SYS_TimerStarted+0x1a>
    1a16:	0c c0       	rjmp	.+24     	; 0x1a30 <SYS_TimerStarted+0x2c>
    1a18:	8e 17       	cp	r24, r30
    1a1a:	9f 07       	cpc	r25, r31
    1a1c:	59 f0       	breq	.+22     	; 0x1a34 <SYS_TimerStarted+0x30>
    1a1e:	01 90       	ld	r0, Z+
    1a20:	f0 81       	ld	r31, Z
    1a22:	e0 2d       	mov	r30, r0
    1a24:	30 97       	sbiw	r30, 0x00	; 0
    1a26:	c1 f7       	brne	.-16     	; 0x1a18 <SYS_TimerStarted+0x14>
    1a28:	80 e0       	ldi	r24, 0x00	; 0
    1a2a:	08 95       	ret
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	08 95       	ret
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	08 95       	ret
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	08 95       	ret

00001a38 <SYS_TimerStart>:
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29
    1a3c:	ec 01       	movw	r28, r24
    1a3e:	e2 df       	rcall	.-60     	; 0x1a04 <SYS_TimerStarted>
    1a40:	81 11       	cpse	r24, r1
    1a42:	02 c0       	rjmp	.+4      	; 0x1a48 <SYS_TimerStart+0x10>
    1a44:	ce 01       	movw	r24, r28
    1a46:	75 df       	rcall	.-278    	; 0x1932 <placeTimer>
    1a48:	df 91       	pop	r29
    1a4a:	cf 91       	pop	r28
    1a4c:	08 95       	ret

00001a4e <SYS_TimerTaskHandler>:
    1a4e:	cf 92       	push	r12
    1a50:	df 92       	push	r13
    1a52:	ef 92       	push	r14
    1a54:	ff 92       	push	r15
    1a56:	cf 93       	push	r28
    1a58:	df 93       	push	r29
    1a5a:	80 91 a9 1f 	lds	r24, 0x1FA9	; 0x801fa9 <halTimerIrqCount>
    1a5e:	88 23       	and	r24, r24
    1a60:	09 f4       	brne	.+2      	; 0x1a64 <SYS_TimerTaskHandler+0x16>
    1a62:	59 c0       	rjmp	.+178    	; 0x1b16 <SYS_TimerTaskHandler+0xc8>
    1a64:	8f b7       	in	r24, 0x3f	; 63
    1a66:	f8 94       	cli
    1a68:	c0 90 a9 1f 	lds	r12, 0x1FA9	; 0x801fa9 <halTimerIrqCount>
    1a6c:	10 92 a9 1f 	sts	0x1FA9, r1	; 0x801fa9 <halTimerIrqCount>
    1a70:	8f bf       	out	0x3f, r24	; 63
    1a72:	d1 2c       	mov	r13, r1
    1a74:	e1 2c       	mov	r14, r1
    1a76:	f1 2c       	mov	r15, r1
    1a78:	cc 0c       	add	r12, r12
    1a7a:	dd 1c       	adc	r13, r13
    1a7c:	ee 1c       	adc	r14, r14
    1a7e:	ff 1c       	adc	r15, r15
    1a80:	d7 01       	movw	r26, r14
    1a82:	c6 01       	movw	r24, r12
    1a84:	88 0f       	add	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	aa 1f       	adc	r26, r26
    1a8a:	bb 1f       	adc	r27, r27
    1a8c:	88 0f       	add	r24, r24
    1a8e:	99 1f       	adc	r25, r25
    1a90:	aa 1f       	adc	r26, r26
    1a92:	bb 1f       	adc	r27, r27
    1a94:	c8 0e       	add	r12, r24
    1a96:	d9 1e       	adc	r13, r25
    1a98:	ea 1e       	adc	r14, r26
    1a9a:	fb 1e       	adc	r15, r27
    1a9c:	c0 91 a7 1f 	lds	r28, 0x1FA7	; 0x801fa7 <timers>
    1aa0:	d0 91 a8 1f 	lds	r29, 0x1FA8	; 0x801fa8 <timers+0x1>
    1aa4:	20 97       	sbiw	r28, 0x00	; 0
    1aa6:	b9 f1       	breq	.+110    	; 0x1b16 <SYS_TimerTaskHandler+0xc8>
    1aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aaa:	9b 81       	ldd	r25, Y+3	; 0x03
    1aac:	ac 81       	ldd	r26, Y+4	; 0x04
    1aae:	bd 81       	ldd	r27, Y+5	; 0x05
    1ab0:	c8 16       	cp	r12, r24
    1ab2:	d9 06       	cpc	r13, r25
    1ab4:	ea 06       	cpc	r14, r26
    1ab6:	fb 06       	cpc	r15, r27
    1ab8:	10 f1       	brcs	.+68     	; 0x1afe <SYS_TimerTaskHandler+0xb0>
    1aba:	c8 1a       	sub	r12, r24
    1abc:	d9 0a       	sbc	r13, r25
    1abe:	ea 0a       	sbc	r14, r26
    1ac0:	fb 0a       	sbc	r15, r27
    1ac2:	88 81       	ld	r24, Y
    1ac4:	99 81       	ldd	r25, Y+1	; 0x01
    1ac6:	90 93 a8 1f 	sts	0x1FA8, r25	; 0x801fa8 <timers+0x1>
    1aca:	80 93 a7 1f 	sts	0x1FA7, r24	; 0x801fa7 <timers>
    1ace:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ad0:	81 30       	cpi	r24, 0x01	; 1
    1ad2:	11 f4       	brne	.+4      	; 0x1ad8 <SYS_TimerTaskHandler+0x8a>
    1ad4:	ce 01       	movw	r24, r28
    1ad6:	2d df       	rcall	.-422    	; 0x1932 <placeTimer>
    1ad8:	eb 85       	ldd	r30, Y+11	; 0x0b
    1ada:	fc 85       	ldd	r31, Y+12	; 0x0c
    1adc:	ce 01       	movw	r24, r28
    1ade:	19 95       	eicall
    1ae0:	c0 91 a7 1f 	lds	r28, 0x1FA7	; 0x801fa7 <timers>
    1ae4:	d0 91 a8 1f 	lds	r29, 0x1FA8	; 0x801fa8 <timers+0x1>
    1ae8:	20 97       	sbiw	r28, 0x00	; 0
    1aea:	a9 f0       	breq	.+42     	; 0x1b16 <SYS_TimerTaskHandler+0xc8>
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	9b 81       	ldd	r25, Y+3	; 0x03
    1af0:	ac 81       	ldd	r26, Y+4	; 0x04
    1af2:	bd 81       	ldd	r27, Y+5	; 0x05
    1af4:	c8 16       	cp	r12, r24
    1af6:	d9 06       	cpc	r13, r25
    1af8:	ea 06       	cpc	r14, r26
    1afa:	fb 06       	cpc	r15, r27
    1afc:	f0 f6       	brcc	.-68     	; 0x1aba <SYS_TimerTaskHandler+0x6c>
    1afe:	8a 81       	ldd	r24, Y+2	; 0x02
    1b00:	9b 81       	ldd	r25, Y+3	; 0x03
    1b02:	ac 81       	ldd	r26, Y+4	; 0x04
    1b04:	bd 81       	ldd	r27, Y+5	; 0x05
    1b06:	8c 19       	sub	r24, r12
    1b08:	9d 09       	sbc	r25, r13
    1b0a:	ae 09       	sbc	r26, r14
    1b0c:	bf 09       	sbc	r27, r15
    1b0e:	8a 83       	std	Y+2, r24	; 0x02
    1b10:	9b 83       	std	Y+3, r25	; 0x03
    1b12:	ac 83       	std	Y+4, r26	; 0x04
    1b14:	bd 83       	std	Y+5, r27	; 0x05
    1b16:	df 91       	pop	r29
    1b18:	cf 91       	pop	r28
    1b1a:	ff 90       	pop	r15
    1b1c:	ef 90       	pop	r14
    1b1e:	df 90       	pop	r13
    1b20:	cf 90       	pop	r12
    1b22:	08 95       	ret

00001b24 <__udivmodsi4>:
    1b24:	a1 e2       	ldi	r26, 0x21	; 33
    1b26:	1a 2e       	mov	r1, r26
    1b28:	aa 1b       	sub	r26, r26
    1b2a:	bb 1b       	sub	r27, r27
    1b2c:	fd 01       	movw	r30, r26
    1b2e:	0d c0       	rjmp	.+26     	; 0x1b4a <__udivmodsi4_ep>

00001b30 <__udivmodsi4_loop>:
    1b30:	aa 1f       	adc	r26, r26
    1b32:	bb 1f       	adc	r27, r27
    1b34:	ee 1f       	adc	r30, r30
    1b36:	ff 1f       	adc	r31, r31
    1b38:	a2 17       	cp	r26, r18
    1b3a:	b3 07       	cpc	r27, r19
    1b3c:	e4 07       	cpc	r30, r20
    1b3e:	f5 07       	cpc	r31, r21
    1b40:	20 f0       	brcs	.+8      	; 0x1b4a <__udivmodsi4_ep>
    1b42:	a2 1b       	sub	r26, r18
    1b44:	b3 0b       	sbc	r27, r19
    1b46:	e4 0b       	sbc	r30, r20
    1b48:	f5 0b       	sbc	r31, r21

00001b4a <__udivmodsi4_ep>:
    1b4a:	66 1f       	adc	r22, r22
    1b4c:	77 1f       	adc	r23, r23
    1b4e:	88 1f       	adc	r24, r24
    1b50:	99 1f       	adc	r25, r25
    1b52:	1a 94       	dec	r1
    1b54:	69 f7       	brne	.-38     	; 0x1b30 <__udivmodsi4_loop>
    1b56:	60 95       	com	r22
    1b58:	70 95       	com	r23
    1b5a:	80 95       	com	r24
    1b5c:	90 95       	com	r25
    1b5e:	9b 01       	movw	r18, r22
    1b60:	ac 01       	movw	r20, r24
    1b62:	bd 01       	movw	r22, r26
    1b64:	cf 01       	movw	r24, r30
    1b66:	08 95       	ret

00001b68 <do_rand>:
    1b68:	8f 92       	push	r8
    1b6a:	9f 92       	push	r9
    1b6c:	af 92       	push	r10
    1b6e:	bf 92       	push	r11
    1b70:	cf 92       	push	r12
    1b72:	df 92       	push	r13
    1b74:	ef 92       	push	r14
    1b76:	ff 92       	push	r15
    1b78:	cf 93       	push	r28
    1b7a:	df 93       	push	r29
    1b7c:	ec 01       	movw	r28, r24
    1b7e:	68 81       	ld	r22, Y
    1b80:	79 81       	ldd	r23, Y+1	; 0x01
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	9b 81       	ldd	r25, Y+3	; 0x03
    1b86:	61 15       	cp	r22, r1
    1b88:	71 05       	cpc	r23, r1
    1b8a:	81 05       	cpc	r24, r1
    1b8c:	91 05       	cpc	r25, r1
    1b8e:	21 f4       	brne	.+8      	; 0x1b98 <do_rand+0x30>
    1b90:	64 e2       	ldi	r22, 0x24	; 36
    1b92:	79 ed       	ldi	r23, 0xD9	; 217
    1b94:	8b e5       	ldi	r24, 0x5B	; 91
    1b96:	97 e0       	ldi	r25, 0x07	; 7
    1b98:	2d e1       	ldi	r18, 0x1D	; 29
    1b9a:	33 ef       	ldi	r19, 0xF3	; 243
    1b9c:	41 e0       	ldi	r20, 0x01	; 1
    1b9e:	50 e0       	ldi	r21, 0x00	; 0
    1ba0:	41 d0       	rcall	.+130    	; 0x1c24 <__divmodsi4>
    1ba2:	49 01       	movw	r8, r18
    1ba4:	5a 01       	movw	r10, r20
    1ba6:	9b 01       	movw	r18, r22
    1ba8:	ac 01       	movw	r20, r24
    1baa:	a7 ea       	ldi	r26, 0xA7	; 167
    1bac:	b1 e4       	ldi	r27, 0x41	; 65
    1bae:	56 d0       	rcall	.+172    	; 0x1c5c <__muluhisi3>
    1bb0:	6b 01       	movw	r12, r22
    1bb2:	7c 01       	movw	r14, r24
    1bb4:	ac ee       	ldi	r26, 0xEC	; 236
    1bb6:	b4 ef       	ldi	r27, 0xF4	; 244
    1bb8:	a5 01       	movw	r20, r10
    1bba:	94 01       	movw	r18, r8
    1bbc:	5b d0       	rcall	.+182    	; 0x1c74 <__mulohisi3>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	8c 0d       	add	r24, r12
    1bc4:	9d 1d       	adc	r25, r13
    1bc6:	ae 1d       	adc	r26, r14
    1bc8:	bf 1d       	adc	r27, r15
    1bca:	b7 ff       	sbrs	r27, 7
    1bcc:	03 c0       	rjmp	.+6      	; 0x1bd4 <do_rand+0x6c>
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	a1 09       	sbc	r26, r1
    1bd2:	b0 48       	sbci	r27, 0x80	; 128
    1bd4:	88 83       	st	Y, r24
    1bd6:	99 83       	std	Y+1, r25	; 0x01
    1bd8:	aa 83       	std	Y+2, r26	; 0x02
    1bda:	bb 83       	std	Y+3, r27	; 0x03
    1bdc:	9f 77       	andi	r25, 0x7F	; 127
    1bde:	df 91       	pop	r29
    1be0:	cf 91       	pop	r28
    1be2:	ff 90       	pop	r15
    1be4:	ef 90       	pop	r14
    1be6:	df 90       	pop	r13
    1be8:	cf 90       	pop	r12
    1bea:	bf 90       	pop	r11
    1bec:	af 90       	pop	r10
    1bee:	9f 90       	pop	r9
    1bf0:	8f 90       	pop	r8
    1bf2:	08 95       	ret

00001bf4 <rand_r>:
    1bf4:	b9 cf       	rjmp	.-142    	; 0x1b68 <do_rand>

00001bf6 <rand>:
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	92 e0       	ldi	r25, 0x02	; 2
    1bfa:	b6 cf       	rjmp	.-148    	; 0x1b68 <do_rand>

00001bfc <srand>:
    1bfc:	a0 e0       	ldi	r26, 0x00	; 0
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    1c04:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1c08:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    1c0c:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    1c10:	08 95       	ret

00001c12 <memcpy>:
    1c12:	fb 01       	movw	r30, r22
    1c14:	dc 01       	movw	r26, r24
    1c16:	02 c0       	rjmp	.+4      	; 0x1c1c <memcpy+0xa>
    1c18:	01 90       	ld	r0, Z+
    1c1a:	0d 92       	st	X+, r0
    1c1c:	41 50       	subi	r20, 0x01	; 1
    1c1e:	50 40       	sbci	r21, 0x00	; 0
    1c20:	d8 f7       	brcc	.-10     	; 0x1c18 <memcpy+0x6>
    1c22:	08 95       	ret

00001c24 <__divmodsi4>:
    1c24:	05 2e       	mov	r0, r21
    1c26:	97 fb       	bst	r25, 7
    1c28:	16 f4       	brtc	.+4      	; 0x1c2e <__divmodsi4+0xa>
    1c2a:	00 94       	com	r0
    1c2c:	0f d0       	rcall	.+30     	; 0x1c4c <__negsi2>
    1c2e:	57 fd       	sbrc	r21, 7
    1c30:	05 d0       	rcall	.+10     	; 0x1c3c <__divmodsi4_neg2>
    1c32:	78 df       	rcall	.-272    	; 0x1b24 <__udivmodsi4>
    1c34:	07 fc       	sbrc	r0, 7
    1c36:	02 d0       	rcall	.+4      	; 0x1c3c <__divmodsi4_neg2>
    1c38:	46 f4       	brtc	.+16     	; 0x1c4a <__divmodsi4_exit>
    1c3a:	08 c0       	rjmp	.+16     	; 0x1c4c <__negsi2>

00001c3c <__divmodsi4_neg2>:
    1c3c:	50 95       	com	r21
    1c3e:	40 95       	com	r20
    1c40:	30 95       	com	r19
    1c42:	21 95       	neg	r18
    1c44:	3f 4f       	sbci	r19, 0xFF	; 255
    1c46:	4f 4f       	sbci	r20, 0xFF	; 255
    1c48:	5f 4f       	sbci	r21, 0xFF	; 255

00001c4a <__divmodsi4_exit>:
    1c4a:	08 95       	ret

00001c4c <__negsi2>:
    1c4c:	90 95       	com	r25
    1c4e:	80 95       	com	r24
    1c50:	70 95       	com	r23
    1c52:	61 95       	neg	r22
    1c54:	7f 4f       	sbci	r23, 0xFF	; 255
    1c56:	8f 4f       	sbci	r24, 0xFF	; 255
    1c58:	9f 4f       	sbci	r25, 0xFF	; 255
    1c5a:	08 95       	ret

00001c5c <__muluhisi3>:
    1c5c:	0f d0       	rcall	.+30     	; 0x1c7c <__umulhisi3>
    1c5e:	a5 9f       	mul	r26, r21
    1c60:	90 0d       	add	r25, r0
    1c62:	b4 9f       	mul	r27, r20
    1c64:	90 0d       	add	r25, r0
    1c66:	a4 9f       	mul	r26, r20
    1c68:	80 0d       	add	r24, r0
    1c6a:	91 1d       	adc	r25, r1
    1c6c:	11 24       	eor	r1, r1
    1c6e:	08 95       	ret

00001c70 <__mulshisi3>:
    1c70:	b7 ff       	sbrs	r27, 7
    1c72:	f4 cf       	rjmp	.-24     	; 0x1c5c <__muluhisi3>

00001c74 <__mulohisi3>:
    1c74:	f3 df       	rcall	.-26     	; 0x1c5c <__muluhisi3>
    1c76:	82 1b       	sub	r24, r18
    1c78:	93 0b       	sbc	r25, r19
    1c7a:	08 95       	ret

00001c7c <__umulhisi3>:
    1c7c:	a2 9f       	mul	r26, r18
    1c7e:	b0 01       	movw	r22, r0
    1c80:	b3 9f       	mul	r27, r19
    1c82:	c0 01       	movw	r24, r0
    1c84:	a3 9f       	mul	r26, r19
    1c86:	70 0d       	add	r23, r0
    1c88:	81 1d       	adc	r24, r1
    1c8a:	11 24       	eor	r1, r1
    1c8c:	91 1d       	adc	r25, r1
    1c8e:	b2 9f       	mul	r27, r18
    1c90:	70 0d       	add	r23, r0
    1c92:	81 1d       	adc	r24, r1
    1c94:	11 24       	eor	r1, r1
    1c96:	91 1d       	adc	r25, r1
    1c98:	08 95       	ret

00001c9a <_exit>:
    1c9a:	f8 94       	cli

00001c9c <__stop_program>:
    1c9c:	ff cf       	rjmp	.-2      	; 0x1c9c <__stop_program>
