
LWM_MSSY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800200  00001cb4  00001d48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cb4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001d90  00800242  00800242  00001d8a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d8a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001dbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000448  00000000  00000000  00001dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000650e  00000000  00000000  00002244  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d35  00000000  00000000  00008752  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002740  00000000  00000000  0000b487  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a34  00000000  00000000  0000dbc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000200e  00000000  00000000  0000e5fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000269c  00000000  00000000  0001060a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000488  00000000  00000000  00012ca6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
       2:	00 00       	nop
       4:	b7 c0       	rjmp	.+366    	; 0x174 <__bad_interrupt>
       6:	00 00       	nop
       8:	b5 c0       	rjmp	.+362    	; 0x174 <__bad_interrupt>
       a:	00 00       	nop
       c:	b3 c0       	rjmp	.+358    	; 0x174 <__bad_interrupt>
       e:	00 00       	nop
      10:	b1 c0       	rjmp	.+354    	; 0x174 <__bad_interrupt>
      12:	00 00       	nop
      14:	af c0       	rjmp	.+350    	; 0x174 <__bad_interrupt>
      16:	00 00       	nop
      18:	ad c0       	rjmp	.+346    	; 0x174 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ab c0       	rjmp	.+342    	; 0x174 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a9 c0       	rjmp	.+338    	; 0x174 <__bad_interrupt>
      22:	00 00       	nop
      24:	a7 c0       	rjmp	.+334    	; 0x174 <__bad_interrupt>
      26:	00 00       	nop
      28:	a5 c0       	rjmp	.+330    	; 0x174 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a3 c0       	rjmp	.+326    	; 0x174 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a1 c0       	rjmp	.+322    	; 0x174 <__bad_interrupt>
      32:	00 00       	nop
      34:	1b c2       	rjmp	.+1078   	; 0x46c <__vector_13>
      36:	00 00       	nop
      38:	9d c0       	rjmp	.+314    	; 0x174 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9b c0       	rjmp	.+310    	; 0x174 <__bad_interrupt>
      3e:	00 00       	nop
      40:	99 c0       	rjmp	.+306    	; 0x174 <__bad_interrupt>
      42:	00 00       	nop
      44:	97 c0       	rjmp	.+302    	; 0x174 <__bad_interrupt>
      46:	00 00       	nop
      48:	95 c0       	rjmp	.+298    	; 0x174 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	93 c0       	rjmp	.+294    	; 0x174 <__bad_interrupt>
      4e:	00 00       	nop
      50:	91 c0       	rjmp	.+290    	; 0x174 <__bad_interrupt>
      52:	00 00       	nop
      54:	8f c0       	rjmp	.+286    	; 0x174 <__bad_interrupt>
      56:	00 00       	nop
      58:	8d c0       	rjmp	.+282    	; 0x174 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8b c0       	rjmp	.+278    	; 0x174 <__bad_interrupt>
      5e:	00 00       	nop
      60:	89 c0       	rjmp	.+274    	; 0x174 <__bad_interrupt>
      62:	00 00       	nop
      64:	87 c0       	rjmp	.+270    	; 0x174 <__bad_interrupt>
      66:	00 00       	nop
      68:	85 c0       	rjmp	.+266    	; 0x174 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	83 c0       	rjmp	.+262    	; 0x174 <__bad_interrupt>
      6e:	00 00       	nop
      70:	81 c0       	rjmp	.+258    	; 0x174 <__bad_interrupt>
      72:	00 00       	nop
      74:	7f c0       	rjmp	.+254    	; 0x174 <__bad_interrupt>
      76:	00 00       	nop
      78:	7d c0       	rjmp	.+250    	; 0x174 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7b c0       	rjmp	.+246    	; 0x174 <__bad_interrupt>
      7e:	00 00       	nop
      80:	79 c0       	rjmp	.+242    	; 0x174 <__bad_interrupt>
      82:	00 00       	nop
      84:	77 c0       	rjmp	.+238    	; 0x174 <__bad_interrupt>
      86:	00 00       	nop
      88:	75 c0       	rjmp	.+234    	; 0x174 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	73 c0       	rjmp	.+230    	; 0x174 <__bad_interrupt>
      8e:	00 00       	nop
      90:	a2 c2       	rjmp	.+1348   	; 0x5d6 <__vector_36>
      92:	00 00       	nop
      94:	84 c2       	rjmp	.+1288   	; 0x59e <__vector_37>
      96:	00 00       	nop
      98:	6d c0       	rjmp	.+218    	; 0x174 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6b c0       	rjmp	.+214    	; 0x174 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	69 c0       	rjmp	.+210    	; 0x174 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	67 c0       	rjmp	.+206    	; 0x174 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d0 c1       	rjmp	.+928    	; 0x44a <__vector_42>
      aa:	00 00       	nop
      ac:	63 c0       	rjmp	.+198    	; 0x174 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	61 c0       	rjmp	.+194    	; 0x174 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5f c0       	rjmp	.+190    	; 0x174 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5d c0       	rjmp	.+186    	; 0x174 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5b c0       	rjmp	.+182    	; 0x174 <__bad_interrupt>
      be:	00 00       	nop
      c0:	59 c0       	rjmp	.+178    	; 0x174 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	57 c0       	rjmp	.+174    	; 0x174 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	55 c0       	rjmp	.+170    	; 0x174 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	53 c0       	rjmp	.+166    	; 0x174 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	51 c0       	rjmp	.+162    	; 0x174 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4f c0       	rjmp	.+158    	; 0x174 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4d c0       	rjmp	.+154    	; 0x174 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4b c0       	rjmp	.+150    	; 0x174 <__bad_interrupt>
      de:	00 00       	nop
      e0:	49 c0       	rjmp	.+146    	; 0x174 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	47 c0       	rjmp	.+142    	; 0x174 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	45 c0       	rjmp	.+138    	; 0x174 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	43 c0       	rjmp	.+134    	; 0x174 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	41 c0       	rjmp	.+130    	; 0x174 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	3f c0       	rjmp	.+126    	; 0x174 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	3d c0       	rjmp	.+122    	; 0x174 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	3b c0       	rjmp	.+118    	; 0x174 <__bad_interrupt>
      fe:	00 00       	nop
     100:	39 c0       	rjmp	.+114    	; 0x174 <__bad_interrupt>
     102:	00 00       	nop
     104:	37 c0       	rjmp	.+110    	; 0x174 <__bad_interrupt>
     106:	00 00       	nop
     108:	35 c0       	rjmp	.+106    	; 0x174 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	33 c0       	rjmp	.+102    	; 0x174 <__bad_interrupt>
     10e:	00 00       	nop
     110:	31 c0       	rjmp	.+98     	; 0x174 <__bad_interrupt>
     112:	00 00       	nop
     114:	2f c0       	rjmp	.+94     	; 0x174 <__bad_interrupt>
     116:	00 00       	nop
     118:	2d c0       	rjmp	.+90     	; 0x174 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2b c0       	rjmp	.+86     	; 0x174 <__bad_interrupt>
     11e:	00 00       	nop
     120:	29 c0       	rjmp	.+82     	; 0x174 <__bad_interrupt>
     122:	00 00       	nop
     124:	27 c0       	rjmp	.+78     	; 0x174 <__bad_interrupt>
     126:	00 00       	nop
     128:	25 c0       	rjmp	.+74     	; 0x174 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	23 c0       	rjmp	.+70     	; 0x174 <__bad_interrupt>
     12e:	00 00       	nop
     130:	21 c0       	rjmp	.+66     	; 0x174 <__bad_interrupt>
	...

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf ef       	ldi	r28, 0xFF	; 255
     13a:	d1 e8       	ldi	r29, 0x81	; 129
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
     144:	12 e0       	ldi	r17, 0x02	; 2
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b2 e0       	ldi	r27, 0x02	; 2
     14a:	e4 eb       	ldi	r30, 0xB4	; 180
     14c:	fc e1       	ldi	r31, 0x1C	; 28
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	0b bf       	out	0x3b, r16	; 59
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
     154:	07 90       	elpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	a2 34       	cpi	r26, 0x42	; 66
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
     15e:	2f e1       	ldi	r18, 0x1F	; 31
     160:	a2 e4       	ldi	r26, 0x42	; 66
     162:	b2 e0       	ldi	r27, 0x02	; 2
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	a2 3d       	cpi	r26, 0xD2	; 210
     16a:	b2 07       	cpc	r27, r18
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	31 d1       	rcall	.+610    	; 0x3d2 <main>
     170:	0c 94 58 0e 	jmp	0x1cb0	; 0x1cb0 <_exit>

00000174 <__bad_interrupt>:
     174:	45 cf       	rjmp	.-374    	; 0x0 <__vectors>

00000176 <APP_dataConf>:
}

void APP_timerHandler(SYS_Timer_t *timer) {
  char test[] = "SYSLOG: timer is being reset";
  for (int i = 0; strlen(test); i++) {
    HAL_UartWriteByte(test[i]);
     176:	08 95       	ret

00000178 <HAL_UartBytesReceived>:

static RouteTable_t routeTable[ROUTE_TABLE_SIZE];
static uint8_t routeTablePtr = 0;
static uint16_t routerAddr = 00;

void HAL_UartBytesReceived(uint16_t bytes) { HAL_UartWriteString(bytes); }
     178:	04 c2       	rjmp	.+1032   	; 0x582 <HAL_UartWriteString>
     17a:	08 95       	ret

0000017c <APP_dataSend>:

void APP_dataSend(AppMsgType_t msgType, uint8_t addr) {
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	1f 92       	push	r1
     182:	cd b7       	in	r28, 0x3d	; 61
     184:	de b7       	in	r29, 0x3e	; 62
     186:	69 83       	std	Y+1, r22	; 0x01
  dataReq.data->msgType = msgType;
     188:	a0 eb       	ldi	r26, 0xB0	; 176
     18a:	b8 e0       	ldi	r27, 0x08	; 8
     18c:	1a 96       	adiw	r26, 0x0a	; 10
     18e:	ed 91       	ld	r30, X+
     190:	fc 91       	ld	r31, X
     192:	1b 97       	sbiw	r26, 0x0b	; 11
     194:	80 83       	st	Z, r24
#if DESIGNATION == 1
  dataReq.dstAddr = routerAddr;
  dataReq.dstEndpoint = APP_ENDPOINT;
  dataReq.srcEndpoint = APP_ENDPOINT;
#else
  RouteTable_t route = routeTable[addr];
     196:	e9 81       	ldd	r30, Y+1	; 0x01
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	9f 01       	movw	r18, r30
     19c:	22 0f       	add	r18, r18
     19e:	33 1f       	adc	r19, r19
     1a0:	e2 0f       	add	r30, r18
     1a2:	f3 1f       	adc	r31, r19
     1a4:	ee 0f       	add	r30, r30
     1a6:	ff 1f       	adc	r31, r31
     1a8:	ed 5b       	subi	r30, 0xBD	; 189
     1aa:	fd 4f       	sbci	r31, 0xFD	; 253
     1ac:	92 81       	ldd	r25, Z+2	; 0x02
  dataReq.dstAddr = route.addr;
     1ae:	20 81       	ld	r18, Z
     1b0:	31 81       	ldd	r19, Z+1	; 0x01
     1b2:	16 96       	adiw	r26, 0x06	; 6
     1b4:	3c 93       	st	X, r19
     1b6:	2e 93       	st	-X, r18
     1b8:	15 97       	sbiw	r26, 0x05	; 5
  dataReq.dstEndpoint = route.endpoint;
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	9c 93       	st	X, r25
     1be:	17 97       	sbiw	r26, 0x07	; 7
  dataReq.srcEndpoint = route.endpoint;
     1c0:	18 96       	adiw	r26, 0x08	; 8
     1c2:	9c 93       	st	X, r25
#endif
  switch (msgType) {
     1c4:	87 30       	cpi	r24, 0x07	; 7
     1c6:	59 f0       	breq	.+22     	; 0x1de <APP_dataSend+0x62>
     1c8:	89 30       	cpi	r24, 0x09	; 9
     1ca:	89 f4       	brne	.+34     	; 0x1ee <APP_dataSend+0x72>
  case OFFER:
    dataReq.data->data = &addr;
     1cc:	e0 91 ba 08 	lds	r30, 0x08BA	; 0x8008ba <dataReq+0xa>
     1d0:	f0 91 bb 08 	lds	r31, 0x08BB	; 0x8008bb <dataReq+0xb>
     1d4:	ce 01       	movw	r24, r28
     1d6:	01 96       	adiw	r24, 0x01	; 1
     1d8:	92 83       	std	Z+2, r25	; 0x02
     1da:	81 83       	std	Z+1, r24	; 0x01
    break;
     1dc:	08 c0       	rjmp	.+16     	; 0x1ee <APP_dataSend+0x72>
  case APPDATA:
    dataReq.data->data = &"data";
     1de:	e0 91 ba 08 	lds	r30, 0x08BA	; 0x8008ba <dataReq+0xa>
     1e2:	f0 91 bb 08 	lds	r31, 0x08BB	; 0x8008bb <dataReq+0xb>
     1e6:	81 e2       	ldi	r24, 0x21	; 33
     1e8:	92 e0       	ldi	r25, 0x02	; 2
     1ea:	92 83       	std	Z+2, r25	; 0x02
     1ec:	81 83       	std	Z+1, r24	; 0x01
    break;
  }
  dataReq.size = sizeof(dataReq.data);
     1ee:	e0 eb       	ldi	r30, 0xB0	; 176
     1f0:	f8 e0       	ldi	r31, 0x08	; 8
     1f2:	82 e0       	ldi	r24, 0x02	; 2
     1f4:	84 87       	std	Z+12, r24	; 0x0c
  dataReq.options = NWK_OPT_ENABLE_SECURITY;
     1f6:	81 87       	std	Z+9, r24	; 0x09
  dataReq.confirm = APP_dataConf;
     1f8:	8b eb       	ldi	r24, 0xBB	; 187
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	96 87       	std	Z+14, r25	; 0x0e
     1fe:	85 87       	std	Z+13, r24	; 0x0d
  NWK_DataReq(&dataReq);
     200:	cf 01       	movw	r24, r30
     202:	dd d2       	rcall	.+1466   	; 0x7be <NWK_DataReq>

  uartBufferPtr = 0;
  dataReqBusy = true;
}
     204:	0f 90       	pop	r0
     206:	df 91       	pop	r29
     208:	cf 91       	pop	r28
     20a:	08 95       	ret

0000020c <APP_pushAddr>:
 * Should only be called when the server offers the config,
 * on accept from client, the in_use flag needs to be set,
 * otherwise the server will rewrite the entry on next pass.
 * The route table has 65535 entries
 */
uint16_t APP_pushAddr(uint8_t endpoint, uint8_t *data) {
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	48 2f       	mov	r20, r24
  if (routeTable[routeTablePtr].in_use) {
     212:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <__data_end>
     216:	29 2f       	mov	r18, r25
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	f9 01       	movw	r30, r18
     21c:	ee 0f       	add	r30, r30
     21e:	ff 1f       	adc	r31, r31
     220:	e2 0f       	add	r30, r18
     222:	f3 1f       	adc	r31, r19
     224:	ee 0f       	add	r30, r30
     226:	ff 1f       	adc	r31, r31
     228:	ed 5b       	subi	r30, 0xBD	; 189
     22a:	fd 4f       	sbci	r31, 0xFD	; 253
     22c:	85 81       	ldd	r24, Z+5	; 0x05
     22e:	88 23       	and	r24, r24
     230:	31 f0       	breq	.+12     	; 0x23e <APP_pushAddr+0x32>
     232:	84 2f       	mov	r24, r20
    routeTablePtr++;
     234:	9f 5f       	subi	r25, 0xFF	; 255
     236:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <__data_end>
    return APP_pushAddr(endpoint, data);
     23a:	e8 df       	rcall	.-48     	; 0x20c <APP_pushAddr>
     23c:	1c c0       	rjmp	.+56     	; 0x276 <APP_pushAddr+0x6a>
  }

  routeTable[routeTablePtr].addr = routeTablePtr;
     23e:	89 2f       	mov	r24, r25
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	f9 01       	movw	r30, r18
     244:	ee 0f       	add	r30, r30
     246:	ff 1f       	adc	r31, r31
     248:	df 01       	movw	r26, r30
     24a:	a2 0f       	add	r26, r18
     24c:	b3 1f       	adc	r27, r19
     24e:	aa 0f       	add	r26, r26
     250:	bb 1f       	adc	r27, r27
     252:	ad 5b       	subi	r26, 0xBD	; 189
     254:	bd 4f       	sbci	r27, 0xFD	; 253
     256:	11 96       	adiw	r26, 0x01	; 1
     258:	9c 93       	st	X, r25
     25a:	8e 93       	st	-X, r24
  routeTable[routeTablePtr].endpoint = endpoint;
     25c:	12 96       	adiw	r26, 0x02	; 2
     25e:	4c 93       	st	X, r20
     260:	12 97       	sbiw	r26, 0x02	; 2
  routeTable[routeTablePtr].sleeping = false;
     262:	14 96       	adiw	r26, 0x04	; 4
     264:	1c 92       	st	X, r1
     266:	14 97       	sbiw	r26, 0x04	; 4
  routeTable[routeTablePtr].type = (SensorType_t)(*data);
     268:	eb 01       	movw	r28, r22
     26a:	48 81       	ld	r20, Y
     26c:	13 96       	adiw	r26, 0x03	; 3
     26e:	4c 93       	st	X, r20
     270:	13 97       	sbiw	r26, 0x03	; 3
  // in_use only goes active on APP_ACK from client
  routeTable[routeTablePtr].in_use = false;
     272:	fd 01       	movw	r30, r26
     274:	15 82       	std	Z+5, r1	; 0x05
  return routeTablePtr;
}
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	08 95       	ret

0000027c <APP_dataRecv>:

bool APP_dataRecv(NWK_DataInd_t *ind) {
     27c:	ef 92       	push	r14
     27e:	ff 92       	push	r15
     280:	0f 93       	push	r16
     282:	1f 93       	push	r17
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
     288:	8c 01       	movw	r16, r24
  AppMsg_t *recv = (AppMsg_t *)ind->data;
     28a:	dc 01       	movw	r26, r24
     28c:	17 96       	adiw	r26, 0x07	; 7
     28e:	ed 90       	ld	r14, X+
     290:	fc 90       	ld	r15, X
     292:	18 97       	sbiw	r26, 0x08	; 8
     */
    APP_dataSend(APPDATA, ind->srcAddr);
    break;
  }
#else if DESIGNATION == 0 // server
  switch (recv->msgType) {
     294:	f7 01       	movw	r30, r14
     296:	80 81       	ld	r24, Z
     298:	84 30       	cpi	r24, 0x04	; 4
     29a:	09 f4       	brne	.+2      	; 0x29e <APP_dataRecv+0x22>
     29c:	60 c0       	rjmp	.+192    	; 0x35e <APP_dataRecv+0xe2>
     29e:	20 f4       	brcc	.+8      	; 0x2a8 <APP_dataRecv+0x2c>
     2a0:	82 30       	cpi	r24, 0x02	; 2
     2a2:	08 f0       	brcs	.+2      	; 0x2a6 <APP_dataRecv+0x2a>
     2a4:	4b c0       	rjmp	.+150    	; 0x33c <APP_dataRecv+0xc0>
     2a6:	75 c0       	rjmp	.+234    	; 0x392 <APP_dataRecv+0x116>
     2a8:	86 30       	cpi	r24, 0x06	; 6
     2aa:	d1 f1       	breq	.+116    	; 0x320 <APP_dataRecv+0xa4>
     2ac:	50 f1       	brcs	.+84     	; 0x302 <APP_dataRecv+0x86>
     2ae:	87 30       	cpi	r24, 0x07	; 7
     2b0:	09 f0       	breq	.+2      	; 0x2b4 <APP_dataRecv+0x38>
     2b2:	6f c0       	rjmp	.+222    	; 0x392 <APP_dataRecv+0x116>
  case APPDATA:
    routeTable[ind->srcAddr].sleeping = true;
     2b4:	d8 01       	movw	r26, r16
     2b6:	8d 91       	ld	r24, X+
     2b8:	9c 91       	ld	r25, X
     2ba:	11 97       	sbiw	r26, 0x01	; 1
     2bc:	fc 01       	movw	r30, r24
     2be:	ee 0f       	add	r30, r30
     2c0:	ff 1f       	adc	r31, r31
     2c2:	e8 0f       	add	r30, r24
     2c4:	f9 1f       	adc	r31, r25
     2c6:	ee 0f       	add	r30, r30
     2c8:	ff 1f       	adc	r31, r31
     2ca:	ed 5b       	subi	r30, 0xBD	; 189
     2cc:	fd 4f       	sbci	r31, 0xFD	; 253
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	84 83       	std	Z+4, r24	; 0x04
    /*
     * Place to handle receiving data from clients.
     */
    for (int i = 0; i < ind->size; i++) {
     2d2:	19 96       	adiw	r26, 0x09	; 9
     2d4:	8c 91       	ld	r24, X
     2d6:	88 23       	and	r24, r24
     2d8:	09 f4       	brne	.+2      	; 0x2dc <APP_dataRecv+0x60>
     2da:	5c c0       	rjmp	.+184    	; 0x394 <APP_dataRecv+0x118>
     2dc:	c0 e0       	ldi	r28, 0x00	; 0
     2de:	d0 e0       	ldi	r29, 0x00	; 0
      HAL_UartWriteByte(recv->data[i]);
     2e0:	d7 01       	movw	r26, r14
     2e2:	11 96       	adiw	r26, 0x01	; 1
     2e4:	ed 91       	ld	r30, X+
     2e6:	fc 91       	ld	r31, X
     2e8:	12 97       	sbiw	r26, 0x02	; 2
     2ea:	ec 0f       	add	r30, r28
     2ec:	fd 1f       	adc	r31, r29
     2ee:	80 81       	ld	r24, Z
     2f0:	21 d1       	rcall	.+578    	; 0x534 <HAL_UartWriteByte>
  case APPDATA:
    routeTable[ind->srcAddr].sleeping = true;
    /*
     * Place to handle receiving data from clients.
     */
    for (int i = 0; i < ind->size; i++) {
     2f2:	21 96       	adiw	r28, 0x01	; 1
     2f4:	f8 01       	movw	r30, r16
     2f6:	81 85       	ldd	r24, Z+9	; 0x09
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	c8 17       	cp	r28, r24
     2fc:	d9 07       	cpc	r29, r25
     2fe:	84 f3       	brlt	.-32     	; 0x2e0 <APP_dataRecv+0x64>
     300:	49 c0       	rjmp	.+146    	; 0x394 <APP_dataRecv+0x118>
      HAL_UartWriteByte(recv->data[i]);
    }
    break;
  case APP_SLEEP:
    routeTable[ind->srcAddr].sleeping = true;
     302:	d8 01       	movw	r26, r16
     304:	8d 91       	ld	r24, X+
     306:	9c 91       	ld	r25, X
     308:	fc 01       	movw	r30, r24
     30a:	ee 0f       	add	r30, r30
     30c:	ff 1f       	adc	r31, r31
     30e:	e8 0f       	add	r30, r24
     310:	f9 1f       	adc	r31, r25
     312:	ee 0f       	add	r30, r30
     314:	ff 1f       	adc	r31, r31
     316:	ed 5b       	subi	r30, 0xBD	; 189
     318:	fd 4f       	sbci	r31, 0xFD	; 253
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	84 83       	std	Z+4, r24	; 0x04
    break;
     31e:	3a c0       	rjmp	.+116    	; 0x394 <APP_dataRecv+0x118>
  case RECONNECT:
    routeTable[ind->srcAddr].sleeping = false;
     320:	f8 01       	movw	r30, r16
     322:	80 81       	ld	r24, Z
     324:	91 81       	ldd	r25, Z+1	; 0x01
     326:	fc 01       	movw	r30, r24
     328:	ee 0f       	add	r30, r30
     32a:	ff 1f       	adc	r31, r31
     32c:	e8 0f       	add	r30, r24
     32e:	f9 1f       	adc	r31, r25
     330:	ee 0f       	add	r30, r30
     332:	ff 1f       	adc	r31, r31
     334:	ed 5b       	subi	r30, 0xBD	; 189
     336:	fd 4f       	sbci	r31, 0xFD	; 253
     338:	14 82       	std	Z+4, r1	; 0x04
    break;
     33a:	2c c0       	rjmp	.+88     	; 0x394 <APP_dataRecv+0x118>
     * not evil.
     * Also, I presume that clients will not
     * request new adresses once they receive
     * one.
     */
     routeTablePtr++;
     33c:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__data_end>
     340:	8f 5f       	subi	r24, 0xFF	; 255
     342:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__data_end>
     routeTablePtr = APP_pushAddr(ind->srcEndpoint, ind->data);
     346:	b7 01       	movw	r22, r14
     348:	d8 01       	movw	r26, r16
     34a:	14 96       	adiw	r26, 0x04	; 4
     34c:	8c 91       	ld	r24, X
     34e:	5e df       	rcall	.-324    	; 0x20c <APP_pushAddr>
     350:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__data_end>
    APP_dataSend(OFFER, ind->srcAddr);
     354:	f8 01       	movw	r30, r16
     356:	60 81       	ld	r22, Z
     358:	89 e0       	ldi	r24, 0x09	; 9
     35a:	10 df       	rcall	.-480    	; 0x17c <APP_dataSend>
    break;
     35c:	1b c0       	rjmp	.+54     	; 0x394 <APP_dataRecv+0x118>
     * Therefore, it is presumed the REQUEST message
     * will be sent with the server-assigned adress,
     * so the server can set their adress as in use
     * in the routing table.
     */
    routeTable[ind->srcAddr].in_use = true;
     35e:	d8 01       	movw	r26, r16
     360:	8d 91       	ld	r24, X+
     362:	9c 91       	ld	r25, X
     364:	fc 01       	movw	r30, r24
     366:	ee 0f       	add	r30, r30
     368:	ff 1f       	adc	r31, r31
     36a:	e8 0f       	add	r30, r24
     36c:	f9 1f       	adc	r31, r25
     36e:	ee 0f       	add	r30, r30
     370:	ff 1f       	adc	r31, r31
     372:	ed 5b       	subi	r30, 0xBD	; 189
     374:	fd 4f       	sbci	r31, 0xFD	; 253
     376:	81 e0       	ldi	r24, 0x01	; 1
    HAL_UartWriteString("Accepted client on addr.: ");
     378:	85 83       	std	Z+5, r24	; 0x05
     37a:	86 e2       	ldi	r24, 0x26	; 38
     37c:	92 e0       	ldi	r25, 0x02	; 2
    HAL_UartWriteString(ind->srcAddr);
     37e:	01 d1       	rcall	.+514    	; 0x582 <HAL_UartWriteString>
     380:	f8 01       	movw	r30, r16
     382:	80 81       	ld	r24, Z
     384:	91 81       	ldd	r25, Z+1	; 0x01
    APP_dataSend(APP_ACK, ind->srcAddr);
     386:	fd d0       	rcall	.+506    	; 0x582 <HAL_UartWriteString>
     388:	d8 01       	movw	r26, r16
     38a:	6c 91       	ld	r22, X
     38c:	81 e0       	ldi	r24, 0x01	; 1
    break;
     38e:	f6 de       	rcall	.-532    	; 0x17c <APP_dataSend>
  default:
    // HAL_UartWriteString("Unknown msg type: ");
    HAL_UartWriteByte(recv->msgType);
     390:	01 c0       	rjmp	.+2      	; 0x394 <APP_dataRecv+0x118>
     392:	d0 d0       	rcall	.+416    	; 0x534 <HAL_UartWriteByte>
    break;
  }
#endif

  return true;
}
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	1f 91       	pop	r17
     39c:	0f 91       	pop	r16
     39e:	ff 90       	pop	r15
     3a0:	ef 90       	pop	r14
     3a2:	08 95       	ret

000003a4 <APP_init>:
  }
  (void)timer;
}

void APP_init(void) {
  NWK_SetAddr(APP_ADDR);
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	c7 d1       	rcall	.+910    	; 0x738 <NWK_SetAddr>
  NWK_SetPanId(APP_PANID);
     3aa:	80 e8       	ldi	r24, 0x80	; 128
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	cb d1       	rcall	.+918    	; 0x746 <NWK_SetPanId>
  PHY_SetChannel(APP_CHANNEL);
     3b0:	8f e0       	ldi	r24, 0x0F	; 15
     3b2:	0e 94 c7 0b 	call	0x178e	; 0x178e <PHY_SetChannel>
  PHY_SetRxState(true);
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	0e 94 c3 0b 	call	0x1786	; 0x1786 <PHY_SetRxState>

  NWK_OpenEndpoint(APP_ENDPOINT, APP_dataRecv);
     3bc:	6e e3       	ldi	r22, 0x3E	; 62
     3be:	71 e0       	ldi	r23, 0x01	; 1
     3c0:	83 e0       	ldi	r24, 0x03	; 3
     3c2:	c8 d1       	rcall	.+912    	; 0x754 <NWK_OpenEndpoint>
  HAL_BoardInit();

  timer.interval = APP_FLUSH_TIMER_INTERVAL;
  timer.mode = SYS_TIMER_INTERVAL_MODE;
  timer.handler = APP_timerHandler;
  dataReq.data = dataReqBuffer;
     3c4:	83 e4       	ldi	r24, 0x43	; 67
     3c6:	98 e0       	ldi	r25, 0x08	; 8
     3c8:	90 93 bb 08 	sts	0x08BB, r25	; 0x8008bb <dataReq+0xb>
     3cc:	80 93 ba 08 	sts	0x08BA, r24	; 0x8008ba <dataReq+0xa>
     3d0:	08 95       	ret

000003d2 <main>:
		break;
	}
}

int main(void) {
	SYS_Init();
     3d2:	0e 94 98 0c 	call	0x1930	; 0x1930 <SYS_Init>
	HAL_UartInit(38400);
     3d6:	60 e0       	ldi	r22, 0x00	; 0
     3d8:	76 e9       	ldi	r23, 0x96	; 150
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	55 d0       	rcall	.+170    	; 0x48a <HAL_UartInit>

static void APP_TaskHandler(void) {
	switch (appState) {
		case INIT: {
			APP_init();
			appState = IDLE;
     3e0:	c1 e0       	ldi	r28, 0x01	; 1
int main(void) {
	SYS_Init();
	HAL_UartInit(38400);

	while (1) {
		SYS_TaskHandler();
     3e2:	0e 94 9f 0c 	call	0x193e	; 0x193e <SYS_TaskHandler>
		HAL_UartTaskHandler();
     3e6:	4e d1       	rcall	.+668    	; 0x684 <HAL_UartTaskHandler>
#include "sys.h"

static AppState_t appState;

static void APP_TaskHandler(void) {
	switch (appState) {
     3e8:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <appState>
     3ec:	81 11       	cpse	r24, r1
		case INIT: {
			APP_init();
     3ee:	f9 cf       	rjmp	.-14     	; 0x3e2 <main+0x10>
     3f0:	d9 df       	rcall	.-78     	; 0x3a4 <APP_init>
			appState = IDLE;
     3f2:	c0 93 c1 08 	sts	0x08C1, r28	; 0x8008c1 <appState>
     3f6:	f5 cf       	rjmp	.-22     	; 0x3e2 <main+0x10>

000003f8 <HAL_Init>:
     3f8:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	f8 94       	cli
     3fe:	a8 95       	wdr
     400:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     404:	88 61       	ori	r24, 0x18	; 24
     406:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     40a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     40e:	0f be       	out	0x3f, r0	; 63
     410:	e1 e6       	ldi	r30, 0x61	; 97
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	80 e8       	ldi	r24, 0x80	; 128
     416:	80 83       	st	Z, r24
     418:	10 82       	st	Z, r1
     41a:	78 94       	sei
     41c:	01 c0       	rjmp	.+2      	; 0x420 <HAL_TimerInit>
     41e:	08 95       	ret

00000420 <HAL_TimerInit>:
     420:	10 92 a9 1f 	sts	0x1FA9, r1	; 0x801fa9 <halTimerIrqCount>
     424:	80 e1       	ldi	r24, 0x10	; 16
     426:	97 e2       	ldi	r25, 0x27	; 39
     428:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
     42c:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
     430:	e1 ea       	ldi	r30, 0xA1	; 161
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	88 e0       	ldi	r24, 0x08	; 8
     436:	80 83       	st	Z, r24
     438:	80 81       	ld	r24, Z
     43a:	82 60       	ori	r24, 0x02	; 2
     43c:	80 83       	st	Z, r24
     43e:	e2 e7       	ldi	r30, 0x72	; 114
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	80 81       	ld	r24, Z
     444:	82 60       	ori	r24, 0x02	; 2
     446:	80 83       	st	Z, r24
     448:	08 95       	ret

0000044a <__vector_42>:
     44a:	1f 92       	push	r1
     44c:	0f 92       	push	r0
     44e:	0f b6       	in	r0, 0x3f	; 63
     450:	0f 92       	push	r0
     452:	11 24       	eor	r1, r1
     454:	8f 93       	push	r24
     456:	80 91 a9 1f 	lds	r24, 0x1FA9	; 0x801fa9 <halTimerIrqCount>
     45a:	8f 5f       	subi	r24, 0xFF	; 255
     45c:	80 93 a9 1f 	sts	0x1FA9, r24	; 0x801fa9 <halTimerIrqCount>
     460:	8f 91       	pop	r24
     462:	0f 90       	pop	r0
     464:	0f be       	out	0x3f, r0	; 63
     466:	0f 90       	pop	r0
     468:	1f 90       	pop	r1
     46a:	18 95       	reti

0000046c <__vector_13>:
     46c:	1f 92       	push	r1
     46e:	0f 92       	push	r0
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	0f 92       	push	r0
     474:	11 24       	eor	r1, r1
     476:	8f 93       	push	r24
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	80 93 c2 08 	sts	0x08C2, r24	; 0x8008c2 <halSleepTimerEvent>
     47e:	8f 91       	pop	r24
     480:	0f 90       	pop	r0
     482:	0f be       	out	0x3f, r0	; 63
     484:	0f 90       	pop	r0
     486:	1f 90       	pop	r1
     488:	18 95       	reti

0000048a <HAL_UartInit>:
    rxFifo.bytes--;
  ATOMIC_SECTION_LEAVE
  PRAGMA(diag_default=Pa082);

  return byte;
}
     48a:	dc 01       	movw	r26, r24
     48c:	cb 01       	movw	r24, r22
     48e:	88 0f       	add	r24, r24
     490:	99 1f       	adc	r25, r25
     492:	aa 1f       	adc	r26, r26
     494:	bb 1f       	adc	r27, r27
     496:	88 0f       	add	r24, r24
     498:	99 1f       	adc	r25, r25
     49a:	aa 1f       	adc	r26, r26
     49c:	bb 1f       	adc	r27, r27
     49e:	9c 01       	movw	r18, r24
     4a0:	ad 01       	movw	r20, r26
     4a2:	22 0f       	add	r18, r18
     4a4:	33 1f       	adc	r19, r19
     4a6:	44 1f       	adc	r20, r20
     4a8:	55 1f       	adc	r21, r21
     4aa:	22 0f       	add	r18, r18
     4ac:	33 1f       	adc	r19, r19
     4ae:	44 1f       	adc	r20, r20
     4b0:	55 1f       	adc	r21, r21
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	74 e2       	ldi	r23, 0x24	; 36
     4b6:	84 ef       	ldi	r24, 0xF4	; 244
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__udivmodsi4>
     4be:	ba 01       	movw	r22, r20
     4c0:	a9 01       	movw	r20, r18
     4c2:	41 50       	subi	r20, 0x01	; 1
     4c4:	51 09       	sbc	r21, r1
     4c6:	61 09       	sbc	r22, r1
     4c8:	71 09       	sbc	r23, r1
     4ca:	bb 27       	eor	r27, r27
     4cc:	a7 2f       	mov	r26, r23
     4ce:	96 2f       	mov	r25, r22
     4d0:	85 2f       	mov	r24, r21
     4d2:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
     4d6:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
     4da:	82 e0       	ldi	r24, 0x02	; 2
     4dc:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
     4e0:	88 e9       	ldi	r24, 0x98	; 152
     4e2:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
     4e6:	86 e0       	ldi	r24, 0x06	; 6
     4e8:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>
     4ec:	e1 ef       	ldi	r30, 0xF1	; 241
     4ee:	fb e0       	ldi	r31, 0x0B	; 11
     4f0:	80 e6       	ldi	r24, 0x60	; 96
     4f2:	9a e0       	ldi	r25, 0x0A	; 10
     4f4:	91 87       	std	Z+9, r25	; 0x09
     4f6:	80 87       	std	Z+8, r24	; 0x08
     4f8:	80 e9       	ldi	r24, 0x90	; 144
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	95 83       	std	Z+5, r25	; 0x05
     4fe:	84 83       	std	Z+4, r24	; 0x04
     500:	17 82       	std	Z+7, r1	; 0x07
     502:	16 82       	std	Z+6, r1	; 0x06
     504:	11 82       	std	Z+1, r1	; 0x01
     506:	10 82       	st	Z, r1
     508:	13 82       	std	Z+3, r1	; 0x03
     50a:	12 82       	std	Z+2, r1	; 0x02
     50c:	e6 e5       	ldi	r30, 0x56	; 86
     50e:	fa e0       	ldi	r31, 0x0A	; 10
     510:	25 ec       	ldi	r18, 0xC5	; 197
     512:	38 e0       	ldi	r19, 0x08	; 8
     514:	31 87       	std	Z+9, r19	; 0x09
     516:	20 87       	std	Z+8, r18	; 0x08
     518:	95 83       	std	Z+5, r25	; 0x05
     51a:	84 83       	std	Z+4, r24	; 0x04
     51c:	17 82       	std	Z+7, r1	; 0x07
     51e:	16 82       	std	Z+6, r1	; 0x06
     520:	11 82       	std	Z+1, r1	; 0x01
     522:	10 82       	st	Z, r1
     524:	13 82       	std	Z+3, r1	; 0x03
     526:	12 82       	std	Z+2, r1	; 0x02
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <udrEmpty>
     52e:	10 92 c3 08 	sts	0x08C3, r1	; 0x8008c3 <newData>
     532:	08 95       	ret

00000534 <HAL_UartWriteByte>:
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	e1 ef       	ldi	r30, 0xF1	; 241
     53a:	fb e0       	ldi	r31, 0x0B	; 11
     53c:	26 81       	ldd	r18, Z+6	; 0x06
     53e:	37 81       	ldd	r19, Z+7	; 0x07
     540:	64 81       	ldd	r22, Z+4	; 0x04
     542:	75 81       	ldd	r23, Z+5	; 0x05
     544:	26 17       	cp	r18, r22
     546:	37 07       	cpc	r19, r23
     548:	c9 f0       	breq	.+50     	; 0x57c <HAL_UartWriteByte+0x48>
     54a:	c0 85       	ldd	r28, Z+8	; 0x08
     54c:	d1 85       	ldd	r29, Z+9	; 0x09
     54e:	42 81       	ldd	r20, Z+2	; 0x02
     550:	53 81       	ldd	r21, Z+3	; 0x03
     552:	da 01       	movw	r26, r20
     554:	11 96       	adiw	r26, 0x01	; 1
     556:	b3 83       	std	Z+3, r27	; 0x03
     558:	a2 83       	std	Z+2, r26	; 0x02
     55a:	fe 01       	movw	r30, r28
     55c:	e4 0f       	add	r30, r20
     55e:	f5 1f       	adc	r31, r21
     560:	80 83       	st	Z, r24
     562:	6a 17       	cp	r22, r26
     564:	7b 07       	cpc	r23, r27
     566:	21 f4       	brne	.+8      	; 0x570 <HAL_UartWriteByte+0x3c>
     568:	10 92 f4 0b 	sts	0x0BF4, r1	; 0x800bf4 <txFifo+0x3>
     56c:	10 92 f3 0b 	sts	0x0BF3, r1	; 0x800bf3 <txFifo+0x2>
     570:	2f 5f       	subi	r18, 0xFF	; 255
     572:	3f 4f       	sbci	r19, 0xFF	; 255
     574:	30 93 f8 0b 	sts	0x0BF8, r19	; 0x800bf8 <txFifo+0x7>
     578:	20 93 f7 0b 	sts	0x0BF7, r18	; 0x800bf7 <txFifo+0x6>
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	08 95       	ret

00000582 <HAL_UartWriteString>:
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	ec 01       	movw	r28, r24
     588:	88 81       	ld	r24, Y
     58a:	88 23       	and	r24, r24
     58c:	29 f0       	breq	.+10     	; 0x598 <HAL_UartWriteString+0x16>
     58e:	21 96       	adiw	r28, 0x01	; 1
     590:	d1 df       	rcall	.-94     	; 0x534 <HAL_UartWriteByte>
     592:	89 91       	ld	r24, Y+
     594:	81 11       	cpse	r24, r1
     596:	fc cf       	rjmp	.-8      	; 0x590 <HAL_UartWriteString+0xe>
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	08 95       	ret

0000059e <__vector_37>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
     59e:	1f 92       	push	r1
     5a0:	0f 92       	push	r0
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	0f 92       	push	r0
     5a6:	11 24       	eor	r1, r1
     5a8:	0b b6       	in	r0, 0x3b	; 59
     5aa:	0f 92       	push	r0
     5ac:	8f 93       	push	r24
     5ae:	ef 93       	push	r30
     5b0:	ff 93       	push	r31
  udrEmpty = true;
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <udrEmpty>
  UCSRxB &= ~(1 << UDRIE1);
     5b8:	e9 ec       	ldi	r30, 0xC9	; 201
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	80 81       	ld	r24, Z
     5be:	8f 7d       	andi	r24, 0xDF	; 223
     5c0:	80 83       	st	Z, r24
}
     5c2:	ff 91       	pop	r31
     5c4:	ef 91       	pop	r30
     5c6:	8f 91       	pop	r24
     5c8:	0f 90       	pop	r0
     5ca:	0b be       	out	0x3b, r0	; 59
     5cc:	0f 90       	pop	r0
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	0f 90       	pop	r0
     5d2:	1f 90       	pop	r1
     5d4:	18 95       	reti

000005d6 <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
     5d6:	1f 92       	push	r1
     5d8:	0f 92       	push	r0
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	0f 92       	push	r0
     5de:	11 24       	eor	r1, r1
     5e0:	0b b6       	in	r0, 0x3b	; 59
     5e2:	0f 92       	push	r0
     5e4:	2f 93       	push	r18
     5e6:	3f 93       	push	r19
     5e8:	4f 93       	push	r20
     5ea:	5f 93       	push	r21
     5ec:	6f 93       	push	r22
     5ee:	7f 93       	push	r23
     5f0:	8f 93       	push	r24
     5f2:	9f 93       	push	r25
     5f4:	af 93       	push	r26
     5f6:	bf 93       	push	r27
     5f8:	ef 93       	push	r30
     5fa:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
     5fc:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  uint8_t byte = UDRx;
     600:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
     604:	8c 71       	andi	r24, 0x1C	; 28
     606:	59 f5       	brne	.+86     	; 0x65e <__vector_36+0x88>
  {
    if (rxFifo.bytes == rxFifo.size)
     608:	e6 e5       	ldi	r30, 0x56	; 86
     60a:	fa e0       	ldi	r31, 0x0A	; 10
     60c:	46 81       	ldd	r20, Z+6	; 0x06
     60e:	57 81       	ldd	r21, Z+7	; 0x07
     610:	84 81       	ldd	r24, Z+4	; 0x04
     612:	95 81       	ldd	r25, Z+5	; 0x05
     614:	48 17       	cp	r20, r24
     616:	59 07       	cpc	r21, r25
     618:	11 f1       	breq	.+68     	; 0x65e <__vector_36+0x88>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
     61a:	40 85       	ldd	r20, Z+8	; 0x08
     61c:	51 85       	ldd	r21, Z+9	; 0x09
     61e:	82 81       	ldd	r24, Z+2	; 0x02
     620:	93 81       	ldd	r25, Z+3	; 0x03
     622:	bc 01       	movw	r22, r24
     624:	6f 5f       	subi	r22, 0xFF	; 255
     626:	7f 4f       	sbci	r23, 0xFF	; 255
     628:	73 83       	std	Z+3, r23	; 0x03
     62a:	62 83       	std	Z+2, r22	; 0x02
     62c:	da 01       	movw	r26, r20
     62e:	a8 0f       	add	r26, r24
     630:	b9 1f       	adc	r27, r25
     632:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
     634:	22 81       	ldd	r18, Z+2	; 0x02
     636:	33 81       	ldd	r19, Z+3	; 0x03
     638:	84 81       	ldd	r24, Z+4	; 0x04
     63a:	95 81       	ldd	r25, Z+5	; 0x05
     63c:	28 17       	cp	r18, r24
     63e:	39 07       	cpc	r19, r25
     640:	21 f4       	brne	.+8      	; 0x64a <__vector_36+0x74>
      rxFifo.tail = 0;
     642:	10 92 59 0a 	sts	0x0A59, r1	; 0x800a59 <rxFifo+0x3>
     646:	10 92 58 0a 	sts	0x0A58, r1	; 0x800a58 <rxFifo+0x2>
    rxFifo.bytes++;
     64a:	e6 e5       	ldi	r30, 0x56	; 86
     64c:	fa e0       	ldi	r31, 0x0A	; 10
     64e:	86 81       	ldd	r24, Z+6	; 0x06
     650:	97 81       	ldd	r25, Z+7	; 0x07
     652:	01 96       	adiw	r24, 0x01	; 1
     654:	97 83       	std	Z+7, r25	; 0x07
     656:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <newData>
  }

  PRAGMA(diag_default=Pa082);
}
     65e:	ff 91       	pop	r31
     660:	ef 91       	pop	r30
     662:	bf 91       	pop	r27
     664:	af 91       	pop	r26
     666:	9f 91       	pop	r25
     668:	8f 91       	pop	r24
     66a:	7f 91       	pop	r23
     66c:	6f 91       	pop	r22
     66e:	5f 91       	pop	r21
     670:	4f 91       	pop	r20
     672:	3f 91       	pop	r19
     674:	2f 91       	pop	r18
     676:	0f 90       	pop	r0
     678:	0b be       	out	0x3b, r0	; 59
     67a:	0f 90       	pop	r0
     67c:	0f be       	out	0x3f, r0	; 63
     67e:	0f 90       	pop	r0
     680:	1f 90       	pop	r1
     682:	18 95       	reti

00000684 <HAL_UartTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
  if (txFifo.bytes && udrEmpty)
     684:	80 91 f7 0b 	lds	r24, 0x0BF7	; 0x800bf7 <txFifo+0x6>
     688:	90 91 f8 0b 	lds	r25, 0x0BF8	; 0x800bf8 <txFifo+0x7>
     68c:	00 97       	sbiw	r24, 0x00	; 0
     68e:	69 f1       	breq	.+90     	; 0x6ea <HAL_UartTaskHandler+0x66>
     690:	20 91 c4 08 	lds	r18, 0x08C4	; 0x8008c4 <udrEmpty>
     694:	22 23       	and	r18, r18
     696:	49 f1       	breq	.+82     	; 0x6ea <HAL_UartTaskHandler+0x66>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
     698:	e1 ef       	ldi	r30, 0xF1	; 241
     69a:	fb e0       	ldi	r31, 0x0B	; 11
     69c:	60 85       	ldd	r22, Z+8	; 0x08
     69e:	71 85       	ldd	r23, Z+9	; 0x09
     6a0:	20 81       	ld	r18, Z
     6a2:	31 81       	ldd	r19, Z+1	; 0x01
     6a4:	a9 01       	movw	r20, r18
     6a6:	4f 5f       	subi	r20, 0xFF	; 255
     6a8:	5f 4f       	sbci	r21, 0xFF	; 255
     6aa:	51 83       	std	Z+1, r21	; 0x01
     6ac:	40 83       	st	Z, r20
     6ae:	db 01       	movw	r26, r22
     6b0:	a2 0f       	add	r26, r18
     6b2:	b3 1f       	adc	r27, r19
     6b4:	2c 91       	ld	r18, X
    if (txFifo.head == txFifo.size)
     6b6:	64 81       	ldd	r22, Z+4	; 0x04
     6b8:	75 81       	ldd	r23, Z+5	; 0x05
     6ba:	46 17       	cp	r20, r22
     6bc:	57 07       	cpc	r21, r23
     6be:	21 f4       	brne	.+8      	; 0x6c8 <HAL_UartTaskHandler+0x44>
      txFifo.head = 0;
     6c0:	10 92 f2 0b 	sts	0x0BF2, r1	; 0x800bf2 <txFifo+0x1>
     6c4:	10 92 f1 0b 	sts	0x0BF1, r1	; 0x800bf1 <txFifo>
    txFifo.bytes--;
     6c8:	01 97       	sbiw	r24, 0x01	; 1
     6ca:	90 93 f8 0b 	sts	0x0BF8, r25	; 0x800bf8 <txFifo+0x7>
     6ce:	80 93 f7 0b 	sts	0x0BF7, r24	; 0x800bf7 <txFifo+0x6>

    ATOMIC_SECTION_ENTER
     6d2:	9f b7       	in	r25, 0x3f	; 63
     6d4:	f8 94       	cli
      UDRx = byte;
     6d6:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
      UCSRxB |= (1 << UDRIE1);
     6da:	e9 ec       	ldi	r30, 0xC9	; 201
     6dc:	f0 e0       	ldi	r31, 0x00	; 0
     6de:	80 81       	ld	r24, Z
     6e0:	80 62       	ori	r24, 0x20	; 32
     6e2:	80 83       	st	Z, r24
      udrEmpty = false;
     6e4:	10 92 c4 08 	sts	0x08C4, r1	; 0x8008c4 <udrEmpty>
    ATOMIC_SECTION_LEAVE
     6e8:	9f bf       	out	0x3f, r25	; 63

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
     6ea:	2f b7       	in	r18, 0x3f	; 63
     6ec:	f8 94       	cli
      new = newData;
     6ee:	90 91 c3 08 	lds	r25, 0x08C3	; 0x8008c3 <newData>
      newData = false;
     6f2:	10 92 c3 08 	sts	0x08C3, r1	; 0x8008c3 <newData>
      bytes = rxFifo.bytes;
     6f6:	40 91 5c 0a 	lds	r20, 0x0A5C	; 0x800a5c <rxFifo+0x6>
     6fa:	50 91 5d 0a 	lds	r21, 0x0A5D	; 0x800a5d <rxFifo+0x7>
    ATOMIC_SECTION_LEAVE
     6fe:	2f bf       	out	0x3f, r18	; 63

    if (new)
     700:	99 23       	and	r25, r25
     702:	11 f0       	breq	.+4      	; 0x708 <HAL_UartTaskHandler+0x84>
      HAL_UartBytesReceived(bytes);
     704:	ca 01       	movw	r24, r20
     706:	38 cd       	rjmp	.-1424   	; 0x178 <HAL_UartBytesReceived>
     708:	08 95       	ret

0000070a <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
     70a:	ea ea       	ldi	r30, 0xAA	; 170
     70c:	ff e1       	ldi	r31, 0x1F	; 31
     70e:	14 82       	std	Z+4, r1	; 0x04
     710:	15 82       	std	Z+5, r1	; 0x05
     712:	11 82       	std	Z+1, r1	; 0x01
     714:	10 82       	st	Z, r1
     716:	17 a2       	std	Z+39, r1	; 0x27
     718:	16 a2       	std	Z+38, r1	; 0x26
     71a:	e0 eb       	ldi	r30, 0xB0	; 176
     71c:	ff e1       	ldi	r31, 0x1F	; 31
     71e:	80 ed       	ldi	r24, 0xD0	; 208
     720:	9f e1       	ldi	r25, 0x1F	; 31
     722:	11 92       	st	Z+, r1
     724:	11 92       	st	Z+, r1
     726:	e8 17       	cp	r30, r24
     728:	f9 07       	cpc	r31, r25
     72a:	d9 f7       	brne	.-10     	; 0x722 <NWK_Init+0x18>
     72c:	42 d6       	rcall	.+3204   	; 0x13b2 <nwkTxInit>
     72e:	60 d3       	rcall	.+1728   	; 0xdf0 <nwkRxInit>
     730:	0d d1       	rcall	.+538    	; 0x94c <nwkFrameInit>
     732:	40 d0       	rcall	.+128    	; 0x7b4 <nwkDataReqInit>
     734:	92 c1       	rjmp	.+804    	; 0xa5a <nwkRouteInit>
     736:	08 95       	ret

00000738 <NWK_SetAddr>:
     738:	90 93 ab 1f 	sts	0x1FAB, r25	; 0x801fab <nwkIb+0x1>
     73c:	80 93 aa 1f 	sts	0x1FAA, r24	; 0x801faa <nwkIb>
     740:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <PHY_SetShortAddr>
     744:	08 95       	ret

00000746 <NWK_SetPanId>:
     746:	90 93 ad 1f 	sts	0x1FAD, r25	; 0x801fad <nwkIb+0x3>
     74a:	80 93 ac 1f 	sts	0x1FAC, r24	; 0x801fac <nwkIb+0x2>
     74e:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <PHY_SetPanId>
     752:	08 95       	ret

00000754 <NWK_OpenEndpoint>:
     754:	e8 2f       	mov	r30, r24
     756:	f0 e0       	ldi	r31, 0x00	; 0
     758:	ee 0f       	add	r30, r30
     75a:	ff 1f       	adc	r31, r31
     75c:	e0 55       	subi	r30, 0x50	; 80
     75e:	f0 4e       	sbci	r31, 0xE0	; 224
     760:	71 83       	std	Z+1, r23	; 0x01
     762:	60 83       	st	Z, r22
     764:	08 95       	ret

00000766 <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
     766:	8b d3       	rcall	.+1814   	; 0xe7e <nwkRxTaskHandler>
  nwkTxTaskHandler();
     768:	20 d7       	rcall	.+3648   	; 0x15aa <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
     76a:	4d c0       	rjmp	.+154    	; 0x806 <nwkDataReqTaskHandler>
     76c:	08 95       	ret

0000076e <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     76e:	e0 91 fb 0b 	lds	r30, 0x0BFB	; 0x800bfb <nwkDataReqQueue>
     772:	f0 91 fc 0b 	lds	r31, 0x0BFC	; 0x800bfc <nwkDataReqQueue+0x1>
     776:	30 97       	sbiw	r30, 0x00	; 0
     778:	d9 f0       	breq	.+54     	; 0x7b0 <nwkDataReqTxConf+0x42>
  {
    if (req->frame == frame)
     77a:	22 81       	ldd	r18, Z+2	; 0x02
     77c:	33 81       	ldd	r19, Z+3	; 0x03
     77e:	82 17       	cp	r24, r18
     780:	93 07       	cpc	r25, r19
     782:	89 f4       	brne	.+34     	; 0x7a6 <nwkDataReqTxConf+0x38>
     784:	05 c0       	rjmp	.+10     	; 0x790 <nwkDataReqTxConf+0x22>
     786:	22 81       	ldd	r18, Z+2	; 0x02
     788:	33 81       	ldd	r19, Z+3	; 0x03
     78a:	28 17       	cp	r18, r24
     78c:	39 07       	cpc	r19, r25
     78e:	59 f4       	brne	.+22     	; 0x7a6 <nwkDataReqTxConf+0x38>
    {
      req->status = frame->tx.status;
     790:	dc 01       	movw	r26, r24
     792:	ad 57       	subi	r26, 0x7D	; 125
     794:	bf 4f       	sbci	r27, 0xFF	; 255
     796:	2c 91       	ld	r18, X
     798:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
     79a:	13 96       	adiw	r26, 0x03	; 3
     79c:	2c 91       	ld	r18, X
     79e:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
     7a0:	22 e0       	ldi	r18, 0x02	; 2
     7a2:	24 83       	std	Z+4, r18	; 0x04
      break;
     7a4:	05 c0       	rjmp	.+10     	; 0x7b0 <nwkDataReqTxConf+0x42>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     7a6:	01 90       	ld	r0, Z+
     7a8:	f0 81       	ld	r31, Z
     7aa:	e0 2d       	mov	r30, r0
     7ac:	30 97       	sbiw	r30, 0x00	; 0
     7ae:	59 f7       	brne	.-42     	; 0x786 <nwkDataReqTxConf+0x18>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
     7b0:	11 c1       	rjmp	.+546    	; 0x9d4 <nwkFrameFree>
     7b2:	08 95       	ret

000007b4 <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
     7b4:	10 92 fc 0b 	sts	0x0BFC, r1	; 0x800bfc <nwkDataReqQueue+0x1>
     7b8:	10 92 fb 0b 	sts	0x0BFB, r1	; 0x800bfb <nwkDataReqQueue>
     7bc:	08 95       	ret

000007be <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     7be:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
     7c0:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
     7c2:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
     7c4:	13 82       	std	Z+3, r1	; 0x03
     7c6:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
     7c8:	aa ea       	ldi	r26, 0xAA	; 170
     7ca:	bf e1       	ldi	r27, 0x1F	; 31
     7cc:	96 96       	adiw	r26, 0x26	; 38
     7ce:	8d 91       	ld	r24, X+
     7d0:	9c 91       	ld	r25, X
     7d2:	97 97       	sbiw	r26, 0x27	; 39
     7d4:	01 96       	adiw	r24, 0x01	; 1
     7d6:	97 96       	adiw	r26, 0x27	; 39
     7d8:	9c 93       	st	X, r25
     7da:	8e 93       	st	-X, r24
     7dc:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
     7de:	80 91 fb 0b 	lds	r24, 0x0BFB	; 0x800bfb <nwkDataReqQueue>
     7e2:	90 91 fc 0b 	lds	r25, 0x0BFC	; 0x800bfc <nwkDataReqQueue+0x1>
     7e6:	00 97       	sbiw	r24, 0x00	; 0
     7e8:	39 f4       	brne	.+14     	; 0x7f8 <NWK_DataReq+0x3a>
  {
    req->next = NULL;
     7ea:	11 82       	std	Z+1, r1	; 0x01
     7ec:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
     7ee:	f0 93 fc 0b 	sts	0x0BFC, r31	; 0x800bfc <nwkDataReqQueue+0x1>
     7f2:	e0 93 fb 0b 	sts	0x0BFB, r30	; 0x800bfb <nwkDataReqQueue>
     7f6:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
     7f8:	91 83       	std	Z+1, r25	; 0x01
     7fa:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
     7fc:	f0 93 fc 0b 	sts	0x0BFC, r31	; 0x800bfc <nwkDataReqQueue+0x1>
     800:	e0 93 fb 0b 	sts	0x0BFB, r30	; 0x800bfb <nwkDataReqQueue>
     804:	08 95       	ret

00000806 <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     806:	0f 93       	push	r16
     808:	1f 93       	push	r17
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     80e:	e0 91 fb 0b 	lds	r30, 0x0BFB	; 0x800bfb <nwkDataReqQueue>
     812:	f0 91 fc 0b 	lds	r31, 0x0BFC	; 0x800bfc <nwkDataReqQueue+0x1>
     816:	30 97       	sbiw	r30, 0x00	; 0
     818:	09 f4       	brne	.+2      	; 0x81c <nwkDataReqTaskHandler+0x16>
     81a:	93 c0       	rjmp	.+294    	; 0x942 <nwkDataReqTaskHandler+0x13c>
     81c:	ef 01       	movw	r28, r30
  {
    switch (req->state)
     81e:	8c 81       	ldd	r24, Y+4	; 0x04
     820:	88 23       	and	r24, r24
     822:	21 f0       	breq	.+8      	; 0x82c <nwkDataReqTaskHandler+0x26>
     824:	82 30       	cpi	r24, 0x02	; 2
     826:	09 f4       	brne	.+2      	; 0x82a <nwkDataReqTaskHandler+0x24>
     828:	66 c0       	rjmp	.+204    	; 0x8f6 <nwkDataReqTaskHandler+0xf0>
     82a:	85 c0       	rjmp	.+266    	; 0x936 <nwkDataReqTaskHandler+0x130>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
     82c:	9a d0       	rcall	.+308    	; 0x962 <nwkFrameAlloc>
     82e:	8c 01       	movw	r16, r24
     830:	00 97       	sbiw	r24, 0x00	; 0
     832:	21 f4       	brne	.+8      	; 0x83c <nwkDataReqTaskHandler+0x36>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
     834:	82 e0       	ldi	r24, 0x02	; 2
     836:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
     838:	8f 87       	std	Y+15, r24	; 0x0f
     83a:	83 c0       	rjmp	.+262    	; 0x942 <nwkDataReqTaskHandler+0x13c>
    return;
  }

  req->frame = frame;
     83c:	9b 83       	std	Y+3, r25	; 0x03
     83e:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
     844:	f8 01       	movw	r30, r16
     846:	e9 57       	subi	r30, 0x79	; 121
     848:	ff 4f       	sbci	r31, 0xFF	; 255
     84a:	87 eb       	ldi	r24, 0xB7	; 183
     84c:	93 e0       	ldi	r25, 0x03	; 3
     84e:	91 83       	std	Z+1, r25	; 0x01
     850:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
     852:	31 97       	sbiw	r30, 0x01	; 1
     854:	89 85       	ldd	r24, Y+9	; 0x09
     856:	82 fb       	bst	r24, 2
     858:	88 27       	eor	r24, r24
     85a:	80 f9       	bld	r24, 0
     85c:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
     85e:	99 85       	ldd	r25, Y+9	; 0x09
     860:	d8 01       	movw	r26, r16
     862:	1b 96       	adiw	r26, 0x0b	; 11
     864:	8c 91       	ld	r24, X
     866:	1b 97       	sbiw	r26, 0x0b	; 11
     868:	90 fb       	bst	r25, 0
     86a:	80 f9       	bld	r24, 0
     86c:	1b 96       	adiw	r26, 0x0b	; 11
     86e:	8c 93       	st	X, r24
     870:	1b 97       	sbiw	r26, 0x0b	; 11
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
     872:	99 85       	ldd	r25, Y+9	; 0x09
     874:	93 fb       	bst	r25, 3
     876:	99 27       	eor	r25, r25
     878:	90 f9       	bld	r25, 0
     87a:	90 fb       	bst	r25, 0
     87c:	82 f9       	bld	r24, 2
     87e:	1b 96       	adiw	r26, 0x0b	; 11
     880:	8c 93       	st	X, r24
     882:	1b 97       	sbiw	r26, 0x0b	; 11
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     884:	ea ea       	ldi	r30, 0xAA	; 170
     886:	ff e1       	ldi	r31, 0x1F	; 31
     888:	84 81       	ldd	r24, Z+4	; 0x04
     88a:	8f 5f       	subi	r24, 0xFF	; 255
     88c:	84 83       	std	Z+4, r24	; 0x04
     88e:	1c 96       	adiw	r26, 0x0c	; 12
     890:	8c 93       	st	X, r24
     892:	1c 97       	sbiw	r26, 0x0c	; 12
  frame->header.nwkSrcAddr = nwkIb.addr;
     894:	80 81       	ld	r24, Z
     896:	91 81       	ldd	r25, Z+1	; 0x01
     898:	1e 96       	adiw	r26, 0x0e	; 14
     89a:	9c 93       	st	X, r25
     89c:	8e 93       	st	-X, r24
     89e:	1d 97       	sbiw	r26, 0x0d	; 13
  frame->header.nwkDstAddr = req->dstAddr;
     8a0:	8d 81       	ldd	r24, Y+5	; 0x05
     8a2:	9e 81       	ldd	r25, Y+6	; 0x06
     8a4:	50 96       	adiw	r26, 0x10	; 16
     8a6:	9c 93       	st	X, r25
     8a8:	8e 93       	st	-X, r24
     8aa:	1f 97       	sbiw	r26, 0x0f	; 15
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
     8ac:	88 85       	ldd	r24, Y+8	; 0x08
     8ae:	98 2f       	mov	r25, r24
     8b0:	9f 70       	andi	r25, 0x0F	; 15
     8b2:	51 96       	adiw	r26, 0x11	; 17
     8b4:	8c 91       	ld	r24, X
     8b6:	51 97       	sbiw	r26, 0x11	; 17
     8b8:	80 7f       	andi	r24, 0xF0	; 240
     8ba:	89 2b       	or	r24, r25
     8bc:	51 96       	adiw	r26, 0x11	; 17
     8be:	8c 93       	st	X, r24
     8c0:	51 97       	sbiw	r26, 0x11	; 17
  frame->header.nwkDstEndpoint = req->dstEndpoint;
     8c2:	9f 81       	ldd	r25, Y+7	; 0x07
     8c4:	92 95       	swap	r25
     8c6:	90 7f       	andi	r25, 0xF0	; 240
     8c8:	8f 70       	andi	r24, 0x0F	; 15
     8ca:	89 2b       	or	r24, r25
     8cc:	51 96       	adiw	r26, 0x11	; 17
     8ce:	8c 93       	st	X, r24

  memcpy(frame->payload, req->data, req->size);
     8d0:	f8 01       	movw	r30, r16
     8d2:	ef 57       	subi	r30, 0x7F	; 127
     8d4:	ff 4f       	sbci	r31, 0xFF	; 255
     8d6:	4c 85       	ldd	r20, Y+12	; 0x0c
     8d8:	50 e0       	ldi	r21, 0x00	; 0
     8da:	6a 85       	ldd	r22, Y+10	; 0x0a
     8dc:	7b 85       	ldd	r23, Y+11	; 0x0b
     8de:	80 81       	ld	r24, Z
     8e0:	91 81       	ldd	r25, Z+1	; 0x01
     8e2:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <memcpy>
  frame->size += req->size;
     8e6:	f8 01       	movw	r30, r16
     8e8:	91 81       	ldd	r25, Z+1	; 0x01
     8ea:	8c 85       	ldd	r24, Y+12	; 0x0c
     8ec:	89 0f       	add	r24, r25
     8ee:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
     8f0:	c8 01       	movw	r24, r16
     8f2:	82 d5       	rcall	.+2820   	; 0x13f8 <nwkTxFrame>
     8f4:	26 c0       	rjmp	.+76     	; 0x942 <nwkDataReqTaskHandler+0x13c>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
     8f6:	ec 17       	cp	r30, r28
     8f8:	fd 07       	cpc	r31, r29
     8fa:	41 f4       	brne	.+16     	; 0x90c <nwkDataReqTaskHandler+0x106>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
     8fc:	80 81       	ld	r24, Z
     8fe:	91 81       	ldd	r25, Z+1	; 0x01
     900:	90 93 fc 0b 	sts	0x0BFC, r25	; 0x800bfc <nwkDataReqQueue+0x1>
     904:	80 93 fb 0b 	sts	0x0BFB, r24	; 0x800bfb <nwkDataReqQueue>
     908:	0a c0       	rjmp	.+20     	; 0x91e <nwkDataReqTaskHandler+0x118>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
     90a:	fc 01       	movw	r30, r24
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
     90c:	80 81       	ld	r24, Z
     90e:	91 81       	ldd	r25, Z+1	; 0x01
     910:	8c 17       	cp	r24, r28
     912:	9d 07       	cpc	r25, r29
     914:	d1 f7       	brne	.-12     	; 0x90a <nwkDataReqTaskHandler+0x104>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
     916:	88 81       	ld	r24, Y
     918:	99 81       	ldd	r25, Y+1	; 0x01
     91a:	91 83       	std	Z+1, r25	; 0x01
     91c:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
     91e:	ea ea       	ldi	r30, 0xAA	; 170
     920:	ff e1       	ldi	r31, 0x1F	; 31
     922:	86 a1       	ldd	r24, Z+38	; 0x26
     924:	97 a1       	ldd	r25, Z+39	; 0x27
     926:	01 97       	sbiw	r24, 0x01	; 1
     928:	97 a3       	std	Z+39, r25	; 0x27
     92a:	86 a3       	std	Z+38, r24	; 0x26
  req->confirm(req);
     92c:	ed 85       	ldd	r30, Y+13	; 0x0d
     92e:	fe 85       	ldd	r31, Y+14	; 0x0e
     930:	ce 01       	movw	r24, r28
     932:	19 95       	eicall
     934:	06 c0       	rjmp	.+12     	; 0x942 <nwkDataReqTaskHandler+0x13c>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     936:	09 90       	ld	r0, Y+
     938:	d8 81       	ld	r29, Y
     93a:	c0 2d       	mov	r28, r0
     93c:	20 97       	sbiw	r28, 0x00	; 0
     93e:	09 f0       	breq	.+2      	; 0x942 <nwkDataReqTaskHandler+0x13c>
     940:	6e cf       	rjmp	.-292    	; 0x81e <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
     942:	df 91       	pop	r29
     944:	cf 91       	pop	r28
     946:	1f 91       	pop	r17
     948:	0f 91       	pop	r16
     94a:	08 95       	ret

0000094c <nwkFrameInit>:

/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
     94c:	ed ef       	ldi	r30, 0xFD	; 253
     94e:	fb e0       	ldi	r31, 0x0B	; 11
     950:	8b e0       	ldi	r24, 0x0B	; 11
     952:	9c e1       	ldi	r25, 0x1C	; 28
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     954:	10 82       	st	Z, r1
     956:	e7 57       	subi	r30, 0x77	; 119
     958:	ff 4f       	sbci	r31, 0xFF	; 255
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     95a:	e8 17       	cp	r30, r24
     95c:	f9 07       	cpc	r31, r25
     95e:	d1 f7       	brne	.-12     	; 0x954 <nwkFrameInit+0x8>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
     960:	08 95       	ret

00000962 <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
     962:	80 91 fd 0b 	lds	r24, 0x0BFD	; 0x800bfd <nwkFrameFrames>
     966:	88 23       	and	r24, r24
     968:	59 f0       	breq	.+22     	; 0x980 <nwkFrameAlloc+0x1e>
     96a:	e6 e8       	ldi	r30, 0x86	; 134
     96c:	fc e0       	ldi	r31, 0x0C	; 12
     96e:	6b e0       	ldi	r22, 0x0B	; 11
     970:	7c e1       	ldi	r23, 0x1C	; 28
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	ac 01       	movw	r20, r24
     978:	20 81       	ld	r18, Z
     97a:	21 11       	cpse	r18, r1
     97c:	22 c0       	rjmp	.+68     	; 0x9c2 <nwkFrameAlloc+0x60>
     97e:	02 c0       	rjmp	.+4      	; 0x984 <nwkFrameAlloc+0x22>
     980:	40 e0       	ldi	r20, 0x00	; 0
     982:	50 e0       	ldi	r21, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
     984:	69 e8       	ldi	r22, 0x89	; 137
     986:	64 9f       	mul	r22, r20
     988:	90 01       	movw	r18, r0
     98a:	65 9f       	mul	r22, r21
     98c:	30 0d       	add	r19, r0
     98e:	11 24       	eor	r1, r1
     990:	c9 01       	movw	r24, r18
     992:	83 50       	subi	r24, 0x03	; 3
     994:	94 4f       	sbci	r25, 0xF4	; 244
     996:	fc 01       	movw	r30, r24
     998:	11 92       	st	Z+, r1
     99a:	6a 95       	dec	r22
     99c:	e9 f7       	brne	.-6      	; 0x998 <nwkFrameAlloc+0x36>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
     99e:	40 e1       	ldi	r20, 0x10	; 16
     9a0:	fc 01       	movw	r30, r24
     9a2:	41 83       	std	Z+1, r20	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
     9a4:	ef 57       	subi	r30, 0x7F	; 127
     9a6:	ff 4f       	sbci	r31, 0xFF	; 255
     9a8:	21 5f       	subi	r18, 0xF1	; 241
     9aa:	33 4f       	sbci	r19, 0xF3	; 243
     9ac:	31 83       	std	Z+1, r19	; 0x01
     9ae:	20 83       	st	Z, r18
      nwkIb.lock++;
     9b0:	ea ea       	ldi	r30, 0xAA	; 170
     9b2:	ff e1       	ldi	r31, 0x1F	; 31
     9b4:	26 a1       	ldd	r18, Z+38	; 0x26
     9b6:	37 a1       	ldd	r19, Z+39	; 0x27
     9b8:	2f 5f       	subi	r18, 0xFF	; 255
     9ba:	3f 4f       	sbci	r19, 0xFF	; 255
     9bc:	37 a3       	std	Z+39, r19	; 0x27
     9be:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
     9c0:	08 95       	ret
     9c2:	01 96       	adiw	r24, 0x01	; 1
     9c4:	e7 57       	subi	r30, 0x77	; 119
     9c6:	ff 4f       	sbci	r31, 0xFF	; 255
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     9c8:	e6 17       	cp	r30, r22
     9ca:	f7 07       	cpc	r31, r23
     9cc:	a1 f6       	brne	.-88     	; 0x976 <nwkFrameAlloc+0x14>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	90 e0       	ldi	r25, 0x00	; 0
}
     9d2:	08 95       	ret

000009d4 <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
     9d4:	fc 01       	movw	r30, r24
     9d6:	10 82       	st	Z, r1
  nwkIb.lock--;
     9d8:	ea ea       	ldi	r30, 0xAA	; 170
     9da:	ff e1       	ldi	r31, 0x1F	; 31
     9dc:	86 a1       	ldd	r24, Z+38	; 0x26
     9de:	97 a1       	ldd	r25, Z+39	; 0x27
     9e0:	01 97       	sbiw	r24, 0x01	; 1
     9e2:	97 a3       	std	Z+39, r25	; 0x27
     9e4:	86 a3       	std	Z+38, r24	; 0x26
     9e6:	08 95       	ret

000009e8 <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
     9e8:	00 97       	sbiw	r24, 0x00	; 0
     9ea:	41 f0       	breq	.+16     	; 0x9fc <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
     9ec:	fc 01       	movw	r30, r24
     9ee:	e7 57       	subi	r30, 0x77	; 119
     9f0:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     9f2:	8c e1       	ldi	r24, 0x1C	; 28
     9f4:	eb 30       	cpi	r30, 0x0B	; 11
     9f6:	f8 07       	cpc	r31, r24
     9f8:	18 f0       	brcs	.+6      	; 0xa00 <nwkFrameNext+0x18>
     9fa:	12 c0       	rjmp	.+36     	; 0xa20 <nwkFrameNext+0x38>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
     9fc:	ed ef       	ldi	r30, 0xFD	; 253
     9fe:	fb e0       	ldi	r31, 0x0B	; 11
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     a00:	80 81       	ld	r24, Z
     a02:	88 23       	and	r24, r24
     a04:	21 f0       	breq	.+8      	; 0xa0e <nwkFrameNext+0x26>
     a06:	0f c0       	rjmp	.+30     	; 0xa26 <nwkFrameNext+0x3e>
     a08:	80 81       	ld	r24, Z
     a0a:	81 11       	cpse	r24, r1
     a0c:	0f c0       	rjmp	.+30     	; 0xa2c <nwkFrameNext+0x44>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     a0e:	e7 57       	subi	r30, 0x77	; 119
     a10:	ff 4f       	sbci	r31, 0xFF	; 255
     a12:	8c e1       	ldi	r24, 0x1C	; 28
     a14:	eb 30       	cpi	r30, 0x0B	; 11
     a16:	f8 07       	cpc	r31, r24
     a18:	b8 f3       	brcs	.-18     	; 0xa08 <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	08 95       	ret
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	08 95       	ret
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     a26:	8e 2f       	mov	r24, r30
     a28:	9f 2f       	mov	r25, r31
     a2a:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     a2c:	8e 2f       	mov	r24, r30
     a2e:	9f 2f       	mov	r25, r31
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
}
     a30:	08 95       	ret

00000a32 <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
     a32:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
     a34:	dc 01       	movw	r26, r24
     a36:	ad 57       	subi	r26, 0x7D	; 125
     a38:	bf 4f       	sbci	r27, 0xFF	; 255
     a3a:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     a3c:	aa ea       	ldi	r26, 0xAA	; 170
     a3e:	bf e1       	ldi	r27, 0x1F	; 31
     a40:	14 96       	adiw	r26, 0x04	; 4
     a42:	9c 91       	ld	r25, X
     a44:	14 97       	sbiw	r26, 0x04	; 4
     a46:	9f 5f       	subi	r25, 0xFF	; 255
     a48:	14 96       	adiw	r26, 0x04	; 4
     a4a:	9c 93       	st	X, r25
     a4c:	14 97       	sbiw	r26, 0x04	; 4
     a4e:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
     a50:	8d 91       	ld	r24, X+
     a52:	9c 91       	ld	r25, X
     a54:	96 87       	std	Z+14, r25	; 0x0e
     a56:	85 87       	std	Z+13, r24	; 0x0d
     a58:	08 95       	ret

00000a5a <nwkRouteInit>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
     a5a:	ac e0       	ldi	r26, 0x0C	; 12
     a5c:	bc e1       	ldi	r27, 0x1C	; 28
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	4f ef       	ldi	r20, 0xFF	; 255
     a64:	5f ef       	ldi	r21, 0xFF	; 255
     a66:	11 96       	adiw	r26, 0x01	; 1
     a68:	5c 93       	st	X, r21
     a6a:	4e 93       	st	-X, r20
     a6c:	fc 01       	movw	r30, r24
     a6e:	ee 0f       	add	r30, r30
     a70:	ff 1f       	adc	r31, r31
     a72:	ee 0f       	add	r30, r30
     a74:	ff 1f       	adc	r31, r31
     a76:	ee 0f       	add	r30, r30
     a78:	ff 1f       	adc	r31, r31
     a7a:	e8 1b       	sub	r30, r24
     a7c:	f9 0b       	sbc	r31, r25
     a7e:	e5 5f       	subi	r30, 0xF5	; 245
     a80:	f3 4e       	sbci	r31, 0xE3	; 227
     a82:	20 81       	ld	r18, Z
     a84:	2e 7f       	andi	r18, 0xFE	; 254
     a86:	20 83       	st	Z, r18
     a88:	14 96       	adiw	r26, 0x04	; 4
     a8a:	1c 92       	st	X, r1
     a8c:	14 97       	sbiw	r26, 0x04	; 4
     a8e:	01 96       	adiw	r24, 0x01	; 1
     a90:	17 96       	adiw	r26, 0x07	; 7
     a92:	84 36       	cpi	r24, 0x64	; 100
     a94:	91 05       	cpc	r25, r1
     a96:	39 f7       	brne	.-50     	; 0xa66 <nwkRouteInit+0xc>
     a98:	08 95       	ret

00000a9a <NWK_RouteFindEntry>:
     a9a:	0f 93       	push	r16
     a9c:	1f 93       	push	r17
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	ec e0       	ldi	r30, 0x0C	; 12
     aa4:	fc e1       	ldi	r31, 0x1C	; 28
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	06 2f       	mov	r16, r22
     aac:	10 e0       	ldi	r17, 0x00	; 0
     aae:	40 81       	ld	r20, Z
     ab0:	51 81       	ldd	r21, Z+1	; 0x01
     ab2:	48 17       	cp	r20, r24
     ab4:	59 07       	cpc	r21, r25
     ab6:	b1 f4       	brne	.+44     	; 0xae4 <NWK_RouteFindEntry+0x4a>
     ab8:	d9 01       	movw	r26, r18
     aba:	aa 0f       	add	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	aa 0f       	add	r26, r26
     ac0:	bb 1f       	adc	r27, r27
     ac2:	aa 0f       	add	r26, r26
     ac4:	bb 1f       	adc	r27, r27
     ac6:	a2 1b       	sub	r26, r18
     ac8:	b3 0b       	sbc	r27, r19
     aca:	a5 5f       	subi	r26, 0xF5	; 245
     acc:	b3 4e       	sbci	r27, 0xE3	; 227
     ace:	4c 91       	ld	r20, X
     ad0:	46 95       	lsr	r20
     ad2:	41 70       	andi	r20, 0x01	; 1
     ad4:	c4 2f       	mov	r28, r20
     ad6:	40 e0       	ldi	r20, 0x00	; 0
     ad8:	d4 2f       	mov	r29, r20
     ada:	c0 17       	cp	r28, r16
     adc:	d1 07       	cpc	r29, r17
     ade:	11 f4       	brne	.+4      	; 0xae4 <NWK_RouteFindEntry+0x4a>
     ae0:	cd 01       	movw	r24, r26
     ae2:	08 c0       	rjmp	.+16     	; 0xaf4 <NWK_RouteFindEntry+0x5a>
     ae4:	2f 5f       	subi	r18, 0xFF	; 255
     ae6:	3f 4f       	sbci	r19, 0xFF	; 255
     ae8:	37 96       	adiw	r30, 0x07	; 7
     aea:	24 36       	cpi	r18, 0x64	; 100
     aec:	31 05       	cpc	r19, r1
     aee:	f9 f6       	brne	.-66     	; 0xaae <NWK_RouteFindEntry+0x14>
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	08 95       	ret

00000afe <NWK_RouteNewEntry>:
     afe:	a0 e0       	ldi	r26, 0x00	; 0
     b00:	b0 e0       	ldi	r27, 0x00	; 0
     b02:	eb e0       	ldi	r30, 0x0B	; 11
     b04:	fc e1       	ldi	r31, 0x1C	; 28
     b06:	80 81       	ld	r24, Z
     b08:	80 fd       	sbrc	r24, 0
     b0a:	0d c0       	rjmp	.+26     	; 0xb26 <NWK_RouteNewEntry+0x28>
     b0c:	85 81       	ldd	r24, Z+5	; 0x05
     b0e:	88 23       	and	r24, r24
     b10:	81 f0       	breq	.+32     	; 0xb32 <NWK_RouteNewEntry+0x34>
     b12:	10 97       	sbiw	r26, 0x00	; 0
     b14:	39 f0       	breq	.+14     	; 0xb24 <NWK_RouteNewEntry+0x26>
     b16:	15 96       	adiw	r26, 0x05	; 5
     b18:	9c 91       	ld	r25, X
     b1a:	15 97       	sbiw	r26, 0x05	; 5
     b1c:	89 17       	cp	r24, r25
     b1e:	18 f4       	brcc	.+6      	; 0xb26 <NWK_RouteNewEntry+0x28>
     b20:	df 01       	movw	r26, r30
     b22:	01 c0       	rjmp	.+2      	; 0xb26 <NWK_RouteNewEntry+0x28>
     b24:	df 01       	movw	r26, r30
     b26:	37 96       	adiw	r30, 0x07	; 7
     b28:	8e e1       	ldi	r24, 0x1E	; 30
     b2a:	e7 3c       	cpi	r30, 0xC7	; 199
     b2c:	f8 07       	cpc	r31, r24
     b2e:	59 f7       	brne	.-42     	; 0xb06 <NWK_RouteNewEntry+0x8>
     b30:	fd 01       	movw	r30, r26
     b32:	80 81       	ld	r24, Z
     b34:	8d 70       	andi	r24, 0x0D	; 13
     b36:	80 63       	ori	r24, 0x30	; 48
     b38:	80 83       	st	Z, r24
     b3a:	80 e8       	ldi	r24, 0x80	; 128
     b3c:	85 83       	std	Z+5, r24	; 0x05
     b3e:	cf 01       	movw	r24, r30
     b40:	08 95       	ret

00000b42 <NWK_RouteFreeEntry>:
     b42:	fc 01       	movw	r30, r24
     b44:	80 81       	ld	r24, Z
     b46:	80 fd       	sbrc	r24, 0
     b48:	05 c0       	rjmp	.+10     	; 0xb54 <NWK_RouteFreeEntry+0x12>
     b4a:	8f ef       	ldi	r24, 0xFF	; 255
     b4c:	9f ef       	ldi	r25, 0xFF	; 255
     b4e:	92 83       	std	Z+2, r25	; 0x02
     b50:	81 83       	std	Z+1, r24	; 0x01
     b52:	15 82       	std	Z+5, r1	; 0x05
     b54:	08 95       	ret

00000b56 <NWK_RouteNextHop>:
     b56:	a1 df       	rcall	.-190    	; 0xa9a <NWK_RouteFindEntry>
     b58:	00 97       	sbiw	r24, 0x00	; 0
     b5a:	21 f0       	breq	.+8      	; 0xb64 <NWK_RouteNextHop+0xe>
     b5c:	fc 01       	movw	r30, r24
     b5e:	83 81       	ldd	r24, Z+3	; 0x03
     b60:	94 81       	ldd	r25, Z+4	; 0x04
     b62:	08 95       	ret
     b64:	8f ef       	ldi	r24, 0xFF	; 255
     b66:	9f ef       	ldi	r25, 0xFF	; 255
     b68:	08 95       	ret

00000b6a <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
     b6a:	97 df       	rcall	.-210    	; 0xa9a <NWK_RouteFindEntry>
  if (entry)
     b6c:	00 97       	sbiw	r24, 0x00	; 0
    NWK_RouteFreeEntry(entry);
     b6e:	09 f0       	breq	.+2      	; 0xb72 <nwkRouteRemove+0x8>
     b70:	e8 cf       	rjmp	.-48     	; 0xb42 <NWK_RouteFreeEntry>
     b72:	08 95       	ret

00000b74 <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
     b74:	0f 93       	push	r16
     b76:	1f 93       	push	r17
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
     b7e:	01 85       	ldd	r16, Z+9	; 0x09
     b80:	12 85       	ldd	r17, Z+10	; 0x0a
     b82:	11 23       	and	r17, r17
     b84:	2c f4       	brge	.+10     	; 0xb90 <nwkRouteFrameReceived+0x1c>
     b86:	85 85       	ldd	r24, Z+13	; 0x0d
     b88:	96 85       	ldd	r25, Z+14	; 0x0e
     b8a:	08 17       	cp	r16, r24
     b8c:	19 07       	cpc	r17, r25
     b8e:	e1 f5       	brne	.+120    	; 0xc08 <nwkRouteFrameReceived+0x94>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     b90:	85 81       	ldd	r24, Z+5	; 0x05
     b92:	96 81       	ldd	r25, Z+6	; 0x06
     b94:	01 96       	adiw	r24, 0x01	; 1
     b96:	c1 f1       	breq	.+112    	; 0xc08 <nwkRouteFrameReceived+0x94>
     b98:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
     b9a:	60 e0       	ldi	r22, 0x00	; 0
     b9c:	85 85       	ldd	r24, Z+13	; 0x0d
     b9e:	96 85       	ldd	r25, Z+14	; 0x0e
     ba0:	7c df       	rcall	.-264    	; 0xa9a <NWK_RouteFindEntry>
     ba2:	fc 01       	movw	r30, r24

  if (entry)
     ba4:	89 2b       	or	r24, r25
     ba6:	a1 f0       	breq	.+40     	; 0xbd0 <nwkRouteFrameReceived+0x5c>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
     ba8:	8f 81       	ldd	r24, Y+7	; 0x07
     baa:	98 85       	ldd	r25, Y+8	; 0x08
     bac:	01 96       	adiw	r24, 0x01	; 1
     bae:	f9 f4       	brne	.+62     	; 0xbee <nwkRouteFrameReceived+0x7a>
     bb0:	20 91 aa 1f 	lds	r18, 0x1FAA	; 0x801faa <nwkIb>
     bb4:	30 91 ab 1f 	lds	r19, 0x1FAB	; 0x801fab <nwkIb+0x1>
     bb8:	8f 85       	ldd	r24, Y+15	; 0x0f
     bba:	98 89       	ldd	r25, Y+16	; 0x10
     bbc:	28 17       	cp	r18, r24
     bbe:	39 07       	cpc	r19, r25
     bc0:	b1 f4       	brne	.+44     	; 0xbee <nwkRouteFrameReceived+0x7a>
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    {
      entry->nextHopAddr = header->macSrcAddr;
     bc2:	14 83       	std	Z+4, r17	; 0x04
     bc4:	03 83       	std	Z+3, r16	; 0x03
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
     bc6:	80 81       	ld	r24, Z
     bc8:	8f 70       	andi	r24, 0x0F	; 15
     bca:	80 63       	ori	r24, 0x30	; 48
     bcc:	80 83       	st	Z, r24
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
     bce:	0a c0       	rjmp	.+20     	; 0xbe4 <nwkRouteFrameReceived+0x70>
     bd0:	96 df       	rcall	.-212    	; 0xafe <NWK_RouteNewEntry>
     bd2:	fc 01       	movw	r30, r24

    entry->dstAddr = header->nwkSrcAddr;
     bd4:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd6:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd8:	92 83       	std	Z+2, r25	; 0x02
     bda:	81 83       	std	Z+1, r24	; 0x01
    entry->nextHopAddr = header->macSrcAddr;
     bdc:	89 85       	ldd	r24, Y+9	; 0x09
     bde:	9a 85       	ldd	r25, Y+10	; 0x0a
     be0:	94 83       	std	Z+4, r25	; 0x04
     be2:	83 83       	std	Z+3, r24	; 0x03
  }

  entry->lqi = frame->rx.lqi;
     be4:	cd 57       	subi	r28, 0x7D	; 125
     be6:	df 4f       	sbci	r29, 0xFF	; 255
     be8:	88 81       	ld	r24, Y
     bea:	86 83       	std	Z+6, r24	; 0x06
     bec:	0d c0       	rjmp	.+26     	; 0xc08 <nwkRouteFrameReceived+0x94>
  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
     bee:	83 81       	ldd	r24, Z+3	; 0x03
     bf0:	94 81       	ldd	r25, Z+4	; 0x04
     bf2:	08 17       	cp	r16, r24
     bf4:	19 07       	cpc	r17, r25
     bf6:	b1 f3       	breq	.-20     	; 0xbe4 <nwkRouteFrameReceived+0x70>
     bf8:	96 81       	ldd	r25, Z+6	; 0x06
     bfa:	de 01       	movw	r26, r28
     bfc:	ad 57       	subi	r26, 0x7D	; 125
     bfe:	bf 4f       	sbci	r27, 0xFF	; 255
     c00:	8c 91       	ld	r24, X
     c02:	98 17       	cp	r25, r24
     c04:	f0 f2       	brcs	.-68     	; 0xbc2 <nwkRouteFrameReceived+0x4e>
     c06:	ee cf       	rjmp	.-36     	; 0xbe4 <nwkRouteFrameReceived+0x70>

  entry->lqi = frame->rx.lqi;
#else
  (void)frame;
#endif
}
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	08 95       	ret

00000c12 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	fc 01       	movw	r30, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
     c18:	87 85       	ldd	r24, Z+15	; 0x0f
     c1a:	90 89       	ldd	r25, Z+16	; 0x10
     c1c:	8f 3f       	cpi	r24, 0xFF	; 255
     c1e:	2f ef       	ldi	r18, 0xFF	; 255
     c20:	92 07       	cpc	r25, r18
     c22:	d9 f1       	breq	.+118    	; 0xc9a <nwkRouteFrameSent+0x88>
     c24:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
     c26:	63 85       	ldd	r22, Z+11	; 0x0b
     c28:	63 fb       	bst	r22, 3
     c2a:	66 27       	eor	r22, r22
     c2c:	60 f9       	bld	r22, 0
     c2e:	35 df       	rcall	.-406    	; 0xa9a <NWK_RouteFindEntry>
     c30:	dc 01       	movw	r26, r24

  if (NULL == entry || entry->fixed)
     c32:	89 2b       	or	r24, r25
     c34:	91 f1       	breq	.+100    	; 0xc9a <nwkRouteFrameSent+0x88>
     c36:	8c 91       	ld	r24, X
     c38:	80 fd       	sbrc	r24, 0
     c3a:	2f c0       	rjmp	.+94     	; 0xc9a <nwkRouteFrameSent+0x88>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
     c3c:	fe 01       	movw	r30, r28
     c3e:	ed 57       	subi	r30, 0x7D	; 125
     c40:	ff 4f       	sbci	r31, 0xFF	; 255
     c42:	80 81       	ld	r24, Z
     c44:	81 11       	cpse	r24, r1
     c46:	19 c0       	rjmp	.+50     	; 0xc7a <nwkRouteFrameSent+0x68>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
     c48:	8c 91       	ld	r24, X
     c4a:	8f 70       	andi	r24, 0x0F	; 15
     c4c:	80 63       	ori	r24, 0x30	; 48
     c4e:	8c 93       	st	X, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
     c50:	15 96       	adiw	r26, 0x05	; 5
     c52:	8c 91       	ld	r24, X
     c54:	15 97       	sbiw	r26, 0x05	; 5
     c56:	8f 5f       	subi	r24, 0xFF	; 255
     c58:	15 96       	adiw	r26, 0x05	; 5
     c5a:	8c 93       	st	X, r24
     c5c:	8f 3f       	cpi	r24, 0xFF	; 255
     c5e:	e9 f4       	brne	.+58     	; 0xc9a <nwkRouteFrameSent+0x88>
     c60:	e0 e1       	ldi	r30, 0x10	; 16
     c62:	fc e1       	ldi	r31, 0x1C	; 28
     c64:	2c ec       	ldi	r18, 0xCC	; 204
     c66:	3e e1       	ldi	r19, 0x1E	; 30
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
     c68:	80 81       	ld	r24, Z
     c6a:	86 95       	lsr	r24
     c6c:	8f 5f       	subi	r24, 0xFF	; 255
     c6e:	80 83       	st	Z, r24
     c70:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
     c72:	e2 17       	cp	r30, r18
     c74:	f3 07       	cpc	r31, r19
     c76:	c1 f7       	brne	.-16     	; 0xc68 <nwkRouteFrameSent+0x56>
     c78:	10 c0       	rjmp	.+32     	; 0xc9a <nwkRouteFrameSent+0x88>
    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
      nwkRouteNormalizeRanks();
  }
  else
  {
    if (0 == --entry->score)
     c7a:	9c 91       	ld	r25, X
     c7c:	89 2f       	mov	r24, r25
     c7e:	82 95       	swap	r24
     c80:	8f 70       	andi	r24, 0x0F	; 15
     c82:	81 5f       	subi	r24, 0xF1	; 241
     c84:	8f 70       	andi	r24, 0x0F	; 15
     c86:	28 2f       	mov	r18, r24
     c88:	22 95       	swap	r18
     c8a:	20 7f       	andi	r18, 0xF0	; 240
     c8c:	9f 70       	andi	r25, 0x0F	; 15
     c8e:	92 2b       	or	r25, r18
     c90:	9c 93       	st	X, r25
     c92:	81 11       	cpse	r24, r1
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <nwkRouteFrameSent+0x88>
      NWK_RouteFreeEntry(entry);
     c96:	cd 01       	movw	r24, r26
     c98:	54 df       	rcall	.-344    	; 0xb42 <NWK_RouteFreeEntry>
  }
}
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	08 95       	ret

00000ca0 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
     ca6:	87 85       	ldd	r24, Z+15	; 0x0f
     ca8:	90 89       	ldd	r25, Z+16	; 0x10
     caa:	8f 3f       	cpi	r24, 0xFF	; 255
     cac:	2f ef       	ldi	r18, 0xFF	; 255
     cae:	92 07       	cpc	r25, r18
     cb0:	29 f4       	brne	.+10     	; 0xcbc <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
     cb2:	8f ef       	ldi	r24, 0xFF	; 255
     cb4:	9f ef       	ldi	r25, 0xFF	; 255
     cb6:	90 87       	std	Z+8, r25	; 0x08
     cb8:	87 83       	std	Z+7, r24	; 0x07
     cba:	0e c0       	rjmp	.+28     	; 0xcd8 <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
     cbc:	23 85       	ldd	r18, Z+11	; 0x0b
     cbe:	22 ff       	sbrs	r18, 2
     cc0:	03 c0       	rjmp	.+6      	; 0xcc8 <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
     cc2:	90 87       	std	Z+8, r25	; 0x08
     cc4:	87 83       	std	Z+7, r24	; 0x07
     cc6:	08 c0       	rjmp	.+16     	; 0xcd8 <nwkRoutePrepareTx+0x38>
     cc8:	ef 01       	movw	r28, r30
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
     cca:	63 85       	ldd	r22, Z+11	; 0x0b
     ccc:	63 fb       	bst	r22, 3
     cce:	66 27       	eor	r22, r22
     cd0:	60 f9       	bld	r22, 0
     cd2:	41 df       	rcall	.-382    	; 0xb56 <NWK_RouteNextHop>
     cd4:	98 87       	std	Y+8, r25	; 0x08
     cd6:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	08 95       	ret

00000cde <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
     cde:	af 92       	push	r10
     ce0:	bf 92       	push	r11
     ce2:	cf 92       	push	r12
     ce4:	df 92       	push	r13
     ce6:	ef 92       	push	r14
     ce8:	ff 92       	push	r15
     cea:	1f 93       	push	r17
     cec:	cf 93       	push	r28
     cee:	df 93       	push	r29
     cf0:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
     cf2:	1b 85       	ldd	r17, Y+11	; 0x0b
     cf4:	13 fb       	bst	r17, 3
     cf6:	11 27       	eor	r17, r17
     cf8:	10 f9       	bld	r17, 0
     cfa:	cf 84       	ldd	r12, Y+15	; 0x0f
     cfc:	d8 88       	ldd	r13, Y+16	; 0x10
     cfe:	61 2f       	mov	r22, r17
     d00:	c6 01       	movw	r24, r12
     d02:	29 df       	rcall	.-430    	; 0xb56 <NWK_RouteNextHop>
     d04:	01 96       	adiw	r24, 0x01	; 1
     d06:	59 f0       	breq	.+22     	; 0xd1e <nwkRouteFrame+0x40>
  {
    frame->tx.confirm = NULL;
     d08:	fe 01       	movw	r30, r28
     d0a:	e9 57       	subi	r30, 0x79	; 121
     d0c:	ff 4f       	sbci	r31, 0xFF	; 255
     d0e:	11 82       	std	Z+1, r1	; 0x01
     d10:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
     d12:	31 97       	sbiw	r30, 0x01	; 1
     d14:	82 e0       	ldi	r24, 0x02	; 2
     d16:	80 83       	st	Z, r24
    nwkTxFrame(frame);
     d18:	ce 01       	movw	r24, r28
     d1a:	6e d3       	rcall	.+1756   	; 0x13f8 <nwkTxFrame>
     d1c:	22 c0       	rjmp	.+68     	; 0xd62 <nwkRouteFrame+0x84>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
     d1e:	ad 84       	ldd	r10, Y+13	; 0x0d
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst, uint8_t multicast)
{
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
     d20:	be 84       	ldd	r11, Y+14	; 0x0e
     d22:	1f de       	rcall	.-962    	; 0x962 <nwkFrameAlloc>
     d24:	7c 01       	movw	r14, r24
     d26:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(frame);
     d28:	d1 f0       	breq	.+52     	; 0xd5e <nwkRouteFrame+0x80>
     d2a:	83 de       	rcall	.-762    	; 0xa32 <nwkFrameCommandInit>

  frame->size += sizeof(NwkCommandRouteError_t);
     d2c:	f7 01       	movw	r30, r14
     d2e:	81 81       	ldd	r24, Z+1	; 0x01
     d30:	8a 5f       	subi	r24, 0xFA	; 250
     d32:	81 83       	std	Z+1, r24	; 0x01
  frame->tx.confirm = NULL;
     d34:	e9 57       	subi	r30, 0x79	; 121
     d36:	ff 4f       	sbci	r31, 0xFF	; 255
     d38:	11 82       	std	Z+1, r1	; 0x01
     d3a:	10 82       	st	Z, r1

  frame->header.nwkDstAddr = src;
     d3c:	f7 01       	movw	r30, r14
     d3e:	b0 8a       	std	Z+16, r11	; 0x10
     d40:	a7 86       	std	Z+15, r10	; 0x0f

  command = (NwkCommandRouteError_t *)frame->payload;
     d42:	ef 57       	subi	r30, 0x7F	; 127
     d44:	ff 4f       	sbci	r31, 0xFF	; 255
     d46:	01 90       	ld	r0, Z+
     d48:	f0 81       	ld	r31, Z
     d4a:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ROUTE_ERROR;
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	80 83       	st	Z, r24
  command->srcAddr = src;
     d50:	b2 82       	std	Z+2, r11	; 0x02
     d52:	a1 82       	std	Z+1, r10	; 0x01
  command->dstAddr = dst;
     d54:	d4 82       	std	Z+4, r13	; 0x04
  command->multicast = multicast;

  nwkTxFrame(frame);
     d56:	c3 82       	std	Z+3, r12	; 0x03
     d58:	15 83       	std	Z+5, r17	; 0x05
     d5a:	c7 01       	movw	r24, r14
    nwkTxFrame(frame);
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    nwkFrameFree(frame);
     d5c:	4d d3       	rcall	.+1690   	; 0x13f8 <nwkTxFrame>
     d5e:	ce 01       	movw	r24, r28
     d60:	39 de       	rcall	.-910    	; 0x9d4 <nwkFrameFree>
  }
}
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	1f 91       	pop	r17
     d68:	ff 90       	pop	r15
     d6a:	ef 90       	pop	r14
     d6c:	df 90       	pop	r13
     d6e:	cf 90       	pop	r12
     d70:	bf 90       	pop	r11
     d72:	af 90       	pop	r10
     d74:	08 95       	ret

00000d76 <nwkRouteErrorReceived>:
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
     d76:	fc 01       	movw	r30, r24
     d78:	21 85       	ldd	r18, Z+9	; 0x09
     d7a:	26 30       	cpi	r18, 0x06	; 6
     d7c:	49 f4       	brne	.+18     	; 0xd90 <nwkRouteErrorReceived+0x1a>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
     d7e:	07 80       	ldd	r0, Z+7	; 0x07
     d80:	f0 85       	ldd	r31, Z+8	; 0x08
     d82:	e0 2d       	mov	r30, r0

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
     d84:	65 81       	ldd	r22, Z+5	; 0x05
     d86:	83 81       	ldd	r24, Z+3	; 0x03
     d88:	94 81       	ldd	r25, Z+4	; 0x04
     d8a:	ef de       	rcall	.-546    	; 0xb6a <nwkRouteRemove>

  return true;
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
     d90:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
     d92:	08 95       	ret

00000d94 <nwkRxServiceDataInd>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
     d94:	dc 01       	movw	r26, r24
     d96:	19 96       	adiw	r26, 0x09	; 9
     d98:	2c 91       	ld	r18, X
     d9a:	19 97       	sbiw	r26, 0x09	; 9
     d9c:	22 23       	and	r18, r18
     d9e:	71 f0       	breq	.+28     	; 0xdbc <nwkRxServiceDataInd+0x28>
     da0:	17 96       	adiw	r26, 0x07	; 7
     da2:	ed 91       	ld	r30, X+
     da4:	fc 91       	ld	r31, X
     da6:	18 97       	sbiw	r26, 0x08	; 8
     da8:	20 81       	ld	r18, Z
     daa:	22 23       	and	r18, r18
     dac:	19 f0       	breq	.+6      	; 0xdb4 <nwkRxServiceDataInd+0x20>
     dae:	21 30       	cpi	r18, 0x01	; 1
     db0:	19 f0       	breq	.+6      	; 0xdb8 <nwkRxServiceDataInd+0x24>
     db2:	06 c0       	rjmp	.+12     	; 0xdc0 <nwkRxServiceDataInd+0x2c>
     db4:	b2 c3       	rjmp	.+1892   	; 0x151a <nwkTxAckReceived>
     db6:	08 95       	ret
     db8:	de cf       	rjmp	.-68     	; 0xd76 <nwkRouteErrorReceived>
     dba:	08 95       	ret
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	08 95       	ret
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	08 95       	ret

00000dc4 <nwkRxDuplicateRejectionTimerHandler>:
     dc4:	bc 01       	movw	r22, r24
     dc6:	e9 ed       	ldi	r30, 0xD9	; 217
     dc8:	fe e1       	ldi	r31, 0x1E	; 30
     dca:	2b e0       	ldi	r18, 0x0B	; 11
     dcc:	3f e1       	ldi	r19, 0x1F	; 31
     dce:	40 e0       	ldi	r20, 0x00	; 0
     dd0:	51 e0       	ldi	r21, 0x01	; 1
     dd2:	90 81       	ld	r25, Z
     dd4:	99 23       	and	r25, r25
     dd6:	19 f0       	breq	.+6      	; 0xdde <nwkRxDuplicateRejectionTimerHandler+0x1a>
     dd8:	91 50       	subi	r25, 0x01	; 1
     dda:	90 83       	st	Z, r25
     ddc:	45 2f       	mov	r20, r21
     dde:	35 96       	adiw	r30, 0x05	; 5
     de0:	e2 17       	cp	r30, r18
     de2:	f3 07       	cpc	r31, r19
     de4:	b1 f7       	brne	.-20     	; 0xdd2 <nwkRxDuplicateRejectionTimerHandler+0xe>
     de6:	44 23       	and	r20, r20
     de8:	11 f0       	breq	.+4      	; 0xdee <nwkRxDuplicateRejectionTimerHandler+0x2a>
     dea:	cb 01       	movw	r24, r22
     dec:	30 c6       	rjmp	.+3168   	; 0x1a4e <SYS_TimerStart>
     dee:	08 95       	ret

00000df0 <nwkRxInit>:
     df0:	e9 ed       	ldi	r30, 0xD9	; 217
     df2:	fe e1       	ldi	r31, 0x1E	; 30
     df4:	8b e0       	ldi	r24, 0x0B	; 11
     df6:	9f e1       	ldi	r25, 0x1F	; 31
     df8:	10 82       	st	Z, r1
     dfa:	35 96       	adiw	r30, 0x05	; 5
     dfc:	e8 17       	cp	r30, r24
     dfe:	f9 07       	cpc	r31, r25
     e00:	d9 f7       	brne	.-10     	; 0xdf8 <nwkRxInit+0x8>
     e02:	e7 ec       	ldi	r30, 0xC7	; 199
     e04:	fe e1       	ldi	r31, 0x1E	; 30
     e06:	84 e6       	ldi	r24, 0x64	; 100
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	a0 e0       	ldi	r26, 0x00	; 0
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	86 83       	std	Z+6, r24	; 0x06
     e10:	97 83       	std	Z+7, r25	; 0x07
     e12:	a0 87       	std	Z+8, r26	; 0x08
     e14:	b1 87       	std	Z+9, r27	; 0x09
     e16:	12 86       	std	Z+10, r1	; 0x0a
     e18:	82 ee       	ldi	r24, 0xE2	; 226
     e1a:	96 e0       	ldi	r25, 0x06	; 6
     e1c:	94 87       	std	Z+12, r25	; 0x0c
     e1e:	83 87       	std	Z+11, r24	; 0x0b
     e20:	6a ec       	ldi	r22, 0xCA	; 202
     e22:	76 e0       	ldi	r23, 0x06	; 6
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	96 cc       	rjmp	.-1748   	; 0x754 <NWK_OpenEndpoint>
     e28:	08 95       	ret

00000e2a <PHY_DataInd>:
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	dc 01       	movw	r26, r24
     e30:	ed 91       	ld	r30, X+
     e32:	fc 91       	ld	r31, X
     e34:	11 97       	sbiw	r26, 0x01	; 1
     e36:	21 81       	ldd	r18, Z+1	; 0x01
     e38:	28 38       	cpi	r18, 0x88	; 136
     e3a:	f1 f4       	brne	.+60     	; 0xe78 <PHY_DataInd+0x4e>
     e3c:	20 81       	ld	r18, Z
     e3e:	2f 7d       	andi	r18, 0xDF	; 223
     e40:	21 34       	cpi	r18, 0x41	; 65
     e42:	d1 f4       	brne	.+52     	; 0xe78 <PHY_DataInd+0x4e>
     e44:	12 96       	adiw	r26, 0x02	; 2
     e46:	2c 91       	ld	r18, X
     e48:	20 31       	cpi	r18, 0x10	; 16
     e4a:	b0 f0       	brcs	.+44     	; 0xe78 <PHY_DataInd+0x4e>
     e4c:	ec 01       	movw	r28, r24
     e4e:	89 dd       	rcall	.-1262   	; 0x962 <nwkFrameAlloc>
     e50:	00 97       	sbiw	r24, 0x00	; 0
     e52:	91 f0       	breq	.+36     	; 0xe78 <PHY_DataInd+0x4e>
     e54:	20 e2       	ldi	r18, 0x20	; 32
     e56:	fc 01       	movw	r30, r24
     e58:	20 83       	st	Z, r18
     e5a:	2a 81       	ldd	r18, Y+2	; 0x02
     e5c:	21 83       	std	Z+1, r18	; 0x01
     e5e:	2b 81       	ldd	r18, Y+3	; 0x03
     e60:	ed 57       	subi	r30, 0x7D	; 125
     e62:	ff 4f       	sbci	r31, 0xFF	; 255
     e64:	20 83       	st	Z, r18
     e66:	2c 81       	ldd	r18, Y+4	; 0x04
     e68:	31 96       	adiw	r30, 0x01	; 1
     e6a:	20 83       	st	Z, r18
     e6c:	4a 81       	ldd	r20, Y+2	; 0x02
     e6e:	50 e0       	ldi	r21, 0x00	; 0
     e70:	68 81       	ld	r22, Y
     e72:	79 81       	ldd	r23, Y+1	; 0x01
     e74:	02 96       	adiw	r24, 0x02	; 2
     e76:	d8 d6       	rcall	.+3504   	; 0x1c28 <memcpy>
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	08 95       	ret

00000e7e <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
     e7e:	2f 92       	push	r2
     e80:	3f 92       	push	r3
     e82:	4f 92       	push	r4
     e84:	5f 92       	push	r5
     e86:	6f 92       	push	r6
     e88:	7f 92       	push	r7
     e8a:	8f 92       	push	r8
     e8c:	9f 92       	push	r9
     e8e:	af 92       	push	r10
     e90:	bf 92       	push	r11
     e92:	cf 92       	push	r12
     e94:	df 92       	push	r13
     e96:	ef 92       	push	r14
     e98:	ff 92       	push	r15
     e9a:	0f 93       	push	r16
     e9c:	1f 93       	push	r17
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	2c 97       	sbiw	r28, 0x0c	; 12
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	f8 94       	cli
     eac:	de bf       	out	0x3e, r29	; 62
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
     eb2:	00 e0       	ldi	r16, 0x00	; 0
     eb4:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
     eb6:	0f 2e       	mov	r0, r31
     eb8:	f4 e2       	ldi	r31, 0x24	; 36
     eba:	bf 2e       	mov	r11, r31
     ebc:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
     ebe:	0f 2e       	mov	r0, r31
     ec0:	fa ea       	ldi	r31, 0xAA	; 170
     ec2:	ef 2e       	mov	r14, r31
     ec4:	ff e1       	ldi	r31, 0x1F	; 31
     ec6:	ff 2e       	mov	r15, r31
     ec8:	f0 2d       	mov	r31, r0
    ack = false;

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
      nwkIb.addr == frame->header.nwkDstAddr &&
      0 == frame->header.nwkFcf.multicast)
    ack = true;
     eca:	55 24       	eor	r5, r5
     ecc:	53 94       	inc	r5
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
     ece:	68 94       	set
     ed0:	aa 24       	eor	r10, r10
     ed2:	a4 f8       	bld	r10, 4
  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
     ed4:	68 94       	set
     ed6:	77 24       	eor	r7, r7
     ed8:	73 f8       	bld	r7, 3

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
     eda:	68 94       	set
     edc:	66 24       	eor	r6, r6
     ede:	62 f8       	bld	r6, 2
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
     ee0:	31 2c       	mov	r3, r1
     ee2:	21 2c       	mov	r2, r1
    return true;

  freeEntry->src = header->nwkSrcAddr;
  freeEntry->seq = header->nwkSeq;
  freeEntry->mask = 1;
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
     ee4:	0f 2e       	mov	r0, r31
     ee6:	ff e1       	ldi	r31, 0x1F	; 31
     ee8:	4f 2e       	mov	r4, r31
     eea:	f0 2d       	mov	r31, r0
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
     eec:	cc 24       	eor	r12, r12
     eee:	c3 94       	inc	r12
     ef0:	d1 2c       	mov	r13, r1
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
     ef2:	da c1       	rjmp	.+948    	; 0x12a8 <nwkRxTaskHandler+0x42a>
  {
    switch (frame->state)
     ef4:	d8 01       	movw	r26, r16
     ef6:	8c 91       	ld	r24, X
     ef8:	82 32       	cpi	r24, 0x22	; 34
     efa:	09 f4       	brne	.+2      	; 0xefe <nwkRxTaskHandler+0x80>
     efc:	05 c1       	rjmp	.+522    	; 0x1108 <nwkRxTaskHandler+0x28a>
     efe:	18 f4       	brcc	.+6      	; 0xf06 <nwkRxTaskHandler+0x88>
     f00:	80 32       	cpi	r24, 0x20	; 32
     f02:	41 f0       	breq	.+16     	; 0xf14 <nwkRxTaskHandler+0x96>
     f04:	d1 c1       	rjmp	.+930    	; 0x12a8 <nwkRxTaskHandler+0x42a>
     f06:	83 32       	cpi	r24, 0x23	; 35
     f08:	09 f4       	brne	.+2      	; 0xf0c <nwkRxTaskHandler+0x8e>
     f0a:	c9 c1       	rjmp	.+914    	; 0x129e <nwkRxTaskHandler+0x420>
     f0c:	84 32       	cpi	r24, 0x24	; 36
     f0e:	09 f4       	brne	.+2      	; 0xf12 <nwkRxTaskHandler+0x94>
     f10:	c9 c1       	rjmp	.+914    	; 0x12a4 <nwkRxTaskHandler+0x426>
     f12:	ca c1       	rjmp	.+916    	; 0x12a8 <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
     f14:	f8 01       	movw	r30, r16
     f16:	b0 82       	st	Z, r11

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
     f18:	83 85       	ldd	r24, Z+11	; 0x0b

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
     f1a:	98 2f       	mov	r25, r24
     f1c:	9a 70       	andi	r25, 0x0A	; 10
     f1e:	09 f0       	breq	.+2      	; 0xf22 <nwkRxTaskHandler+0xa4>
     f20:	c3 c1       	rjmp	.+902    	; 0x12a8 <nwkRxTaskHandler+0x42a>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     f22:	25 81       	ldd	r18, Z+5	; 0x05
     f24:	36 81       	ldd	r19, Z+6	; 0x06
     f26:	2f 3f       	cpi	r18, 0xFF	; 255
     f28:	3f 4f       	sbci	r19, 0xFF	; 255
     f2a:	91 f4       	brne	.+36     	; 0xf50 <nwkRxTaskHandler+0xd2>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
     f2c:	d8 01       	movw	r26, r16
     f2e:	1f 96       	adiw	r26, 0x0f	; 15
     f30:	8d 91       	ld	r24, X+
     f32:	9c 91       	ld	r25, X
     f34:	50 97       	sbiw	r26, 0x10	; 16
     f36:	f7 01       	movw	r30, r14
     f38:	20 81       	ld	r18, Z
     f3a:	31 81       	ldd	r19, Z+1	; 0x01
     f3c:	28 17       	cp	r18, r24
     f3e:	39 07       	cpc	r19, r25
     f40:	19 f0       	breq	.+6      	; 0xf48 <nwkRxTaskHandler+0xca>
     f42:	01 96       	adiw	r24, 0x01	; 1
     f44:	09 f0       	breq	.+2      	; 0xf48 <nwkRxTaskHandler+0xca>
     f46:	b0 c1       	rjmp	.+864    	; 0x12a8 <nwkRxTaskHandler+0x42a>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
     f48:	e2 e2       	ldi	r30, 0x22	; 34
     f4a:	d8 01       	movw	r26, r16
     f4c:	ec 93       	st	X, r30
     f4e:	ac c1       	rjmp	.+856    	; 0x12a8 <nwkRxTaskHandler+0x42a>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
     f50:	d8 01       	movw	r26, r16
     f52:	1f 96       	adiw	r26, 0x0f	; 15
     f54:	2d 91       	ld	r18, X+
     f56:	3c 91       	ld	r19, X
     f58:	50 97       	sbiw	r26, 0x10	; 16
     f5a:	2f 3f       	cpi	r18, 0xFF	; 255
     f5c:	3f 4f       	sbci	r19, 0xFF	; 255
     f5e:	11 f4       	brne	.+4      	; 0xf64 <nwkRxTaskHandler+0xe6>
     f60:	80 fd       	sbrc	r24, 0
     f62:	a2 c1       	rjmp	.+836    	; 0x12a8 <nwkRxTaskHandler+0x42a>
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
     f64:	f7 01       	movw	r30, r14
     f66:	20 81       	ld	r18, Z
     f68:	31 81       	ldd	r19, Z+1	; 0x01
     f6a:	d8 01       	movw	r26, r16
     f6c:	1d 96       	adiw	r26, 0x0d	; 13
     f6e:	8d 91       	ld	r24, X+
     f70:	9c 91       	ld	r25, X
     f72:	1e 97       	sbiw	r26, 0x0e	; 14
     f74:	28 17       	cp	r18, r24
     f76:	39 07       	cpc	r19, r25
     f78:	09 f4       	brne	.+2      	; 0xf7c <nwkRxTaskHandler+0xfe>
     f7a:	96 c1       	rjmp	.+812    	; 0x12a8 <nwkRxTaskHandler+0x42a>
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
     f7c:	c8 01       	movw	r24, r16
     f7e:	fa dd       	rcall	.-1036   	; 0xb74 <nwkRouteFrameReceived>
     f80:	e5 ed       	ldi	r30, 0xD5	; 213
     f82:	fe e1       	ldi	r31, 0x1E	; 30
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	90 e0       	ldi	r25, 0x00	; 0
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
     f88:	83 2c       	mov	r8, r3
     f8a:	92 2c       	mov	r9, r2

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
     f8c:	9c 01       	movw	r18, r24

    if (entry->ttl && header->nwkSrcAddr == entry->src)
     f8e:	44 81       	ldd	r20, Z+4	; 0x04
     f90:	44 23       	and	r20, r20
     f92:	09 f4       	brne	.+2      	; 0xf96 <nwkRxTaskHandler+0x118>
     f94:	74 c0       	rjmp	.+232    	; 0x107e <nwkRxTaskHandler+0x200>
     f96:	d8 01       	movw	r26, r16
     f98:	1d 96       	adiw	r26, 0x0d	; 13
     f9a:	6d 91       	ld	r22, X+
     f9c:	7c 91       	ld	r23, X
     f9e:	1e 97       	sbiw	r26, 0x0e	; 14
     fa0:	40 81       	ld	r20, Z
     fa2:	51 81       	ldd	r21, Z+1	; 0x01
     fa4:	64 17       	cp	r22, r20
     fa6:	75 07       	cpc	r23, r21
     fa8:	09 f0       	breq	.+2      	; 0xfac <nwkRxTaskHandler+0x12e>
     faa:	6a c0       	rjmp	.+212    	; 0x1080 <nwkRxTaskHandler+0x202>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
     fac:	1c 96       	adiw	r26, 0x0c	; 12
     fae:	8c 91       	ld	r24, X
     fb0:	1c 97       	sbiw	r26, 0x0c	; 12
     fb2:	f9 01       	movw	r30, r18
     fb4:	ee 0f       	add	r30, r30
     fb6:	ff 1f       	adc	r31, r31
     fb8:	ee 0f       	add	r30, r30
     fba:	ff 1f       	adc	r31, r31
     fbc:	e2 0f       	add	r30, r18
     fbe:	f3 1f       	adc	r31, r19
     fc0:	eb 52       	subi	r30, 0x2B	; 43
     fc2:	f1 4e       	sbci	r31, 0xE1	; 225
     fc4:	92 81       	ldd	r25, Z+2	; 0x02
     fc6:	98 1b       	sub	r25, r24

      if (diff < 8)
     fc8:	98 30       	cpi	r25, 0x08	; 8
     fca:	08 f0       	brcs	.+2      	; 0xfce <nwkRxTaskHandler+0x150>
     fcc:	3e c0       	rjmp	.+124    	; 0x104a <nwkRxTaskHandler+0x1cc>
      {
        if (entry->mask & (1 << diff))
     fce:	f9 01       	movw	r30, r18
     fd0:	ee 0f       	add	r30, r30
     fd2:	ff 1f       	adc	r31, r31
     fd4:	ee 0f       	add	r30, r30
     fd6:	ff 1f       	adc	r31, r31
     fd8:	e2 0f       	add	r30, r18
     fda:	f3 1f       	adc	r31, r19
     fdc:	eb 52       	subi	r30, 0x2B	; 43
     fde:	f1 4e       	sbci	r31, 0xE1	; 225
     fe0:	83 81       	ldd	r24, Z+3	; 0x03
     fe2:	48 2f       	mov	r20, r24
     fe4:	50 e0       	ldi	r21, 0x00	; 0
     fe6:	09 2e       	mov	r0, r25
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <nwkRxTaskHandler+0x170>
     fea:	55 95       	asr	r21
     fec:	47 95       	ror	r20
     fee:	0a 94       	dec	r0
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <nwkRxTaskHandler+0x16c>
     ff2:	40 ff       	sbrs	r20, 0
     ff4:	17 c0       	rjmp	.+46     	; 0x1024 <nwkRxTaskHandler+0x1a6>
        {
        #ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
     ff6:	f7 01       	movw	r30, r14
     ff8:	20 81       	ld	r18, Z
     ffa:	31 81       	ldd	r19, Z+1	; 0x01
     ffc:	17 96       	adiw	r26, 0x07	; 7
     ffe:	8d 91       	ld	r24, X+
    1000:	9c 91       	ld	r25, X
    1002:	18 97       	sbiw	r26, 0x08	; 8
    1004:	28 17       	cp	r18, r24
    1006:	39 07       	cpc	r19, r25
    1008:	09 f0       	breq	.+2      	; 0x100c <nwkRxTaskHandler+0x18e>
    100a:	4e c1       	rjmp	.+668    	; 0x12a8 <nwkRxTaskHandler+0x42a>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
    100c:	1b 96       	adiw	r26, 0x0b	; 11
    100e:	6c 91       	ld	r22, X
    1010:	1b 97       	sbiw	r26, 0x0b	; 11
    1012:	63 fb       	bst	r22, 3
    1014:	66 27       	eor	r22, r22
    1016:	60 f9       	bld	r22, 0
    1018:	1f 96       	adiw	r26, 0x0f	; 15
    101a:	8d 91       	ld	r24, X+
    101c:	9c 91       	ld	r25, X
    101e:	50 97       	sbiw	r26, 0x10	; 16
    1020:	a4 dd       	rcall	.-1208   	; 0xb6a <nwkRouteRemove>
    1022:	42 c1       	rjmp	.+644    	; 0x12a8 <nwkRxTaskHandler+0x42a>
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
    1024:	f9 01       	movw	r30, r18
    1026:	ee 0f       	add	r30, r30
    1028:	ff 1f       	adc	r31, r31
    102a:	ee 0f       	add	r30, r30
    102c:	ff 1f       	adc	r31, r31
    102e:	2e 0f       	add	r18, r30
    1030:	3f 1f       	adc	r19, r31
    1032:	f9 01       	movw	r30, r18
    1034:	eb 52       	subi	r30, 0x2B	; 43
    1036:	f1 4e       	sbci	r31, 0xE1	; 225
    1038:	96 01       	movw	r18, r12
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <nwkRxTaskHandler+0x1c2>
    103c:	22 0f       	add	r18, r18
    103e:	33 1f       	adc	r19, r19
    1040:	9a 95       	dec	r25
    1042:	e2 f7       	brpl	.-8      	; 0x103c <nwkRxTaskHandler+0x1be>
    1044:	82 2b       	or	r24, r18
    1046:	83 83       	std	Z+3, r24	; 0x03
    1048:	36 c1       	rjmp	.+620    	; 0x12b6 <nwkRxTaskHandler+0x438>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
    104a:	f9 01       	movw	r30, r18
    104c:	ee 0f       	add	r30, r30
    104e:	ff 1f       	adc	r31, r31
    1050:	ee 0f       	add	r30, r30
    1052:	ff 1f       	adc	r31, r31
    1054:	2e 0f       	add	r18, r30
    1056:	3f 1f       	adc	r19, r31
    1058:	f9 01       	movw	r30, r18
    105a:	eb 52       	subi	r30, 0x2B	; 43
    105c:	f1 4e       	sbci	r31, 0xE1	; 225
    105e:	82 83       	std	Z+2, r24	; 0x02
        entry->mask = (entry->mask << shift) | 1;
    1060:	83 81       	ldd	r24, Z+3	; 0x03
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	91 95       	neg	r25
    1068:	a9 01       	movw	r20, r18
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <nwkRxTaskHandler+0x1f2>
    106c:	44 0f       	add	r20, r20
    106e:	55 1f       	adc	r21, r21
    1070:	9a 95       	dec	r25
    1072:	e2 f7       	brpl	.-8      	; 0x106c <nwkRxTaskHandler+0x1ee>
    1074:	ca 01       	movw	r24, r20
    1076:	81 60       	ori	r24, 0x01	; 1
    1078:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
    107a:	44 82       	std	Z+4, r4	; 0x04
    107c:	1c c1       	rjmp	.+568    	; 0x12b6 <nwkRxTaskHandler+0x438>
        return false;
      }
    }

    if (0 == entry->ttl)
      freeEntry = entry;
    107e:	4f 01       	movw	r8, r30
    1080:	01 96       	adiw	r24, 0x01	; 1
    1082:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1084:	8a 30       	cpi	r24, 0x0A	; 10
    1086:	91 05       	cpc	r25, r1
    1088:	09 f0       	breq	.+2      	; 0x108c <nwkRxTaskHandler+0x20e>
    108a:	80 cf       	rjmp	.-256    	; 0xf8c <nwkRxTaskHandler+0x10e>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
    108c:	81 14       	cp	r8, r1
    108e:	91 04       	cpc	r9, r1
    1090:	09 f4       	brne	.+2      	; 0x1094 <nwkRxTaskHandler+0x216>
    1092:	0a c1       	rjmp	.+532    	; 0x12a8 <nwkRxTaskHandler+0x42a>
    return true;

  freeEntry->src = header->nwkSrcAddr;
    1094:	d8 01       	movw	r26, r16
    1096:	1d 96       	adiw	r26, 0x0d	; 13
    1098:	8d 91       	ld	r24, X+
    109a:	9c 91       	ld	r25, X
    109c:	1e 97       	sbiw	r26, 0x0e	; 14
    109e:	f4 01       	movw	r30, r8
    10a0:	91 83       	std	Z+1, r25	; 0x01
    10a2:	80 83       	st	Z, r24
  freeEntry->seq = header->nwkSeq;
    10a4:	1c 96       	adiw	r26, 0x0c	; 12
    10a6:	8c 91       	ld	r24, X
    10a8:	82 83       	std	Z+2, r24	; 0x02
  freeEntry->mask = 1;
    10aa:	53 82       	std	Z+3, r5	; 0x03
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    10ac:	44 82       	std	Z+4, r4	; 0x04

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    10ae:	87 ec       	ldi	r24, 0xC7	; 199
    10b0:	9e e1       	ldi	r25, 0x1E	; 30
    10b2:	cd d4       	rcall	.+2458   	; 0x1a4e <SYS_TimerStart>
    10b4:	00 c1       	rjmp	.+512    	; 0x12b6 <nwkRxTaskHandler+0x438>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    10b6:	d7 01       	movw	r26, r14
    10b8:	2d 91       	ld	r18, X+
    10ba:	3c 91       	ld	r19, X
    10bc:	f8 01       	movw	r30, r16
    10be:	87 85       	ldd	r24, Z+15	; 0x0f
    10c0:	90 89       	ldd	r25, Z+16	; 0x10
    10c2:	28 17       	cp	r18, r24
    10c4:	39 07       	cpc	r19, r25
    10c6:	81 f0       	breq	.+32     	; 0x10e8 <nwkRxTaskHandler+0x26a>
    10c8:	43 85       	ldd	r20, Z+11	; 0x0b
    10ca:	42 fd       	sbrc	r20, 2
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
    10cc:	0b c0       	rjmp	.+22     	; 0x10e4 <nwkRxTaskHandler+0x266>
    10ce:	c8 01       	movw	r24, r16
    10d0:	e1 d1       	rcall	.+962    	; 0x1494 <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    10d2:	d7 01       	movw	r26, r14
    10d4:	2d 91       	ld	r18, X+
    10d6:	3c 91       	ld	r19, X
    10d8:	f8 01       	movw	r30, r16
    10da:	87 85       	ldd	r24, Z+15	; 0x0f
    10dc:	90 89       	ldd	r25, Z+16	; 0x10
    10de:	28 17       	cp	r18, r24
    10e0:	39 07       	cpc	r19, r25
    10e2:	11 f0       	breq	.+4      	; 0x10e8 <nwkRxTaskHandler+0x26a>
    10e4:	01 96       	adiw	r24, 0x01	; 1
    10e6:	21 f4       	brne	.+8      	; 0x10f0 <nwkRxTaskHandler+0x272>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    10e8:	e2 e2       	ldi	r30, 0x22	; 34
    10ea:	d8 01       	movw	r26, r16
    10ec:	ec 93       	st	X, r30
    10ee:	dc c0       	rjmp	.+440    	; 0x12a8 <nwkRxTaskHandler+0x42a>
    }

  #ifdef NWK_ENABLE_ROUTING
    else if (nwkIb.addr == header->macDstAddr)
    10f0:	d8 01       	movw	r26, r16
    10f2:	17 96       	adiw	r26, 0x07	; 7
    10f4:	8d 91       	ld	r24, X+
    10f6:	9c 91       	ld	r25, X
    10f8:	18 97       	sbiw	r26, 0x08	; 8
    10fa:	82 17       	cp	r24, r18
    10fc:	93 07       	cpc	r25, r19
    10fe:	09 f0       	breq	.+2      	; 0x1102 <nwkRxTaskHandler+0x284>
    1100:	d3 c0       	rjmp	.+422    	; 0x12a8 <nwkRxTaskHandler+0x42a>
    {
      frame->state = NWK_RX_STATE_ROUTE;
    1102:	e3 e2       	ldi	r30, 0x23	; 35
    1104:	ec 93       	st	X, r30
    1106:	d0 c0       	rjmp	.+416    	; 0x12a8 <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
    1108:	10 92 d4 1e 	sts	0x1ED4, r1	; 0x801ed4 <nwkRxAckControl>
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    110c:	d8 01       	movw	r26, r16
    110e:	51 96       	adiw	r26, 0x11	; 17
    1110:	8c 91       	ld	r24, X
    1112:	51 97       	sbiw	r26, 0x11	; 17
    1114:	82 95       	swap	r24
    1116:	8f 70       	andi	r24, 0x0F	; 15
    1118:	e8 2f       	mov	r30, r24
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	ee 0f       	add	r30, r30
    111e:	ff 1f       	adc	r31, r31
    1120:	e0 55       	subi	r30, 0x50	; 80
    1122:	f0 4e       	sbci	r31, 0xE0	; 224
    1124:	01 90       	ld	r0, Z+
    1126:	f0 81       	ld	r31, Z
    1128:	e0 2d       	mov	r30, r0
    112a:	30 97       	sbiw	r30, 0x00	; 0
    112c:	09 f4       	brne	.+2      	; 0x1130 <nwkRxTaskHandler+0x2b2>
    112e:	60 c0       	rjmp	.+192    	; 0x11f0 <nwkRxTaskHandler+0x372>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
    1130:	1d 96       	adiw	r26, 0x0d	; 13
    1132:	2d 91       	ld	r18, X+
    1134:	3c 91       	ld	r19, X
    1136:	1e 97       	sbiw	r26, 0x0e	; 14
    1138:	3a 83       	std	Y+2, r19	; 0x02
    113a:	29 83       	std	Y+1, r18	; 0x01
  ind.dstAddr = header->nwkDstAddr;
    113c:	1f 96       	adiw	r26, 0x0f	; 15
    113e:	4d 91       	ld	r20, X+
    1140:	5c 91       	ld	r21, X
    1142:	50 97       	sbiw	r26, 0x10	; 16
    1144:	5c 83       	std	Y+4, r21	; 0x04
    1146:	4b 83       	std	Y+3, r20	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
    1148:	51 96       	adiw	r26, 0x11	; 17
    114a:	9c 91       	ld	r25, X
    114c:	51 97       	sbiw	r26, 0x11	; 17
    114e:	9f 70       	andi	r25, 0x0F	; 15
    1150:	9d 83       	std	Y+5, r25	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
    1152:	8e 83       	std	Y+6, r24	; 0x06
  ind.data = frame->payload;
    1154:	af 57       	subi	r26, 0x7F	; 127
    1156:	bf 4f       	sbci	r27, 0xFF	; 255
    1158:	8d 91       	ld	r24, X+
    115a:	9c 91       	ld	r25, X
    115c:	99 87       	std	Y+9, r25	; 0x09
    115e:	88 87       	std	Y+8, r24	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
    1160:	b8 01       	movw	r22, r16
    1162:	6e 5f       	subi	r22, 0xFE	; 254
    1164:	7f 4f       	sbci	r23, 0xFF	; 255
  ind.size = nwkFramePayloadSize(frame);
    1166:	86 1b       	sub	r24, r22
    1168:	97 0b       	sbc	r25, r23
    116a:	d8 01       	movw	r26, r16
    116c:	11 96       	adiw	r26, 0x01	; 1
    116e:	9c 91       	ld	r25, X
    1170:	11 97       	sbiw	r26, 0x01	; 1
    1172:	98 1b       	sub	r25, r24
    1174:	9a 87       	std	Y+10, r25	; 0x0a
  ind.lqi = frame->rx.lqi;
    1176:	ad 57       	subi	r26, 0x7D	; 125
    1178:	bf 4f       	sbci	r27, 0xFF	; 255
    117a:	8c 91       	ld	r24, X
    117c:	8b 87       	std	Y+11, r24	; 0x0b
  ind.rssi = frame->rx.rssi;
    117e:	11 96       	adiw	r26, 0x01	; 1
    1180:	8c 91       	ld	r24, X
    1182:	8c 87       	std	Y+12, r24	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    1184:	d8 01       	movw	r26, r16
    1186:	1b 96       	adiw	r26, 0x0b	; 11
    1188:	9c 91       	ld	r25, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    118a:	69 2f       	mov	r22, r25
    118c:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    118e:	92 fd       	sbrc	r25, 2
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <nwkRxTaskHandler+0x318>
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	01 c0       	rjmp	.+2      	; 0x1198 <nwkRxTaskHandler+0x31a>
    1196:	80 e2       	ldi	r24, 0x20	; 32
    1198:	86 2b       	or	r24, r22
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    119a:	93 fd       	sbrc	r25, 3
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <nwkRxTaskHandler+0x324>
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	01 c0       	rjmp	.+2      	; 0x11a4 <nwkRxTaskHandler+0x326>
    11a2:	90 e4       	ldi	r25, 0x40	; 64
    11a4:	89 2b       	or	r24, r25
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    11a6:	4f 3f       	cpi	r20, 0xFF	; 255
    11a8:	5f 4f       	sbci	r21, 0xFF	; 255
    11aa:	11 f0       	breq	.+4      	; 0x11b0 <nwkRxTaskHandler+0x332>
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	01 c0       	rjmp	.+2      	; 0x11b2 <nwkRxTaskHandler+0x334>
    11b0:	96 2d       	mov	r25, r6
    11b2:	89 2b       	or	r24, r25
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    11b4:	d8 01       	movw	r26, r16
    11b6:	19 96       	adiw	r26, 0x09	; 9
    11b8:	4d 91       	ld	r20, X+
    11ba:	5c 91       	ld	r21, X
    11bc:	1a 97       	sbiw	r26, 0x0a	; 10
    11be:	24 17       	cp	r18, r20
    11c0:	35 07       	cpc	r19, r21
    11c2:	11 f0       	breq	.+4      	; 0x11c8 <nwkRxTaskHandler+0x34a>
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	01 c0       	rjmp	.+2      	; 0x11ca <nwkRxTaskHandler+0x34c>
    11c8:	97 2d       	mov	r25, r7
    11ca:	89 2b       	or	r24, r25
    11cc:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    11ce:	d8 01       	movw	r26, r16
    11d0:	15 96       	adiw	r26, 0x05	; 5
    11d2:	2d 91       	ld	r18, X+
    11d4:	3c 91       	ld	r19, X
    11d6:	16 97       	sbiw	r26, 0x06	; 6
    11d8:	2f 3f       	cpi	r18, 0xFF	; 255
    11da:	3f 4f       	sbci	r19, 0xFF	; 255
    11dc:	11 f0       	breq	.+4      	; 0x11e2 <nwkRxTaskHandler+0x364>
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	01 c0       	rjmp	.+2      	; 0x11e4 <nwkRxTaskHandler+0x366>
    11e2:	9a 2d       	mov	r25, r10
    11e4:	89 2b       	or	r24, r25
    11e6:	8f 83       	std	Y+7, r24	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    11e8:	ce 01       	movw	r24, r28
    11ea:	01 96       	adiw	r24, 0x01	; 1
    11ec:	19 95       	eicall
    11ee:	01 c0       	rjmp	.+2      	; 0x11f2 <nwkRxTaskHandler+0x374>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
    11f0:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
    11f2:	f8 01       	movw	r30, r16
    11f4:	93 85       	ldd	r25, Z+11	; 0x0b
    11f6:	90 ff       	sbrs	r25, 0
    ack = false;
    11f8:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    11fa:	d8 01       	movw	r26, r16
    11fc:	17 96       	adiw	r26, 0x07	; 7
    11fe:	2d 91       	ld	r18, X+
    1200:	3c 91       	ld	r19, X
    1202:	18 97       	sbiw	r26, 0x08	; 8
    1204:	2f 3f       	cpi	r18, 0xFF	; 255
    1206:	3f 4f       	sbci	r19, 0xFF	; 255
    1208:	69 f4       	brne	.+26     	; 0x1224 <nwkRxTaskHandler+0x3a6>
    120a:	f7 01       	movw	r30, r14
    120c:	40 81       	ld	r20, Z
    120e:	51 81       	ldd	r21, Z+1	; 0x01
    1210:	d8 01       	movw	r26, r16
    1212:	1f 96       	adiw	r26, 0x0f	; 15
    1214:	2d 91       	ld	r18, X+
    1216:	3c 91       	ld	r19, X
    1218:	50 97       	sbiw	r26, 0x10	; 16
    121a:	42 17       	cp	r20, r18
    121c:	53 07       	cpc	r21, r19
    121e:	11 f4       	brne	.+4      	; 0x1224 <nwkRxTaskHandler+0x3a6>
      nwkIb.addr == frame->header.nwkDstAddr &&
    1220:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    1222:	85 2d       	mov	r24, r5

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    1224:	f8 01       	movw	r30, r16
    1226:	25 81       	ldd	r18, Z+5	; 0x05
    1228:	36 81       	ldd	r19, Z+6	; 0x06
    122a:	2f 3f       	cpi	r18, 0xFF	; 255
    122c:	3f 4f       	sbci	r19, 0xFF	; 255
    122e:	a1 f1       	breq	.+104    	; 0x1298 <nwkRxTaskHandler+0x41a>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    1230:	d7 01       	movw	r26, r14
    1232:	2d 91       	ld	r18, X+
    1234:	3c 91       	ld	r19, X
    1236:	2f 3f       	cpi	r18, 0xFF	; 255
    1238:	3f 4f       	sbci	r19, 0xFF	; 255
    ack = false;

  if (ack)
    123a:	71 f1       	breq	.+92     	; 0x1298 <nwkRxTaskHandler+0x41a>
    123c:	88 23       	and	r24, r24
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
    123e:	61 f1       	breq	.+88     	; 0x1298 <nwkRxTaskHandler+0x41a>
    1240:	90 db       	rcall	.-2272   	; 0x962 <nwkFrameAlloc>
    1242:	4c 01       	movw	r8, r24
    1244:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(ack);
    1246:	41 f1       	breq	.+80     	; 0x1298 <nwkRxTaskHandler+0x41a>
    1248:	f4 db       	rcall	.-2072   	; 0xa32 <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
    124a:	f4 01       	movw	r30, r8
    124c:	81 81       	ldd	r24, Z+1	; 0x01
    124e:	8d 5f       	subi	r24, 0xFD	; 253
    1250:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
    1252:	e9 57       	subi	r30, 0x79	; 121
    1254:	ff 4f       	sbci	r31, 0xFF	; 255
    1256:	11 82       	std	Z+1, r1	; 0x01
    1258:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    125a:	d8 01       	movw	r26, r16
    125c:	1b 96       	adiw	r26, 0x0b	; 11
    125e:	8c 91       	ld	r24, X
    1260:	1b 97       	sbiw	r26, 0x0b	; 11
    1262:	86 95       	lsr	r24
    1264:	81 70       	andi	r24, 0x01	; 1
    1266:	f4 01       	movw	r30, r8
    1268:	93 85       	ldd	r25, Z+11	; 0x0b
    126a:	80 fb       	bst	r24, 0
    126c:	91 f9       	bld	r25, 1
    126e:	93 87       	std	Z+11, r25	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    1270:	1d 96       	adiw	r26, 0x0d	; 13
    1272:	8d 91       	ld	r24, X+
    1274:	9c 91       	ld	r25, X
    1276:	1e 97       	sbiw	r26, 0x0e	; 14
    1278:	90 8b       	std	Z+16, r25	; 0x10
    127a:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
    127c:	ef 57       	subi	r30, 0x7F	; 127
    127e:	ff 4f       	sbci	r31, 0xFF	; 255
    1280:	01 90       	ld	r0, Z+
    1282:	f0 81       	ld	r31, Z
    1284:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
    1286:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
    1288:	80 91 d4 1e 	lds	r24, 0x1ED4	; 0x801ed4 <nwkRxAckControl>
  command->seq = frame->header.nwkSeq;
    128c:	82 83       	std	Z+2, r24	; 0x02
    128e:	1c 96       	adiw	r26, 0x0c	; 12
    1290:	8c 91       	ld	r24, X

  nwkTxFrame(ack);
    1292:	81 83       	std	Z+1, r24	; 0x01
    1294:	c4 01       	movw	r24, r8
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    1296:	b0 d0       	rcall	.+352    	; 0x13f8 <nwkTxFrame>
    1298:	d8 01       	movw	r26, r16
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    129a:	bc 92       	st	X, r11
    129c:	05 c0       	rjmp	.+10     	; 0x12a8 <nwkRxTaskHandler+0x42a>
    129e:	c8 01       	movw	r24, r16
      } break;
    12a0:	1e dd       	rcall	.-1476   	; 0xcde <nwkRouteFrame>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <nwkRxTaskHandler+0x42a>
    12a4:	c8 01       	movw	r24, r16
    12a6:	96 db       	rcall	.-2260   	; 0x9d4 <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    12a8:	c8 01       	movw	r24, r16
    12aa:	9e db       	rcall	.-2244   	; 0x9e8 <nwkFrameNext>
    12ac:	8c 01       	movw	r16, r24
    12ae:	89 2b       	or	r24, r25
    12b0:	09 f0       	breq	.+2      	; 0x12b4 <nwkRxTaskHandler+0x436>
    12b2:	20 ce       	rjmp	.-960    	; 0xef4 <nwkRxTaskHandler+0x76>
    12b4:	07 c0       	rjmp	.+14     	; 0x12c4 <nwkRxTaskHandler+0x446>
    12b6:	f8 01       	movw	r30, r16
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    12b8:	87 81       	ldd	r24, Z+7	; 0x07
    12ba:	90 85       	ldd	r25, Z+8	; 0x08
    12bc:	01 96       	adiw	r24, 0x01	; 1
    12be:	09 f0       	breq	.+2      	; 0x12c2 <nwkRxTaskHandler+0x444>
    12c0:	08 cf       	rjmp	.-496    	; 0x10d2 <nwkRxTaskHandler+0x254>
    12c2:	f9 ce       	rjmp	.-526    	; 0x10b6 <nwkRxTaskHandler+0x238>
    12c4:	2c 96       	adiw	r28, 0x0c	; 12
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	de bf       	out	0x3e, r29	; 62
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cd bf       	out	0x3d, r28	; 61
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	1f 91       	pop	r17
    12d6:	0f 91       	pop	r16
    12d8:	ff 90       	pop	r15
    12da:	ef 90       	pop	r14
    12dc:	df 90       	pop	r13
    12de:	cf 90       	pop	r12
    12e0:	bf 90       	pop	r11
    12e2:	af 90       	pop	r10
    12e4:	9f 90       	pop	r9
    12e6:	8f 90       	pop	r8
    12e8:	7f 90       	pop	r7
    12ea:	6f 90       	pop	r6
    12ec:	5f 90       	pop	r5
    12ee:	4f 90       	pop	r4
    12f0:	3f 90       	pop	r3
    12f2:	2f 90       	pop	r2
    12f4:	08 95       	ret

000012f6 <nwkTxDelayTimerHandler>:
    12f6:	ef 92       	push	r14
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
  frame->tx.status = status;
    12f8:	ff 92       	push	r15
    12fa:	0f 93       	push	r16
    12fc:	1f 93       	push	r17
    12fe:	cf 93       	push	r28
    1300:	7c 01       	movw	r14, r24
    1302:	10 e0       	ldi	r17, 0x00	; 0
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	01 e0       	ldi	r16, 0x01	; 1
    130a:	c3 e1       	ldi	r28, 0x13	; 19
    130c:	13 c0       	rjmp	.+38     	; 0x1334 <nwkTxDelayTimerHandler+0x3e>
    130e:	fc 01       	movw	r30, r24
    1310:	20 81       	ld	r18, Z
    1312:	21 31       	cpi	r18, 0x11	; 17
    1314:	79 f4       	brne	.+30     	; 0x1334 <nwkTxDelayTimerHandler+0x3e>
    1316:	ec 57       	subi	r30, 0x7C	; 124
    1318:	ff 4f       	sbci	r31, 0xFF	; 255
    131a:	20 81       	ld	r18, Z
    131c:	31 81       	ldd	r19, Z+1	; 0x01
    131e:	21 50       	subi	r18, 0x01	; 1
    1320:	31 09       	sbc	r19, r1
    1322:	31 83       	std	Z+1, r19	; 0x01
    1324:	20 83       	st	Z, r18
    1326:	23 2b       	or	r18, r19
    1328:	21 f4       	brne	.+8      	; 0x1332 <nwkTxDelayTimerHandler+0x3c>
    132a:	fc 01       	movw	r30, r24
    132c:	c0 83       	st	Z, r28
    132e:	10 2f       	mov	r17, r16
    1330:	01 c0       	rjmp	.+2      	; 0x1334 <nwkTxDelayTimerHandler+0x3e>
    1332:	10 2f       	mov	r17, r16
    1334:	59 db       	rcall	.-2382   	; 0x9e8 <nwkFrameNext>
    1336:	00 97       	sbiw	r24, 0x00	; 0
    1338:	51 f7       	brne	.-44     	; 0x130e <nwkTxDelayTimerHandler+0x18>
    133a:	11 23       	and	r17, r17
    133c:	11 f0       	breq	.+4      	; 0x1342 <nwkTxDelayTimerHandler+0x4c>
    133e:	c7 01       	movw	r24, r14
    1340:	86 d3       	rcall	.+1804   	; 0x1a4e <SYS_TimerStart>
    1342:	cf 91       	pop	r28
    1344:	1f 91       	pop	r17
    1346:	0f 91       	pop	r16
    1348:	ff 90       	pop	r15
    134a:	ef 90       	pop	r14
    134c:	08 95       	ret

0000134e <nwkTxAckWaitTimerHandler>:
    134e:	ef 92       	push	r14
    1350:	ff 92       	push	r15
    1352:	0f 93       	push	r16
    1354:	1f 93       	push	r17
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	7c 01       	movw	r14, r24
    135c:	10 e0       	ldi	r17, 0x00	; 0
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	01 e0       	ldi	r16, 0x01	; 1
    1364:	d7 e1       	ldi	r29, 0x17	; 23
    1366:	c0 e1       	ldi	r28, 0x10	; 16
    1368:	16 c0       	rjmp	.+44     	; 0x1396 <nwkTxAckWaitTimerHandler+0x48>
    136a:	fc 01       	movw	r30, r24
    136c:	20 81       	ld	r18, Z
    136e:	26 31       	cpi	r18, 0x16	; 22
    1370:	91 f4       	brne	.+36     	; 0x1396 <nwkTxAckWaitTimerHandler+0x48>
    1372:	ec 57       	subi	r30, 0x7C	; 124
    1374:	ff 4f       	sbci	r31, 0xFF	; 255
    1376:	20 81       	ld	r18, Z
    1378:	31 81       	ldd	r19, Z+1	; 0x01
    137a:	21 50       	subi	r18, 0x01	; 1
    137c:	31 09       	sbc	r19, r1
    137e:	31 83       	std	Z+1, r19	; 0x01
    1380:	20 83       	st	Z, r18
    1382:	23 2b       	or	r18, r19
    1384:	39 f4       	brne	.+14     	; 0x1394 <nwkTxAckWaitTimerHandler+0x46>
    1386:	fc 01       	movw	r30, r24
    1388:	d0 83       	st	Z, r29
    138a:	ed 57       	subi	r30, 0x7D	; 125
    138c:	ff 4f       	sbci	r31, 0xFF	; 255
    138e:	c0 83       	st	Z, r28
    1390:	10 2f       	mov	r17, r16
    1392:	01 c0       	rjmp	.+2      	; 0x1396 <nwkTxAckWaitTimerHandler+0x48>
    1394:	10 2f       	mov	r17, r16
    1396:	28 db       	rcall	.-2480   	; 0x9e8 <nwkFrameNext>
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	39 f7       	brne	.-50     	; 0x136a <nwkTxAckWaitTimerHandler+0x1c>
    139c:	11 23       	and	r17, r17
    139e:	11 f0       	breq	.+4      	; 0x13a4 <nwkTxAckWaitTimerHandler+0x56>
    13a0:	c7 01       	movw	r24, r14
    13a2:	55 d3       	rcall	.+1706   	; 0x1a4e <SYS_TimerStart>
    13a4:	df 91       	pop	r29
    13a6:	cf 91       	pop	r28
    13a8:	1f 91       	pop	r17
    13aa:	0f 91       	pop	r16
    13ac:	ff 90       	pop	r15
    13ae:	ef 90       	pop	r14
    13b0:	08 95       	ret

000013b2 <nwkTxInit>:
    13b2:	10 92 22 1f 	sts	0x1F22, r1	; 0x801f22 <nwkTxPhyActiveFrame+0x1>
    13b6:	10 92 21 1f 	sts	0x1F21, r1	; 0x801f21 <nwkTxPhyActiveFrame>
    13ba:	e4 e1       	ldi	r30, 0x14	; 20
    13bc:	ff e1       	ldi	r31, 0x1F	; 31
    13be:	82 e3       	ldi	r24, 0x32	; 50
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	a0 e0       	ldi	r26, 0x00	; 0
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	86 83       	std	Z+6, r24	; 0x06
    13c8:	97 83       	std	Z+7, r25	; 0x07
    13ca:	a0 87       	std	Z+8, r26	; 0x08
    13cc:	b1 87       	std	Z+9, r27	; 0x09
    13ce:	12 86       	std	Z+10, r1	; 0x0a
    13d0:	87 ea       	ldi	r24, 0xA7	; 167
    13d2:	99 e0       	ldi	r25, 0x09	; 9
    13d4:	94 87       	std	Z+12, r25	; 0x0c
    13d6:	83 87       	std	Z+11, r24	; 0x0b
    13d8:	e7 e0       	ldi	r30, 0x07	; 7
    13da:	ff e1       	ldi	r31, 0x1F	; 31
    13dc:	8a e0       	ldi	r24, 0x0A	; 10
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	a0 e0       	ldi	r26, 0x00	; 0
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	86 83       	std	Z+6, r24	; 0x06
    13e6:	97 83       	std	Z+7, r25	; 0x07
    13e8:	a0 87       	std	Z+8, r26	; 0x08
    13ea:	b1 87       	std	Z+9, r27	; 0x09
    13ec:	12 86       	std	Z+10, r1	; 0x0a
    13ee:	8b e7       	ldi	r24, 0x7B	; 123
    13f0:	99 e0       	ldi	r25, 0x09	; 9
    13f2:	94 87       	std	Z+12, r25	; 0x0c
    13f4:	83 87       	std	Z+11, r24	; 0x0b
    13f6:	08 95       	ret

000013f8 <nwkTxFrame>:
    13f8:	cf 93       	push	r28
    13fa:	df 93       	push	r29
    13fc:	ec 01       	movw	r28, r24
    13fe:	fc 01       	movw	r30, r24
    1400:	ea 57       	subi	r30, 0x7A	; 122
    1402:	ff 4f       	sbci	r31, 0xFF	; 255
    1404:	80 81       	ld	r24, Z
    1406:	81 ff       	sbrs	r24, 1
    1408:	03 c0       	rjmp	.+6      	; 0x1410 <nwkTxFrame+0x18>
    140a:	92 e1       	ldi	r25, 0x12	; 18
    140c:	98 83       	st	Y, r25
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <nwkTxFrame+0x1c>
    1410:	92 e1       	ldi	r25, 0x12	; 18
    1412:	98 83       	st	Y, r25
    1414:	fe 01       	movw	r30, r28
    1416:	ed 57       	subi	r30, 0x7D	; 125
    1418:	ff 4f       	sbci	r31, 0xFF	; 255
    141a:	10 82       	st	Z, r1
    141c:	80 ff       	sbrs	r24, 0
    141e:	05 c0       	rjmp	.+10     	; 0x142a <nwkTxFrame+0x32>
    1420:	2f ef       	ldi	r18, 0xFF	; 255
    1422:	3f ef       	ldi	r19, 0xFF	; 255
    1424:	3e 83       	std	Y+6, r19	; 0x06
    1426:	2d 83       	std	Y+5, r18	; 0x05
    1428:	06 c0       	rjmp	.+12     	; 0x1436 <nwkTxFrame+0x3e>
    142a:	20 91 ac 1f 	lds	r18, 0x1FAC	; 0x801fac <nwkIb+0x2>
    142e:	30 91 ad 1f 	lds	r19, 0x1FAD	; 0x801fad <nwkIb+0x3>
    1432:	3e 83       	std	Y+6, r19	; 0x06
    1434:	2d 83       	std	Y+5, r18	; 0x05
    1436:	85 70       	andi	r24, 0x05	; 5
    1438:	19 f4       	brne	.+6      	; 0x1440 <nwkTxFrame+0x48>
    143a:	ce 01       	movw	r24, r28
    143c:	31 dc       	rcall	.-1950   	; 0xca0 <nwkRoutePrepareTx>
    143e:	04 c0       	rjmp	.+8      	; 0x1448 <nwkTxFrame+0x50>
    1440:	8f 85       	ldd	r24, Y+15	; 0x0f
    1442:	98 89       	ldd	r25, Y+16	; 0x10
    1444:	98 87       	std	Y+8, r25	; 0x08
    1446:	8f 83       	std	Y+7, r24	; 0x07
    1448:	ea ea       	ldi	r30, 0xAA	; 170
    144a:	ff e1       	ldi	r31, 0x1F	; 31
    144c:	80 81       	ld	r24, Z
    144e:	91 81       	ldd	r25, Z+1	; 0x01
    1450:	9a 87       	std	Y+10, r25	; 0x0a
    1452:	89 87       	std	Y+9, r24	; 0x09
    1454:	85 81       	ldd	r24, Z+5	; 0x05
    1456:	8f 5f       	subi	r24, 0xFF	; 255
    1458:	85 83       	std	Z+5, r24	; 0x05
    145a:	8c 83       	std	Y+4, r24	; 0x04
    145c:	8f 81       	ldd	r24, Y+7	; 0x07
    145e:	98 85       	ldd	r25, Y+8	; 0x08
    1460:	01 96       	adiw	r24, 0x01	; 1
    1462:	69 f4       	brne	.+26     	; 0x147e <nwkTxFrame+0x86>
    1464:	81 e4       	ldi	r24, 0x41	; 65
    1466:	98 e8       	ldi	r25, 0x88	; 136
    1468:	9b 83       	std	Y+3, r25	; 0x03
    146a:	8a 83       	std	Y+2, r24	; 0x02
    146c:	cf d3       	rcall	.+1950   	; 0x1c0c <rand>
    146e:	cc 57       	subi	r28, 0x7C	; 124
    1470:	df 4f       	sbci	r29, 0xFF	; 255
    1472:	87 70       	andi	r24, 0x07	; 7
    1474:	99 27       	eor	r25, r25
    1476:	01 96       	adiw	r24, 0x01	; 1
    1478:	99 83       	std	Y+1, r25	; 0x01
    147a:	88 83       	st	Y, r24
    147c:	08 c0       	rjmp	.+16     	; 0x148e <nwkTxFrame+0x96>
    147e:	81 e6       	ldi	r24, 0x61	; 97
    1480:	98 e8       	ldi	r25, 0x88	; 136
    1482:	9b 83       	std	Y+3, r25	; 0x03
    1484:	8a 83       	std	Y+2, r24	; 0x02
    1486:	cc 57       	subi	r28, 0x7C	; 124
    1488:	df 4f       	sbci	r29, 0xFF	; 255
    148a:	19 82       	std	Y+1, r1	; 0x01
    148c:	18 82       	st	Y, r1
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	08 95       	ret

00001494 <nwkTxBroadcastFrame>:
    1494:	0f 93       	push	r16
    1496:	1f 93       	push	r17
    1498:	cf 93       	push	r28
    149a:	df 93       	push	r29
    149c:	8c 01       	movw	r16, r24
    149e:	61 da       	rcall	.-2878   	; 0x962 <nwkFrameAlloc>
    14a0:	ec 01       	movw	r28, r24
    14a2:	89 2b       	or	r24, r25
    14a4:	a9 f1       	breq	.+106    	; 0x1510 <nwkTxBroadcastFrame+0x7c>
    14a6:	82 e1       	ldi	r24, 0x12	; 18
    14a8:	88 83       	st	Y, r24
    14aa:	f8 01       	movw	r30, r16
    14ac:	81 81       	ldd	r24, Z+1	; 0x01
    14ae:	89 83       	std	Y+1, r24	; 0x01
    14b0:	fe 01       	movw	r30, r28
    14b2:	ed 57       	subi	r30, 0x7D	; 125
    14b4:	ff 4f       	sbci	r31, 0xFF	; 255
    14b6:	10 82       	st	Z, r1
    14b8:	a9 d3       	rcall	.+1874   	; 0x1c0c <rand>
    14ba:	fe 01       	movw	r30, r28
    14bc:	ec 57       	subi	r30, 0x7C	; 124
    14be:	ff 4f       	sbci	r31, 0xFF	; 255
    14c0:	87 70       	andi	r24, 0x07	; 7
    14c2:	99 27       	eor	r25, r25
    14c4:	01 96       	adiw	r24, 0x01	; 1
    14c6:	91 83       	std	Z+1, r25	; 0x01
    14c8:	80 83       	st	Z, r24
    14ca:	33 96       	adiw	r30, 0x03	; 3
    14cc:	11 82       	std	Z+1, r1	; 0x01
    14ce:	10 82       	st	Z, r1
    14d0:	f8 01       	movw	r30, r16
    14d2:	41 81       	ldd	r20, Z+1	; 0x01
    14d4:	50 e0       	ldi	r21, 0x00	; 0
    14d6:	b8 01       	movw	r22, r16
    14d8:	6e 5f       	subi	r22, 0xFE	; 254
    14da:	7f 4f       	sbci	r23, 0xFF	; 255
    14dc:	ce 01       	movw	r24, r28
    14de:	02 96       	adiw	r24, 0x02	; 2
    14e0:	a3 d3       	rcall	.+1862   	; 0x1c28 <memcpy>
    14e2:	81 e4       	ldi	r24, 0x41	; 65
    14e4:	98 e8       	ldi	r25, 0x88	; 136
    14e6:	9b 83       	std	Y+3, r25	; 0x03
    14e8:	8a 83       	std	Y+2, r24	; 0x02
    14ea:	8f ef       	ldi	r24, 0xFF	; 255
    14ec:	9f ef       	ldi	r25, 0xFF	; 255
    14ee:	98 87       	std	Y+8, r25	; 0x08
    14f0:	8f 83       	std	Y+7, r24	; 0x07
    14f2:	f8 01       	movw	r30, r16
    14f4:	85 81       	ldd	r24, Z+5	; 0x05
    14f6:	96 81       	ldd	r25, Z+6	; 0x06
    14f8:	9e 83       	std	Y+6, r25	; 0x06
    14fa:	8d 83       	std	Y+5, r24	; 0x05
    14fc:	ea ea       	ldi	r30, 0xAA	; 170
    14fe:	ff e1       	ldi	r31, 0x1F	; 31
    1500:	80 81       	ld	r24, Z
    1502:	91 81       	ldd	r25, Z+1	; 0x01
    1504:	9a 87       	std	Y+10, r25	; 0x0a
    1506:	89 87       	std	Y+9, r24	; 0x09
    1508:	85 81       	ldd	r24, Z+5	; 0x05
    150a:	8f 5f       	subi	r24, 0xFF	; 255
    150c:	85 83       	std	Z+5, r24	; 0x05
    150e:	8c 83       	std	Y+4, r24	; 0x04
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	1f 91       	pop	r17
    1516:	0f 91       	pop	r16
    1518:	08 95       	ret

0000151a <nwkTxAckReceived>:
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	fc 01       	movw	r30, r24
    1520:	21 85       	ldd	r18, Z+9	; 0x09
    1522:	23 30       	cpi	r18, 0x03	; 3
    1524:	d9 f4       	brne	.+54     	; 0x155c <nwkTxAckReceived+0x42>
    1526:	10 c0       	rjmp	.+32     	; 0x1548 <nwkTxAckReceived+0x2e>
    1528:	fc 01       	movw	r30, r24
    152a:	20 81       	ld	r18, Z
    152c:	26 31       	cpi	r18, 0x16	; 22
    152e:	89 f4       	brne	.+34     	; 0x1552 <nwkTxAckReceived+0x38>
    1530:	34 85       	ldd	r19, Z+12	; 0x0c
    1532:	29 81       	ldd	r18, Y+1	; 0x01
    1534:	32 13       	cpse	r19, r18
    1536:	0d c0       	rjmp	.+26     	; 0x1552 <nwkTxAckReceived+0x38>
    1538:	27 e1       	ldi	r18, 0x17	; 23
    153a:	20 83       	st	Z, r18
    153c:	2a 81       	ldd	r18, Y+2	; 0x02
    153e:	ea 57       	subi	r30, 0x7A	; 122
    1540:	ff 4f       	sbci	r31, 0xFF	; 255
    1542:	20 83       	st	Z, r18
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	0b c0       	rjmp	.+22     	; 0x155e <nwkTxAckReceived+0x44>
    1548:	fc 01       	movw	r30, r24
    154a:	c7 81       	ldd	r28, Z+7	; 0x07
    154c:	d0 85       	ldd	r29, Z+8	; 0x08
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	4a da       	rcall	.-2924   	; 0x9e8 <nwkFrameNext>
    1554:	00 97       	sbiw	r24, 0x00	; 0
    1556:	41 f7       	brne	.-48     	; 0x1528 <nwkTxAckReceived+0xe>
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	01 c0       	rjmp	.+2      	; 0x155e <nwkTxAckReceived+0x44>
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	08 95       	ret

00001564 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    1564:	e0 91 21 1f 	lds	r30, 0x1F21	; 0x801f21 <nwkTxPhyActiveFrame>
    1568:	f0 91 22 1f 	lds	r31, 0x1F22	; 0x801f22 <nwkTxPhyActiveFrame+0x1>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    156c:	81 30       	cpi	r24, 0x01	; 1
    156e:	21 f0       	breq	.+8      	; 0x1578 <PHY_DataConf+0x14>
    1570:	48 f0       	brcs	.+18     	; 0x1584 <PHY_DataConf+0x20>
    1572:	82 30       	cpi	r24, 0x02	; 2
    1574:	19 f0       	breq	.+6      	; 0x157c <PHY_DataConf+0x18>
    1576:	04 c0       	rjmp	.+8      	; 0x1580 <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    1578:	80 e2       	ldi	r24, 0x20	; 32
    157a:	05 c0       	rjmp	.+10     	; 0x1586 <PHY_DataConf+0x22>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    157c:	81 e2       	ldi	r24, 0x21	; 33
    157e:	03 c0       	rjmp	.+6      	; 0x1586 <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	01 c0       	rjmp	.+2      	; 0x1586 <PHY_DataConf+0x22>
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    1584:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    1586:	df 01       	movw	r26, r30
    1588:	ad 57       	subi	r26, 0x7D	; 125
    158a:	bf 4f       	sbci	r27, 0xFF	; 255
    158c:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    158e:	85 e1       	ldi	r24, 0x15	; 21
    1590:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    1592:	10 92 22 1f 	sts	0x1F22, r1	; 0x801f22 <nwkTxPhyActiveFrame+0x1>
    1596:	10 92 21 1f 	sts	0x1F21, r1	; 0x801f21 <nwkTxPhyActiveFrame>
  nwkIb.lock--;
    159a:	ea ea       	ldi	r30, 0xAA	; 170
    159c:	ff e1       	ldi	r31, 0x1F	; 31
    159e:	86 a1       	ldd	r24, Z+38	; 0x26
    15a0:	97 a1       	ldd	r25, Z+39	; 0x27
    15a2:	01 97       	sbiw	r24, 0x01	; 1
    15a4:	97 a3       	std	Z+39, r25	; 0x27
    15a6:	86 a3       	std	Z+38, r24	; 0x26
    15a8:	08 95       	ret

000015aa <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    15aa:	9f 92       	push	r9
    15ac:	af 92       	push	r10
    15ae:	bf 92       	push	r11
    15b0:	cf 92       	push	r12
    15b2:	df 92       	push	r13
    15b4:	ef 92       	push	r14
    15b6:	ff 92       	push	r15
    15b8:	0f 93       	push	r16
    15ba:	1f 93       	push	r17
    15bc:	cf 93       	push	r28
    15be:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    15c0:	c0 e0       	ldi	r28, 0x00	; 0
    15c2:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    15c4:	0f 2e       	mov	r0, r31
    15c6:	f4 e1       	ldi	r31, 0x14	; 20
    15c8:	af 2e       	mov	r10, r31
    15ca:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    15cc:	0a ea       	ldi	r16, 0xAA	; 170
    15ce:	1f e1       	ldi	r17, 0x1F	; 31
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    15d0:	0f 2e       	mov	r0, r31
    15d2:	f7 e1       	ldi	r31, 0x17	; 23
    15d4:	df 2e       	mov	r13, r31
    15d6:	f0 2d       	mov	r31, r0
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    15d8:	0f 2e       	mov	r0, r31
    15da:	f6 e1       	ldi	r31, 0x16	; 22
    15dc:	9f 2e       	mov	r9, r31
    15de:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    15e0:	0f 2e       	mov	r0, r31
    15e2:	f9 e2       	ldi	r31, 0x29	; 41
    15e4:	ef 2e       	mov	r14, r31
    15e6:	f1 2c       	mov	r15, r1
    15e8:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    15ea:	0f 2e       	mov	r0, r31
    15ec:	f3 e1       	ldi	r31, 0x13	; 19
    15ee:	cf 2e       	mov	r12, r31
    15f0:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    15f2:	0f 2e       	mov	r0, r31
    15f4:	f1 e1       	ldi	r31, 0x11	; 17
    15f6:	bf 2e       	mov	r11, r31
    15f8:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    15fa:	60 c0       	rjmp	.+192    	; 0x16bc <nwkTxTaskHandler+0x112>
  {
    switch (frame->state)
    15fc:	88 81       	ld	r24, Y
    15fe:	83 31       	cpi	r24, 0x13	; 19
    1600:	c1 f0       	breq	.+48     	; 0x1632 <nwkTxTaskHandler+0x88>
    1602:	18 f4       	brcc	.+6      	; 0x160a <nwkTxTaskHandler+0x60>
    1604:	82 31       	cpi	r24, 0x12	; 18
    1606:	39 f0       	breq	.+14     	; 0x1616 <nwkTxTaskHandler+0x6c>
    1608:	59 c0       	rjmp	.+178    	; 0x16bc <nwkTxTaskHandler+0x112>
    160a:	85 31       	cpi	r24, 0x15	; 21
    160c:	49 f1       	breq	.+82     	; 0x1660 <nwkTxTaskHandler+0xb6>
    160e:	87 31       	cpi	r24, 0x17	; 23
    1610:	09 f4       	brne	.+2      	; 0x1614 <nwkTxTaskHandler+0x6a>
    1612:	45 c0       	rjmp	.+138    	; 0x169e <nwkTxTaskHandler+0xf4>
    1614:	53 c0       	rjmp	.+166    	; 0x16bc <nwkTxTaskHandler+0x112>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    1616:	fe 01       	movw	r30, r28
    1618:	ec 57       	subi	r30, 0x7C	; 124
    161a:	ff 4f       	sbci	r31, 0xFF	; 255
    161c:	80 81       	ld	r24, Z
    161e:	91 81       	ldd	r25, Z+1	; 0x01
    1620:	89 2b       	or	r24, r25
    1622:	29 f0       	breq	.+10     	; 0x162e <nwkTxTaskHandler+0x84>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    1624:	b8 82       	st	Y, r11
          SYS_TimerStart(&nwkTxDelayTimer);
    1626:	87 e0       	ldi	r24, 0x07	; 7
    1628:	9f e1       	ldi	r25, 0x1F	; 31
    162a:	11 d2       	rcall	.+1058   	; 0x1a4e <SYS_TimerStart>
    162c:	47 c0       	rjmp	.+142    	; 0x16bc <nwkTxTaskHandler+0x112>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    162e:	c8 82       	st	Y, r12
    1630:	45 c0       	rjmp	.+138    	; 0x16bc <nwkTxTaskHandler+0x112>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    1632:	80 91 21 1f 	lds	r24, 0x1F21	; 0x801f21 <nwkTxPhyActiveFrame>
    1636:	90 91 22 1f 	lds	r25, 0x1F22	; 0x801f22 <nwkTxPhyActiveFrame+0x1>
    163a:	89 2b       	or	r24, r25
    163c:	09 f0       	breq	.+2      	; 0x1640 <nwkTxTaskHandler+0x96>
    163e:	3e c0       	rjmp	.+124    	; 0x16bc <nwkTxTaskHandler+0x112>
        {
          nwkTxPhyActiveFrame = frame;
    1640:	d0 93 22 1f 	sts	0x1F22, r29	; 0x801f22 <nwkTxPhyActiveFrame+0x1>
    1644:	c0 93 21 1f 	sts	0x1F21, r28	; 0x801f21 <nwkTxPhyActiveFrame>
          frame->state = NWK_TX_STATE_WAIT_CONF;
    1648:	a8 82       	st	Y, r10
          PHY_DataReq(frame->data, frame->size);
    164a:	69 81       	ldd	r22, Y+1	; 0x01
    164c:	ce 01       	movw	r24, r28
    164e:	02 96       	adiw	r24, 0x02	; 2
    1650:	cb d0       	rcall	.+406    	; 0x17e8 <PHY_DataReq>
          nwkIb.lock++;
    1652:	f8 01       	movw	r30, r16
    1654:	86 a1       	ldd	r24, Z+38	; 0x26
    1656:	97 a1       	ldd	r25, Z+39	; 0x27
    1658:	01 96       	adiw	r24, 0x01	; 1
    165a:	97 a3       	std	Z+39, r25	; 0x27
    165c:	86 a3       	std	Z+38, r24	; 0x26
    165e:	2e c0       	rjmp	.+92     	; 0x16bc <nwkTxTaskHandler+0x112>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    1660:	fe 01       	movw	r30, r28
    1662:	ed 57       	subi	r30, 0x7D	; 125
    1664:	ff 4f       	sbci	r31, 0xFF	; 255
    1666:	80 81       	ld	r24, Z
    1668:	81 11       	cpse	r24, r1
    166a:	17 c0       	rjmp	.+46     	; 0x169a <nwkTxTaskHandler+0xf0>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    166c:	2d 85       	ldd	r18, Y+13	; 0x0d
    166e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1670:	f8 01       	movw	r30, r16
    1672:	80 81       	ld	r24, Z
    1674:	91 81       	ldd	r25, Z+1	; 0x01
    1676:	28 17       	cp	r18, r24
    1678:	39 07       	cpc	r19, r25
    167a:	69 f4       	brne	.+26     	; 0x1696 <nwkTxTaskHandler+0xec>
    167c:	8b 85       	ldd	r24, Y+11	; 0x0b
    167e:	80 ff       	sbrs	r24, 0
    1680:	0a c0       	rjmp	.+20     	; 0x1696 <nwkTxTaskHandler+0xec>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    1682:	98 82       	st	Y, r9
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    1684:	fe 01       	movw	r30, r28
    1686:	ec 57       	subi	r30, 0x7C	; 124
    1688:	ff 4f       	sbci	r31, 0xFF	; 255
    168a:	f1 82       	std	Z+1, r15	; 0x01
    168c:	e0 82       	st	Z, r14
            SYS_TimerStart(&nwkTxAckWaitTimer);
    168e:	84 e1       	ldi	r24, 0x14	; 20
    1690:	9f e1       	ldi	r25, 0x1F	; 31
    1692:	dd d1       	rcall	.+954    	; 0x1a4e <SYS_TimerStart>
    1694:	13 c0       	rjmp	.+38     	; 0x16bc <nwkTxTaskHandler+0x112>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    1696:	d8 82       	st	Y, r13
    1698:	11 c0       	rjmp	.+34     	; 0x16bc <nwkTxTaskHandler+0x112>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    169a:	d8 82       	st	Y, r13
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    169c:	0f c0       	rjmp	.+30     	; 0x16bc <nwkTxTaskHandler+0x112>
    169e:	ce 01       	movw	r24, r28
    16a0:	b8 da       	rcall	.-2704   	; 0xc12 <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    16a2:	fe 01       	movw	r30, r28
    16a4:	e9 57       	subi	r30, 0x79	; 121
    16a6:	ff 4f       	sbci	r31, 0xFF	; 255
    16a8:	01 90       	ld	r0, Z+
    16aa:	f0 81       	ld	r31, Z
    16ac:	e0 2d       	mov	r30, r0
    16ae:	30 97       	sbiw	r30, 0x00	; 0
          nwkFrameFree(frame);
    16b0:	19 f4       	brne	.+6      	; 0x16b8 <nwkTxTaskHandler+0x10e>
    16b2:	ce 01       	movw	r24, r28
    16b4:	8f d9       	rcall	.-3298   	; 0x9d4 <nwkFrameFree>
        else
          frame->tx.confirm(frame);
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <nwkTxTaskHandler+0x112>
    16b8:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    16ba:	19 95       	eicall
    16bc:	ce 01       	movw	r24, r28
    16be:	94 d9       	rcall	.-3288   	; 0x9e8 <nwkFrameNext>
    16c0:	ec 01       	movw	r28, r24
    16c2:	89 2b       	or	r24, r25
    16c4:	09 f0       	breq	.+2      	; 0x16c8 <nwkTxTaskHandler+0x11e>
    16c6:	9a cf       	rjmp	.-204    	; 0x15fc <nwkTxTaskHandler+0x52>

      default:
        break;
    };
  }
}
    16c8:	df 91       	pop	r29
    16ca:	cf 91       	pop	r28
    16cc:	1f 91       	pop	r17
    16ce:	0f 91       	pop	r16
    16d0:	ff 90       	pop	r15
    16d2:	ef 90       	pop	r14
    16d4:	df 90       	pop	r13
    16d6:	cf 90       	pop	r12
    16d8:	bf 90       	pop	r11
    16da:	af 90       	pop	r10
    16dc:	9f 90       	pop	r9
    16de:	08 95       	ret

000016e0 <phySetChannel>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    16e0:	80 91 23 1f 	lds	r24, 0x1F23	; 0x801f23 <phyBand>
    16e4:	98 2f       	mov	r25, r24
    16e6:	9f 70       	andi	r25, 0x0F	; 15
    16e8:	e4 e5       	ldi	r30, 0x54	; 84
    16ea:	f1 e0       	ldi	r31, 0x01	; 1
    16ec:	80 81       	ld	r24, Z
    16ee:	80 7f       	andi	r24, 0xF0	; 240
    16f0:	89 2b       	or	r24, r25
    16f2:	80 83       	st	Z, r24
    16f4:	80 91 23 1f 	lds	r24, 0x1F23	; 0x801f23 <phyBand>
    16f8:	88 23       	and	r24, r24
    16fa:	29 f0       	breq	.+10     	; 0x1706 <phySetChannel+0x26>
    16fc:	80 91 24 1f 	lds	r24, 0x1F24	; 0x801f24 <phyChannel>
    1700:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7c0153>
    1704:	08 95       	ret
    1706:	80 91 24 1f 	lds	r24, 0x1F24	; 0x801f24 <phyChannel>
    170a:	98 2f       	mov	r25, r24
    170c:	9f 71       	andi	r25, 0x1F	; 31
    170e:	e8 e4       	ldi	r30, 0x48	; 72
    1710:	f1 e0       	ldi	r31, 0x01	; 1
    1712:	80 81       	ld	r24, Z
    1714:	80 7e       	andi	r24, 0xE0	; 224
    1716:	89 2b       	or	r24, r25
    1718:	80 83       	st	Z, r24
    171a:	08 95       	ret

0000171c <phyTrxSetState>:
    171c:	93 e0       	ldi	r25, 0x03	; 3
    171e:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1722:	e1 e4       	ldi	r30, 0x41	; 65
    1724:	f1 e0       	ldi	r31, 0x01	; 1
    1726:	90 81       	ld	r25, Z
    1728:	9f 71       	andi	r25, 0x1F	; 31
    172a:	98 30       	cpi	r25, 0x08	; 8
    172c:	e1 f7       	brne	.-8      	; 0x1726 <phyTrxSetState+0xa>
    172e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1732:	e1 e4       	ldi	r30, 0x41	; 65
    1734:	f1 e0       	ldi	r31, 0x01	; 1
    1736:	90 81       	ld	r25, Z
    1738:	9f 71       	andi	r25, 0x1F	; 31
    173a:	89 13       	cpse	r24, r25
    173c:	fc cf       	rjmp	.-8      	; 0x1736 <phyTrxSetState+0x1a>
    173e:	08 95       	ret

00001740 <phySetRxState>:
    1740:	88 e0       	ldi	r24, 0x08	; 8
    1742:	ec df       	rcall	.-40     	; 0x171c <phyTrxSetState>
    1744:	8f ef       	ldi	r24, 0xFF	; 255
    1746:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    174a:	80 91 25 1f 	lds	r24, 0x1F25	; 0x801f25 <phyRxState>
    174e:	88 23       	and	r24, r24
    1750:	11 f0       	breq	.+4      	; 0x1756 <phySetRxState+0x16>
    1752:	86 e1       	ldi	r24, 0x16	; 22
    1754:	e3 cf       	rjmp	.-58     	; 0x171c <phyTrxSetState>
    1756:	08 95       	ret

00001758 <PHY_Init>:
    1758:	e9 e3       	ldi	r30, 0x39	; 57
    175a:	f1 e0       	ldi	r31, 0x01	; 1
    175c:	80 81       	ld	r24, Z
    175e:	81 60       	ori	r24, 0x01	; 1
    1760:	80 83       	st	Z, r24
    1762:	10 92 25 1f 	sts	0x1F25, r1	; 0x801f25 <phyRxState>
    1766:	10 92 23 1f 	sts	0x1F23, r1	; 0x801f23 <phyBand>
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	80 93 a6 1f 	sts	0x1FA6, r24	; 0x801fa6 <phyState>
    1770:	88 e0       	ldi	r24, 0x08	; 8
    1772:	d4 df       	rcall	.-88     	; 0x171c <phyTrxSetState>
    1774:	8b ee       	ldi	r24, 0xEB	; 235
    1776:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x7c0156>
    177a:	ec e4       	ldi	r30, 0x4C	; 76
    177c:	f1 e0       	ldi	r31, 0x01	; 1
    177e:	80 81       	ld	r24, Z
    1780:	80 68       	ori	r24, 0x80	; 128
    1782:	80 83       	st	Z, r24
    1784:	08 95       	ret

00001786 <PHY_SetRxState>:
    1786:	80 93 25 1f 	sts	0x1F25, r24	; 0x801f25 <phyRxState>
    178a:	da cf       	rjmp	.-76     	; 0x1740 <phySetRxState>
    178c:	08 95       	ret

0000178e <PHY_SetChannel>:
    178e:	80 93 24 1f 	sts	0x1F24, r24	; 0x801f24 <phyChannel>
    1792:	a6 cf       	rjmp	.-180    	; 0x16e0 <phySetChannel>
    1794:	08 95       	ret

00001796 <PHY_SetPanId>:
    1796:	cf 93       	push	r28
    1798:	df 93       	push	r29
    179a:	1f 92       	push	r1
    179c:	1f 92       	push	r1
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	9a 83       	std	Y+2, r25	; 0x02
    17a4:	89 83       	std	Y+1, r24	; 0x01
    17a6:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
    17aa:	8a 81       	ldd	r24, Y+2	; 0x02
    17ac:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	df 91       	pop	r29
    17b6:	cf 91       	pop	r28
    17b8:	08 95       	ret

000017ba <PHY_SetShortAddr>:
    17ba:	cf 93       	push	r28
    17bc:	df 93       	push	r29
    17be:	1f 92       	push	r1
    17c0:	1f 92       	push	r1
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
    17c6:	9a 83       	std	Y+2, r25	; 0x02
    17c8:	89 83       	std	Y+1, r24	; 0x01
    17ca:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
    17d4:	99 81       	ldd	r25, Y+1	; 0x01
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	89 0f       	add	r24, r25
    17da:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
    17de:	0f 90       	pop	r0
    17e0:	0f 90       	pop	r0
    17e2:	df 91       	pop	r29
    17e4:	cf 91       	pop	r28
    17e6:	08 95       	ret

000017e8 <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    17e8:	1f 93       	push	r17
    17ea:	cf 93       	push	r28
    17ec:	df 93       	push	r29
    17ee:	18 2f       	mov	r17, r24
    17f0:	d9 2f       	mov	r29, r25
    17f2:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    17f4:	89 e1       	ldi	r24, 0x19	; 25
    17f6:	92 df       	rcall	.-220    	; 0x171c <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    17f8:	8f ef       	ldi	r24, 0xFF	; 255
    17fa:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    17fe:	82 e0       	ldi	r24, 0x02	; 2
    1800:	8c 0f       	add	r24, r28
    1802:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x7c0180>
  for (uint8_t i = 0; i < size; i++)
    1806:	cc 23       	and	r28, r28
    1808:	71 f0       	breq	.+28     	; 0x1826 <PHY_DataReq+0x3e>
    180a:	a1 2f       	mov	r26, r17
    180c:	bd 2f       	mov	r27, r29
    180e:	c1 50       	subi	r28, 0x01	; 1
    1810:	6c 2f       	mov	r22, r28
    1812:	70 e0       	ldi	r23, 0x00	; 0
    1814:	6e 57       	subi	r22, 0x7E	; 126
    1816:	7e 4f       	sbci	r23, 0xFE	; 254
    1818:	e1 e8       	ldi	r30, 0x81	; 129
    181a:	f1 e0       	ldi	r31, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    181c:	8d 91       	ld	r24, X+
    181e:	81 93       	st	Z+, r24
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    1820:	e6 17       	cp	r30, r22
    1822:	f7 07       	cpc	r31, r23
    1824:	d9 f7       	brne	.-10     	; 0x181c <PHY_DataReq+0x34>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    1826:	83 e0       	ldi	r24, 0x03	; 3
    1828:	80 93 a6 1f 	sts	0x1FA6, r24	; 0x801fa6 <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    182c:	82 e0       	ldi	r24, 0x02	; 2
    182e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
}
    1832:	df 91       	pop	r29
    1834:	cf 91       	pop	r28
    1836:	1f 91       	pop	r17
    1838:	08 95       	ret

0000183a <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    183a:	1f 93       	push	r17
    183c:	cf 93       	push	r28
    183e:	df 93       	push	r29
    1840:	00 d0       	rcall	.+0      	; 0x1842 <PHY_TaskHandler+0x8>
    1842:	1f 92       	push	r1
    1844:	1f 92       	push	r1
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    184a:	80 91 a6 1f 	lds	r24, 0x1FA6	; 0x801fa6 <phyState>
    184e:	82 30       	cpi	r24, 0x02	; 2
    1850:	09 f4       	brne	.+2      	; 0x1854 <PHY_TaskHandler+0x1a>
    1852:	65 c0       	rjmp	.+202    	; 0x191e <PHY_TaskHandler+0xe4>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    1854:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    1858:	83 ff       	sbrs	r24, 3
    185a:	3e c0       	rjmp	.+124    	; 0x18d8 <PHY_TaskHandler+0x9e>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    185c:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7c017b>

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    1860:	6a 2f       	mov	r22, r26
    1862:	70 e0       	ldi	r23, 0x00	; 0
    1864:	ab 01       	movw	r20, r22
    1866:	4f 5f       	subi	r20, 0xFF	; 255
    1868:	5f 4f       	sbci	r21, 0xFF	; 255
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	20 e0       	ldi	r18, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    1870:	fc 01       	movw	r30, r24
    1872:	e0 58       	subi	r30, 0x80	; 128
    1874:	fe 4f       	sbci	r31, 0xFE	; 254
    1876:	30 81       	ld	r19, Z
    1878:	fc 01       	movw	r30, r24
    187a:	ea 5d       	subi	r30, 0xDA	; 218
    187c:	f0 4e       	sbci	r31, 0xE0	; 224
    187e:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    1880:	2f 5f       	subi	r18, 0xFF	; 255
    1882:	82 2f       	mov	r24, r18
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	84 17       	cp	r24, r20
    1888:	95 07       	cpc	r25, r21
    188a:	94 f3       	brlt	.-28     	; 0x1870 <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    188c:	86 e2       	ldi	r24, 0x26	; 38
    188e:	9f e1       	ldi	r25, 0x1F	; 31
    1890:	9a 83       	std	Y+2, r25	; 0x02
    1892:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    1894:	a2 50       	subi	r26, 0x02	; 2
    1896:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    1898:	fb 01       	movw	r30, r22
    189a:	ea 5d       	subi	r30, 0xDA	; 218
    189c:	f0 4e       	sbci	r31, 0xE0	; 224
    189e:	80 81       	ld	r24, Z
    18a0:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    18a2:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7c0147>
    18a6:	8a 55       	subi	r24, 0x5A	; 90
    18a8:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    18aa:	ce 01       	movw	r24, r28
    18ac:	01 96       	adiw	r24, 0x01	; 1
    18ae:	bd da       	rcall	.-2694   	; 0xe2a <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    18b0:	e1 e4       	ldi	r30, 0x41	; 65
    18b2:	f1 e0       	ldi	r31, 0x01	; 1
    18b4:	80 81       	ld	r24, Z
    18b6:	8f 71       	andi	r24, 0x1F	; 31
    18b8:	86 31       	cpi	r24, 0x16	; 22
    18ba:	e1 f7       	brne	.-8      	; 0x18b4 <PHY_TaskHandler+0x7a>

    IRQ_STATUS_REG_s.rxEnd = 1;
    18bc:	ef e4       	ldi	r30, 0x4F	; 79
    18be:	f1 e0       	ldi	r31, 0x01	; 1
    18c0:	80 81       	ld	r24, Z
    18c2:	88 60       	ori	r24, 0x08	; 8
    18c4:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    18c6:	ec e4       	ldi	r30, 0x4C	; 76
    18c8:	f1 e0       	ldi	r31, 0x01	; 1
    18ca:	80 81       	ld	r24, Z
    18cc:	8f 77       	andi	r24, 0x7F	; 127
    18ce:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    18d0:	80 81       	ld	r24, Z
    18d2:	80 68       	ori	r24, 0x80	; 128
    18d4:	80 83       	st	Z, r24
    18d6:	23 c0       	rjmp	.+70     	; 0x191e <PHY_TaskHandler+0xe4>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    18d8:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    18dc:	86 ff       	sbrs	r24, 6
    18de:	1f c0       	rjmp	.+62     	; 0x191e <PHY_TaskHandler+0xe4>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    18e0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    18e4:	8f 71       	andi	r24, 0x1F	; 31
    18e6:	89 31       	cpi	r24, 0x19	; 25
    18e8:	a9 f4       	brne	.+42     	; 0x1914 <PHY_TaskHandler+0xda>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    18ea:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    18ee:	12 95       	swap	r17
    18f0:	16 95       	lsr	r17
    18f2:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    18f4:	49 f0       	breq	.+18     	; 0x1908 <PHY_TaskHandler+0xce>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    18f6:	13 30       	cpi	r17, 0x03	; 3
    18f8:	21 f0       	breq	.+8      	; 0x1902 <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    18fa:	15 30       	cpi	r17, 0x05	; 5
    18fc:	21 f0       	breq	.+8      	; 0x1906 <PHY_TaskHandler+0xcc>
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    18fe:	13 e0       	ldi	r17, 0x03	; 3
    1900:	03 c0       	rjmp	.+6      	; 0x1908 <PHY_TaskHandler+0xce>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    1902:	11 e0       	ldi	r17, 0x01	; 1
    1904:	01 c0       	rjmp	.+2      	; 0x1908 <PHY_TaskHandler+0xce>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    1906:	12 e0       	ldi	r17, 0x02	; 2
    1908:	1b df       	rcall	.-458    	; 0x1740 <phySetRxState>
      phyState = PHY_STATE_IDLE;
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	80 93 a6 1f 	sts	0x1FA6, r24	; 0x801fa6 <phyState>

      PHY_DataConf(status);
    1910:	81 2f       	mov	r24, r17
    1912:	28 de       	rcall	.-944    	; 0x1564 <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    1914:	ef e4       	ldi	r30, 0x4F	; 79
    1916:	f1 e0       	ldi	r31, 0x01	; 1
    1918:	80 81       	ld	r24, Z
    191a:	80 64       	ori	r24, 0x40	; 64
    191c:	80 83       	st	Z, r24
  }
}
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	df 91       	pop	r29
    192a:	cf 91       	pop	r28
    192c:	1f 91       	pop	r17
    192e:	08 95       	ret

00001930 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    1930:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <HAL_Init>
  SYS_TimerInit();
    1934:	6d d0       	rcall	.+218    	; 0x1a10 <SYS_TimerInit>
  PHY_Init();
    1936:	10 df       	rcall	.-480    	; 0x1758 <PHY_Init>
    1938:	0c 94 85 03 	jmp	0x70a	; 0x70a <NWK_Init>
  NWK_Init();
    193c:	08 95       	ret

0000193e <SYS_TaskHandler>:
    193e:	7d df       	rcall	.-262    	; 0x183a <PHY_TaskHandler>
/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
  NWK_TaskHandler();
    1940:	0e 94 b3 03 	call	0x766	; 0x766 <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    1944:	8f c0       	rjmp	.+286    	; 0x1a64 <SYS_TimerTaskHandler>
    1946:	08 95       	ret

00001948 <placeTimer>:
    1948:	0f 93       	push	r16
    194a:	1f 93       	push	r17
    194c:	cf 93       	push	r28
    194e:	df 93       	push	r29
    1950:	ec 01       	movw	r28, r24
    1952:	80 91 a7 1f 	lds	r24, 0x1FA7	; 0x801fa7 <timers>
    1956:	90 91 a8 1f 	lds	r25, 0x1FA8	; 0x801fa8 <timers+0x1>
    195a:	00 97       	sbiw	r24, 0x00	; 0
    195c:	09 f4       	brne	.+2      	; 0x1960 <placeTimer+0x18>
    195e:	45 c0       	rjmp	.+138    	; 0x19ea <placeTimer+0xa2>
    1960:	4e 81       	ldd	r20, Y+6	; 0x06
    1962:	5f 81       	ldd	r21, Y+7	; 0x07
    1964:	68 85       	ldd	r22, Y+8	; 0x08
    1966:	79 85       	ldd	r23, Y+9	; 0x09
    1968:	fc 01       	movw	r30, r24
    196a:	02 81       	ldd	r16, Z+2	; 0x02
    196c:	13 81       	ldd	r17, Z+3	; 0x03
    196e:	24 81       	ldd	r18, Z+4	; 0x04
    1970:	35 81       	ldd	r19, Z+5	; 0x05
    1972:	40 17       	cp	r20, r16
    1974:	51 07       	cpc	r21, r17
    1976:	62 07       	cpc	r22, r18
    1978:	73 07       	cpc	r23, r19
    197a:	60 f0       	brcs	.+24     	; 0x1994 <placeTimer+0x4c>
    197c:	dc 01       	movw	r26, r24
    197e:	17 c0       	rjmp	.+46     	; 0x19ae <placeTimer+0x66>
    1980:	02 81       	ldd	r16, Z+2	; 0x02
    1982:	13 81       	ldd	r17, Z+3	; 0x03
    1984:	24 81       	ldd	r18, Z+4	; 0x04
    1986:	35 81       	ldd	r19, Z+5	; 0x05
    1988:	40 17       	cp	r20, r16
    198a:	51 07       	cpc	r21, r17
    198c:	62 07       	cpc	r22, r18
    198e:	73 07       	cpc	r23, r19
    1990:	68 f4       	brcc	.+26     	; 0x19ac <placeTimer+0x64>
    1992:	03 c0       	rjmp	.+6      	; 0x199a <placeTimer+0x52>
    1994:	fc 01       	movw	r30, r24
    1996:	a0 e0       	ldi	r26, 0x00	; 0
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	04 1b       	sub	r16, r20
    199c:	15 0b       	sbc	r17, r21
    199e:	26 0b       	sbc	r18, r22
    19a0:	37 0b       	sbc	r19, r23
    19a2:	02 83       	std	Z+2, r16	; 0x02
    19a4:	13 83       	std	Z+3, r17	; 0x03
    19a6:	24 83       	std	Z+4, r18	; 0x04
    19a8:	35 83       	std	Z+5, r19	; 0x05
    19aa:	0a c0       	rjmp	.+20     	; 0x19c0 <placeTimer+0x78>
    19ac:	df 01       	movw	r26, r30
    19ae:	40 1b       	sub	r20, r16
    19b0:	51 0b       	sbc	r21, r17
    19b2:	62 0b       	sbc	r22, r18
    19b4:	73 0b       	sbc	r23, r19
    19b6:	ed 91       	ld	r30, X+
    19b8:	fc 91       	ld	r31, X
    19ba:	11 97       	sbiw	r26, 0x01	; 1
    19bc:	30 97       	sbiw	r30, 0x00	; 0
    19be:	01 f7       	brne	.-64     	; 0x1980 <placeTimer+0x38>
    19c0:	4a 83       	std	Y+2, r20	; 0x02
    19c2:	5b 83       	std	Y+3, r21	; 0x03
    19c4:	6c 83       	std	Y+4, r22	; 0x04
    19c6:	7d 83       	std	Y+5, r23	; 0x05
    19c8:	10 97       	sbiw	r26, 0x00	; 0
    19ca:	41 f0       	breq	.+16     	; 0x19dc <placeTimer+0x94>
    19cc:	8d 91       	ld	r24, X+
    19ce:	9c 91       	ld	r25, X
    19d0:	11 97       	sbiw	r26, 0x01	; 1
    19d2:	99 83       	std	Y+1, r25	; 0x01
    19d4:	88 83       	st	Y, r24
    19d6:	cd 93       	st	X+, r28
    19d8:	dc 93       	st	X, r29
    19da:	15 c0       	rjmp	.+42     	; 0x1a06 <placeTimer+0xbe>
    19dc:	99 83       	std	Y+1, r25	; 0x01
    19de:	88 83       	st	Y, r24
    19e0:	d0 93 a8 1f 	sts	0x1FA8, r29	; 0x801fa8 <timers+0x1>
    19e4:	c0 93 a7 1f 	sts	0x1FA7, r28	; 0x801fa7 <timers>
    19e8:	0e c0       	rjmp	.+28     	; 0x1a06 <placeTimer+0xbe>
    19ea:	19 82       	std	Y+1, r1	; 0x01
    19ec:	18 82       	st	Y, r1
    19ee:	8e 81       	ldd	r24, Y+6	; 0x06
    19f0:	9f 81       	ldd	r25, Y+7	; 0x07
    19f2:	a8 85       	ldd	r26, Y+8	; 0x08
    19f4:	b9 85       	ldd	r27, Y+9	; 0x09
    19f6:	8a 83       	std	Y+2, r24	; 0x02
    19f8:	9b 83       	std	Y+3, r25	; 0x03
    19fa:	ac 83       	std	Y+4, r26	; 0x04
    19fc:	bd 83       	std	Y+5, r27	; 0x05
    19fe:	d0 93 a8 1f 	sts	0x1FA8, r29	; 0x801fa8 <timers+0x1>
    1a02:	c0 93 a7 1f 	sts	0x1FA7, r28	; 0x801fa7 <timers>
    1a06:	df 91       	pop	r29
    1a08:	cf 91       	pop	r28
    1a0a:	1f 91       	pop	r17
    1a0c:	0f 91       	pop	r16
    1a0e:	08 95       	ret

00001a10 <SYS_TimerInit>:
    1a10:	10 92 a8 1f 	sts	0x1FA8, r1	; 0x801fa8 <timers+0x1>
    1a14:	10 92 a7 1f 	sts	0x1FA7, r1	; 0x801fa7 <timers>
    1a18:	08 95       	ret

00001a1a <SYS_TimerStarted>:
    1a1a:	e0 91 a7 1f 	lds	r30, 0x1FA7	; 0x801fa7 <timers>
    1a1e:	f0 91 a8 1f 	lds	r31, 0x1FA8	; 0x801fa8 <timers+0x1>
    1a22:	30 97       	sbiw	r30, 0x00	; 0
    1a24:	71 f0       	breq	.+28     	; 0x1a42 <SYS_TimerStarted+0x28>
    1a26:	e8 17       	cp	r30, r24
    1a28:	f9 07       	cpc	r31, r25
    1a2a:	21 f4       	brne	.+8      	; 0x1a34 <SYS_TimerStarted+0x1a>
    1a2c:	0c c0       	rjmp	.+24     	; 0x1a46 <SYS_TimerStarted+0x2c>
    1a2e:	8e 17       	cp	r24, r30
    1a30:	9f 07       	cpc	r25, r31
    1a32:	59 f0       	breq	.+22     	; 0x1a4a <SYS_TimerStarted+0x30>
    1a34:	01 90       	ld	r0, Z+
    1a36:	f0 81       	ld	r31, Z
    1a38:	e0 2d       	mov	r30, r0
    1a3a:	30 97       	sbiw	r30, 0x00	; 0
    1a3c:	c1 f7       	brne	.-16     	; 0x1a2e <SYS_TimerStarted+0x14>
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	08 95       	ret
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	08 95       	ret
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	08 95       	ret
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	08 95       	ret

00001a4e <SYS_TimerStart>:
    1a4e:	cf 93       	push	r28
    1a50:	df 93       	push	r29
    1a52:	ec 01       	movw	r28, r24
    1a54:	e2 df       	rcall	.-60     	; 0x1a1a <SYS_TimerStarted>
    1a56:	81 11       	cpse	r24, r1
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <SYS_TimerStart+0x10>
    1a5a:	ce 01       	movw	r24, r28
    1a5c:	75 df       	rcall	.-278    	; 0x1948 <placeTimer>
    1a5e:	df 91       	pop	r29
    1a60:	cf 91       	pop	r28
    1a62:	08 95       	ret

00001a64 <SYS_TimerTaskHandler>:
    1a64:	cf 92       	push	r12
    1a66:	df 92       	push	r13
    1a68:	ef 92       	push	r14
    1a6a:	ff 92       	push	r15
    1a6c:	cf 93       	push	r28
    1a6e:	df 93       	push	r29
    1a70:	80 91 a9 1f 	lds	r24, 0x1FA9	; 0x801fa9 <halTimerIrqCount>
    1a74:	88 23       	and	r24, r24
    1a76:	09 f4       	brne	.+2      	; 0x1a7a <SYS_TimerTaskHandler+0x16>
    1a78:	59 c0       	rjmp	.+178    	; 0x1b2c <SYS_TimerTaskHandler+0xc8>
    1a7a:	8f b7       	in	r24, 0x3f	; 63
    1a7c:	f8 94       	cli
    1a7e:	c0 90 a9 1f 	lds	r12, 0x1FA9	; 0x801fa9 <halTimerIrqCount>
    1a82:	10 92 a9 1f 	sts	0x1FA9, r1	; 0x801fa9 <halTimerIrqCount>
    1a86:	8f bf       	out	0x3f, r24	; 63
    1a88:	d1 2c       	mov	r13, r1
    1a8a:	e1 2c       	mov	r14, r1
    1a8c:	f1 2c       	mov	r15, r1
    1a8e:	cc 0c       	add	r12, r12
    1a90:	dd 1c       	adc	r13, r13
    1a92:	ee 1c       	adc	r14, r14
    1a94:	ff 1c       	adc	r15, r15
    1a96:	d7 01       	movw	r26, r14
    1a98:	c6 01       	movw	r24, r12
    1a9a:	88 0f       	add	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	aa 1f       	adc	r26, r26
    1aa0:	bb 1f       	adc	r27, r27
    1aa2:	88 0f       	add	r24, r24
    1aa4:	99 1f       	adc	r25, r25
    1aa6:	aa 1f       	adc	r26, r26
    1aa8:	bb 1f       	adc	r27, r27
    1aaa:	c8 0e       	add	r12, r24
    1aac:	d9 1e       	adc	r13, r25
    1aae:	ea 1e       	adc	r14, r26
    1ab0:	fb 1e       	adc	r15, r27
    1ab2:	c0 91 a7 1f 	lds	r28, 0x1FA7	; 0x801fa7 <timers>
    1ab6:	d0 91 a8 1f 	lds	r29, 0x1FA8	; 0x801fa8 <timers+0x1>
    1aba:	20 97       	sbiw	r28, 0x00	; 0
    1abc:	b9 f1       	breq	.+110    	; 0x1b2c <SYS_TimerTaskHandler+0xc8>
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac2:	ac 81       	ldd	r26, Y+4	; 0x04
    1ac4:	bd 81       	ldd	r27, Y+5	; 0x05
    1ac6:	c8 16       	cp	r12, r24
    1ac8:	d9 06       	cpc	r13, r25
    1aca:	ea 06       	cpc	r14, r26
    1acc:	fb 06       	cpc	r15, r27
    1ace:	10 f1       	brcs	.+68     	; 0x1b14 <SYS_TimerTaskHandler+0xb0>
    1ad0:	c8 1a       	sub	r12, r24
    1ad2:	d9 0a       	sbc	r13, r25
    1ad4:	ea 0a       	sbc	r14, r26
    1ad6:	fb 0a       	sbc	r15, r27
    1ad8:	88 81       	ld	r24, Y
    1ada:	99 81       	ldd	r25, Y+1	; 0x01
    1adc:	90 93 a8 1f 	sts	0x1FA8, r25	; 0x801fa8 <timers+0x1>
    1ae0:	80 93 a7 1f 	sts	0x1FA7, r24	; 0x801fa7 <timers>
    1ae4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ae6:	81 30       	cpi	r24, 0x01	; 1
    1ae8:	11 f4       	brne	.+4      	; 0x1aee <SYS_TimerTaskHandler+0x8a>
    1aea:	ce 01       	movw	r24, r28
    1aec:	2d df       	rcall	.-422    	; 0x1948 <placeTimer>
    1aee:	eb 85       	ldd	r30, Y+11	; 0x0b
    1af0:	fc 85       	ldd	r31, Y+12	; 0x0c
    1af2:	ce 01       	movw	r24, r28
    1af4:	19 95       	eicall
    1af6:	c0 91 a7 1f 	lds	r28, 0x1FA7	; 0x801fa7 <timers>
    1afa:	d0 91 a8 1f 	lds	r29, 0x1FA8	; 0x801fa8 <timers+0x1>
    1afe:	20 97       	sbiw	r28, 0x00	; 0
    1b00:	a9 f0       	breq	.+42     	; 0x1b2c <SYS_TimerTaskHandler+0xc8>
    1b02:	8a 81       	ldd	r24, Y+2	; 0x02
    1b04:	9b 81       	ldd	r25, Y+3	; 0x03
    1b06:	ac 81       	ldd	r26, Y+4	; 0x04
    1b08:	bd 81       	ldd	r27, Y+5	; 0x05
    1b0a:	c8 16       	cp	r12, r24
    1b0c:	d9 06       	cpc	r13, r25
    1b0e:	ea 06       	cpc	r14, r26
    1b10:	fb 06       	cpc	r15, r27
    1b12:	f0 f6       	brcc	.-68     	; 0x1ad0 <SYS_TimerTaskHandler+0x6c>
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	9b 81       	ldd	r25, Y+3	; 0x03
    1b18:	ac 81       	ldd	r26, Y+4	; 0x04
    1b1a:	bd 81       	ldd	r27, Y+5	; 0x05
    1b1c:	8c 19       	sub	r24, r12
    1b1e:	9d 09       	sbc	r25, r13
    1b20:	ae 09       	sbc	r26, r14
    1b22:	bf 09       	sbc	r27, r15
    1b24:	8a 83       	std	Y+2, r24	; 0x02
    1b26:	9b 83       	std	Y+3, r25	; 0x03
    1b28:	ac 83       	std	Y+4, r26	; 0x04
    1b2a:	bd 83       	std	Y+5, r27	; 0x05
    1b2c:	df 91       	pop	r29
    1b2e:	cf 91       	pop	r28
    1b30:	ff 90       	pop	r15
    1b32:	ef 90       	pop	r14
    1b34:	df 90       	pop	r13
    1b36:	cf 90       	pop	r12
    1b38:	08 95       	ret

00001b3a <__udivmodsi4>:
    1b3a:	a1 e2       	ldi	r26, 0x21	; 33
    1b3c:	1a 2e       	mov	r1, r26
    1b3e:	aa 1b       	sub	r26, r26
    1b40:	bb 1b       	sub	r27, r27
    1b42:	fd 01       	movw	r30, r26
    1b44:	0d c0       	rjmp	.+26     	; 0x1b60 <__udivmodsi4_ep>

00001b46 <__udivmodsi4_loop>:
    1b46:	aa 1f       	adc	r26, r26
    1b48:	bb 1f       	adc	r27, r27
    1b4a:	ee 1f       	adc	r30, r30
    1b4c:	ff 1f       	adc	r31, r31
    1b4e:	a2 17       	cp	r26, r18
    1b50:	b3 07       	cpc	r27, r19
    1b52:	e4 07       	cpc	r30, r20
    1b54:	f5 07       	cpc	r31, r21
    1b56:	20 f0       	brcs	.+8      	; 0x1b60 <__udivmodsi4_ep>
    1b58:	a2 1b       	sub	r26, r18
    1b5a:	b3 0b       	sbc	r27, r19
    1b5c:	e4 0b       	sbc	r30, r20
    1b5e:	f5 0b       	sbc	r31, r21

00001b60 <__udivmodsi4_ep>:
    1b60:	66 1f       	adc	r22, r22
    1b62:	77 1f       	adc	r23, r23
    1b64:	88 1f       	adc	r24, r24
    1b66:	99 1f       	adc	r25, r25
    1b68:	1a 94       	dec	r1
    1b6a:	69 f7       	brne	.-38     	; 0x1b46 <__udivmodsi4_loop>
    1b6c:	60 95       	com	r22
    1b6e:	70 95       	com	r23
    1b70:	80 95       	com	r24
    1b72:	90 95       	com	r25
    1b74:	9b 01       	movw	r18, r22
    1b76:	ac 01       	movw	r20, r24
    1b78:	bd 01       	movw	r22, r26
    1b7a:	cf 01       	movw	r24, r30
    1b7c:	08 95       	ret

00001b7e <do_rand>:
    1b7e:	8f 92       	push	r8
    1b80:	9f 92       	push	r9
    1b82:	af 92       	push	r10
    1b84:	bf 92       	push	r11
    1b86:	cf 92       	push	r12
    1b88:	df 92       	push	r13
    1b8a:	ef 92       	push	r14
    1b8c:	ff 92       	push	r15
    1b8e:	cf 93       	push	r28
    1b90:	df 93       	push	r29
    1b92:	ec 01       	movw	r28, r24
    1b94:	68 81       	ld	r22, Y
    1b96:	79 81       	ldd	r23, Y+1	; 0x01
    1b98:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b9c:	61 15       	cp	r22, r1
    1b9e:	71 05       	cpc	r23, r1
    1ba0:	81 05       	cpc	r24, r1
    1ba2:	91 05       	cpc	r25, r1
    1ba4:	21 f4       	brne	.+8      	; 0x1bae <do_rand+0x30>
    1ba6:	64 e2       	ldi	r22, 0x24	; 36
    1ba8:	79 ed       	ldi	r23, 0xD9	; 217
    1baa:	8b e5       	ldi	r24, 0x5B	; 91
    1bac:	97 e0       	ldi	r25, 0x07	; 7
    1bae:	2d e1       	ldi	r18, 0x1D	; 29
    1bb0:	33 ef       	ldi	r19, 0xF3	; 243
    1bb2:	41 e0       	ldi	r20, 0x01	; 1
    1bb4:	50 e0       	ldi	r21, 0x00	; 0
    1bb6:	41 d0       	rcall	.+130    	; 0x1c3a <__divmodsi4>
    1bb8:	49 01       	movw	r8, r18
    1bba:	5a 01       	movw	r10, r20
    1bbc:	9b 01       	movw	r18, r22
    1bbe:	ac 01       	movw	r20, r24
    1bc0:	a7 ea       	ldi	r26, 0xA7	; 167
    1bc2:	b1 e4       	ldi	r27, 0x41	; 65
    1bc4:	56 d0       	rcall	.+172    	; 0x1c72 <__muluhisi3>
    1bc6:	6b 01       	movw	r12, r22
    1bc8:	7c 01       	movw	r14, r24
    1bca:	ac ee       	ldi	r26, 0xEC	; 236
    1bcc:	b4 ef       	ldi	r27, 0xF4	; 244
    1bce:	a5 01       	movw	r20, r10
    1bd0:	94 01       	movw	r18, r8
    1bd2:	5b d0       	rcall	.+182    	; 0x1c8a <__mulohisi3>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	8c 0d       	add	r24, r12
    1bda:	9d 1d       	adc	r25, r13
    1bdc:	ae 1d       	adc	r26, r14
    1bde:	bf 1d       	adc	r27, r15
    1be0:	b7 ff       	sbrs	r27, 7
    1be2:	03 c0       	rjmp	.+6      	; 0x1bea <do_rand+0x6c>
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	a1 09       	sbc	r26, r1
    1be8:	b0 48       	sbci	r27, 0x80	; 128
    1bea:	88 83       	st	Y, r24
    1bec:	99 83       	std	Y+1, r25	; 0x01
    1bee:	aa 83       	std	Y+2, r26	; 0x02
    1bf0:	bb 83       	std	Y+3, r27	; 0x03
    1bf2:	9f 77       	andi	r25, 0x7F	; 127
    1bf4:	df 91       	pop	r29
    1bf6:	cf 91       	pop	r28
    1bf8:	ff 90       	pop	r15
    1bfa:	ef 90       	pop	r14
    1bfc:	df 90       	pop	r13
    1bfe:	cf 90       	pop	r12
    1c00:	bf 90       	pop	r11
    1c02:	af 90       	pop	r10
    1c04:	9f 90       	pop	r9
    1c06:	8f 90       	pop	r8
    1c08:	08 95       	ret

00001c0a <rand_r>:
    1c0a:	b9 cf       	rjmp	.-142    	; 0x1b7e <do_rand>

00001c0c <rand>:
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	92 e0       	ldi	r25, 0x02	; 2
    1c10:	b6 cf       	rjmp	.-148    	; 0x1b7e <do_rand>

00001c12 <srand>:
    1c12:	a0 e0       	ldi	r26, 0x00	; 0
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    1c1a:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1c1e:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    1c22:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    1c26:	08 95       	ret

00001c28 <memcpy>:
    1c28:	fb 01       	movw	r30, r22
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	02 c0       	rjmp	.+4      	; 0x1c32 <memcpy+0xa>
    1c2e:	01 90       	ld	r0, Z+
    1c30:	0d 92       	st	X+, r0
    1c32:	41 50       	subi	r20, 0x01	; 1
    1c34:	50 40       	sbci	r21, 0x00	; 0
    1c36:	d8 f7       	brcc	.-10     	; 0x1c2e <memcpy+0x6>
    1c38:	08 95       	ret

00001c3a <__divmodsi4>:
    1c3a:	05 2e       	mov	r0, r21
    1c3c:	97 fb       	bst	r25, 7
    1c3e:	16 f4       	brtc	.+4      	; 0x1c44 <__divmodsi4+0xa>
    1c40:	00 94       	com	r0
    1c42:	0f d0       	rcall	.+30     	; 0x1c62 <__negsi2>
    1c44:	57 fd       	sbrc	r21, 7
    1c46:	05 d0       	rcall	.+10     	; 0x1c52 <__divmodsi4_neg2>
    1c48:	78 df       	rcall	.-272    	; 0x1b3a <__udivmodsi4>
    1c4a:	07 fc       	sbrc	r0, 7
    1c4c:	02 d0       	rcall	.+4      	; 0x1c52 <__divmodsi4_neg2>
    1c4e:	46 f4       	brtc	.+16     	; 0x1c60 <__divmodsi4_exit>
    1c50:	08 c0       	rjmp	.+16     	; 0x1c62 <__negsi2>

00001c52 <__divmodsi4_neg2>:
    1c52:	50 95       	com	r21
    1c54:	40 95       	com	r20
    1c56:	30 95       	com	r19
    1c58:	21 95       	neg	r18
    1c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c5c:	4f 4f       	sbci	r20, 0xFF	; 255
    1c5e:	5f 4f       	sbci	r21, 0xFF	; 255

00001c60 <__divmodsi4_exit>:
    1c60:	08 95       	ret

00001c62 <__negsi2>:
    1c62:	90 95       	com	r25
    1c64:	80 95       	com	r24
    1c66:	70 95       	com	r23
    1c68:	61 95       	neg	r22
    1c6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c70:	08 95       	ret

00001c72 <__muluhisi3>:
    1c72:	0f d0       	rcall	.+30     	; 0x1c92 <__umulhisi3>
    1c74:	a5 9f       	mul	r26, r21
    1c76:	90 0d       	add	r25, r0
    1c78:	b4 9f       	mul	r27, r20
    1c7a:	90 0d       	add	r25, r0
    1c7c:	a4 9f       	mul	r26, r20
    1c7e:	80 0d       	add	r24, r0
    1c80:	91 1d       	adc	r25, r1
    1c82:	11 24       	eor	r1, r1
    1c84:	08 95       	ret

00001c86 <__mulshisi3>:
    1c86:	b7 ff       	sbrs	r27, 7
    1c88:	f4 cf       	rjmp	.-24     	; 0x1c72 <__muluhisi3>

00001c8a <__mulohisi3>:
    1c8a:	f3 df       	rcall	.-26     	; 0x1c72 <__muluhisi3>
    1c8c:	82 1b       	sub	r24, r18
    1c8e:	93 0b       	sbc	r25, r19
    1c90:	08 95       	ret

00001c92 <__umulhisi3>:
    1c92:	a2 9f       	mul	r26, r18
    1c94:	b0 01       	movw	r22, r0
    1c96:	b3 9f       	mul	r27, r19
    1c98:	c0 01       	movw	r24, r0
    1c9a:	a3 9f       	mul	r26, r19
    1c9c:	70 0d       	add	r23, r0
    1c9e:	81 1d       	adc	r24, r1
    1ca0:	11 24       	eor	r1, r1
    1ca2:	91 1d       	adc	r25, r1
    1ca4:	b2 9f       	mul	r27, r18
    1ca6:	70 0d       	add	r23, r0
    1ca8:	81 1d       	adc	r24, r1
    1caa:	11 24       	eor	r1, r1
    1cac:	91 1d       	adc	r25, r1
    1cae:	08 95       	ret

00001cb0 <_exit>:
    1cb0:	f8 94       	cli

00001cb2 <__stop_program>:
    1cb2:	ff cf       	rjmp	.-2      	; 0x1cb2 <__stop_program>
